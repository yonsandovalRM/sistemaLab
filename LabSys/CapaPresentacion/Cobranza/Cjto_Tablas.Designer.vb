'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Cjto_Tablas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Cjto_Tablas
    Inherits Global.System.Data.DataSet
    
    Private tableCOBRANZA As COBRANZADataTable
    
    Private tableCOBRANZA_FILTRO As COBRANZA_FILTRODataTable
    
    Private tableCOBRANZA_DATOSORDENES As COBRANZA_DATOSORDENESDataTable
    
    Private tableCOBRANZA_CAMBIO_ESTADO As COBRANZA_CAMBIO_ESTADODataTable
    
    Private tableCOBRANZA_MOROSO As COBRANZA_MOROSODataTable
    
    Private tableCOBRANZA_DATOSORDENES_MOROSOS As COBRANZA_DATOSORDENES_MOROSOSDataTable
    
    Private tableFACTURAS_NOASIGNADAS As FACTURAS_NOASIGNADASDataTable
    
    Private tableFACTURAS_PORASIGNAR As FACTURAS_PORASIGNARDataTable
    
    Private tablePERSONAL As PERSONALDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("COBRANZA")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZADataTable(ds.Tables("COBRANZA")))
            End If
            If (Not (ds.Tables("COBRANZA_FILTRO")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_FILTRODataTable(ds.Tables("COBRANZA_FILTRO")))
            End If
            If (Not (ds.Tables("COBRANZA_DATOSORDENES")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_DATOSORDENESDataTable(ds.Tables("COBRANZA_DATOSORDENES")))
            End If
            If (Not (ds.Tables("COBRANZA_CAMBIO_ESTADO")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_CAMBIO_ESTADODataTable(ds.Tables("COBRANZA_CAMBIO_ESTADO")))
            End If
            If (Not (ds.Tables("COBRANZA_MOROSO")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_MOROSODataTable(ds.Tables("COBRANZA_MOROSO")))
            End If
            If (Not (ds.Tables("COBRANZA_DATOSORDENES_MOROSOS")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_DATOSORDENES_MOROSOSDataTable(ds.Tables("COBRANZA_DATOSORDENES_MOROSOS")))
            End If
            If (Not (ds.Tables("FACTURAS_NOASIGNADAS")) Is Nothing) Then
                MyBase.Tables.Add(New FACTURAS_NOASIGNADASDataTable(ds.Tables("FACTURAS_NOASIGNADAS")))
            End If
            If (Not (ds.Tables("FACTURAS_PORASIGNAR")) Is Nothing) Then
                MyBase.Tables.Add(New FACTURAS_PORASIGNARDataTable(ds.Tables("FACTURAS_PORASIGNAR")))
            End If
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COBRANZA() As COBRANZADataTable
        Get
            Return Me.tableCOBRANZA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COBRANZA_FILTRO() As COBRANZA_FILTRODataTable
        Get
            Return Me.tableCOBRANZA_FILTRO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COBRANZA_DATOSORDENES() As COBRANZA_DATOSORDENESDataTable
        Get
            Return Me.tableCOBRANZA_DATOSORDENES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COBRANZA_CAMBIO_ESTADO() As COBRANZA_CAMBIO_ESTADODataTable
        Get
            Return Me.tableCOBRANZA_CAMBIO_ESTADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COBRANZA_MOROSO() As COBRANZA_MOROSODataTable
        Get
            Return Me.tableCOBRANZA_MOROSO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COBRANZA_DATOSORDENES_MOROSOS() As COBRANZA_DATOSORDENES_MOROSOSDataTable
        Get
            Return Me.tableCOBRANZA_DATOSORDENES_MOROSOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FACTURAS_NOASIGNADAS() As FACTURAS_NOASIGNADASDataTable
        Get
            Return Me.tableFACTURAS_NOASIGNADAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FACTURAS_PORASIGNAR() As FACTURAS_PORASIGNARDataTable
        Get
            Return Me.tableFACTURAS_PORASIGNAR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PERSONAL() As PERSONALDataTable
        Get
            Return Me.tablePERSONAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Cjto_Tablas = CType(MyBase.Clone,Cjto_Tablas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("COBRANZA")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZADataTable(ds.Tables("COBRANZA")))
            End If
            If (Not (ds.Tables("COBRANZA_FILTRO")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_FILTRODataTable(ds.Tables("COBRANZA_FILTRO")))
            End If
            If (Not (ds.Tables("COBRANZA_DATOSORDENES")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_DATOSORDENESDataTable(ds.Tables("COBRANZA_DATOSORDENES")))
            End If
            If (Not (ds.Tables("COBRANZA_CAMBIO_ESTADO")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_CAMBIO_ESTADODataTable(ds.Tables("COBRANZA_CAMBIO_ESTADO")))
            End If
            If (Not (ds.Tables("COBRANZA_MOROSO")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_MOROSODataTable(ds.Tables("COBRANZA_MOROSO")))
            End If
            If (Not (ds.Tables("COBRANZA_DATOSORDENES_MOROSOS")) Is Nothing) Then
                MyBase.Tables.Add(New COBRANZA_DATOSORDENES_MOROSOSDataTable(ds.Tables("COBRANZA_DATOSORDENES_MOROSOS")))
            End If
            If (Not (ds.Tables("FACTURAS_NOASIGNADAS")) Is Nothing) Then
                MyBase.Tables.Add(New FACTURAS_NOASIGNADASDataTable(ds.Tables("FACTURAS_NOASIGNADAS")))
            End If
            If (Not (ds.Tables("FACTURAS_PORASIGNAR")) Is Nothing) Then
                MyBase.Tables.Add(New FACTURAS_PORASIGNARDataTable(ds.Tables("FACTURAS_PORASIGNAR")))
            End If
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCOBRANZA = CType(MyBase.Tables("COBRANZA"),COBRANZADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOBRANZA) Is Nothing) Then
                Me.tableCOBRANZA.InitVars
            End If
        End If
        Me.tableCOBRANZA_FILTRO = CType(MyBase.Tables("COBRANZA_FILTRO"),COBRANZA_FILTRODataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOBRANZA_FILTRO) Is Nothing) Then
                Me.tableCOBRANZA_FILTRO.InitVars
            End If
        End If
        Me.tableCOBRANZA_DATOSORDENES = CType(MyBase.Tables("COBRANZA_DATOSORDENES"),COBRANZA_DATOSORDENESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOBRANZA_DATOSORDENES) Is Nothing) Then
                Me.tableCOBRANZA_DATOSORDENES.InitVars
            End If
        End If
        Me.tableCOBRANZA_CAMBIO_ESTADO = CType(MyBase.Tables("COBRANZA_CAMBIO_ESTADO"),COBRANZA_CAMBIO_ESTADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOBRANZA_CAMBIO_ESTADO) Is Nothing) Then
                Me.tableCOBRANZA_CAMBIO_ESTADO.InitVars
            End If
        End If
        Me.tableCOBRANZA_MOROSO = CType(MyBase.Tables("COBRANZA_MOROSO"),COBRANZA_MOROSODataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOBRANZA_MOROSO) Is Nothing) Then
                Me.tableCOBRANZA_MOROSO.InitVars
            End If
        End If
        Me.tableCOBRANZA_DATOSORDENES_MOROSOS = CType(MyBase.Tables("COBRANZA_DATOSORDENES_MOROSOS"),COBRANZA_DATOSORDENES_MOROSOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOBRANZA_DATOSORDENES_MOROSOS) Is Nothing) Then
                Me.tableCOBRANZA_DATOSORDENES_MOROSOS.InitVars
            End If
        End If
        Me.tableFACTURAS_NOASIGNADAS = CType(MyBase.Tables("FACTURAS_NOASIGNADAS"),FACTURAS_NOASIGNADASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFACTURAS_NOASIGNADAS) Is Nothing) Then
                Me.tableFACTURAS_NOASIGNADAS.InitVars
            End If
        End If
        Me.tableFACTURAS_PORASIGNAR = CType(MyBase.Tables("FACTURAS_PORASIGNAR"),FACTURAS_PORASIGNARDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFACTURAS_PORASIGNAR) Is Nothing) Then
                Me.tableFACTURAS_PORASIGNAR.InitVars
            End If
        End If
        Me.tablePERSONAL = CType(MyBase.Tables("PERSONAL"),PERSONALDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePERSONAL) Is Nothing) Then
                Me.tablePERSONAL.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Cjto_Tablas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Cjto_Tablas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCOBRANZA = New COBRANZADataTable
        MyBase.Tables.Add(Me.tableCOBRANZA)
        Me.tableCOBRANZA_FILTRO = New COBRANZA_FILTRODataTable
        MyBase.Tables.Add(Me.tableCOBRANZA_FILTRO)
        Me.tableCOBRANZA_DATOSORDENES = New COBRANZA_DATOSORDENESDataTable
        MyBase.Tables.Add(Me.tableCOBRANZA_DATOSORDENES)
        Me.tableCOBRANZA_CAMBIO_ESTADO = New COBRANZA_CAMBIO_ESTADODataTable
        MyBase.Tables.Add(Me.tableCOBRANZA_CAMBIO_ESTADO)
        Me.tableCOBRANZA_MOROSO = New COBRANZA_MOROSODataTable
        MyBase.Tables.Add(Me.tableCOBRANZA_MOROSO)
        Me.tableCOBRANZA_DATOSORDENES_MOROSOS = New COBRANZA_DATOSORDENES_MOROSOSDataTable
        MyBase.Tables.Add(Me.tableCOBRANZA_DATOSORDENES_MOROSOS)
        Me.tableFACTURAS_NOASIGNADAS = New FACTURAS_NOASIGNADASDataTable
        MyBase.Tables.Add(Me.tableFACTURAS_NOASIGNADAS)
        Me.tableFACTURAS_PORASIGNAR = New FACTURAS_PORASIGNARDataTable
        MyBase.Tables.Add(Me.tableFACTURAS_PORASIGNAR)
        Me.tablePERSONAL = New PERSONALDataTable
        MyBase.Tables.Add(Me.tablePERSONAL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOBRANZA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOBRANZA_FILTRO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOBRANZA_DATOSORDENES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOBRANZA_CAMBIO_ESTADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOBRANZA_MOROSO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOBRANZA_DATOSORDENES_MOROSOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFACTURAS_NOASIGNADAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFACTURAS_PORASIGNAR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePERSONAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Cjto_Tablas = New Cjto_Tablas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub COBRANZARowChangeEventHandler(ByVal sender As Object, ByVal e As COBRANZARowChangeEvent)
    
    Public Delegate Sub COBRANZA_FILTRORowChangeEventHandler(ByVal sender As Object, ByVal e As COBRANZA_FILTRORowChangeEvent)
    
    Public Delegate Sub COBRANZA_DATOSORDENESRowChangeEventHandler(ByVal sender As Object, ByVal e As COBRANZA_DATOSORDENESRowChangeEvent)
    
    Public Delegate Sub COBRANZA_CAMBIO_ESTADORowChangeEventHandler(ByVal sender As Object, ByVal e As COBRANZA_CAMBIO_ESTADORowChangeEvent)
    
    Public Delegate Sub COBRANZA_MOROSORowChangeEventHandler(ByVal sender As Object, ByVal e As COBRANZA_MOROSORowChangeEvent)
    
    Public Delegate Sub COBRANZA_DATOSORDENES_MOROSOSRowChangeEventHandler(ByVal sender As Object, ByVal e As COBRANZA_DATOSORDENES_MOROSOSRowChangeEvent)
    
    Public Delegate Sub FACTURAS_NOASIGNADASRowChangeEventHandler(ByVal sender As Object, ByVal e As FACTURAS_NOASIGNADASRowChangeEvent)
    
    Public Delegate Sub FACTURAS_PORASIGNARRowChangeEventHandler(ByVal sender As Object, ByVal e As FACTURAS_PORASIGNARRowChangeEvent)
    
    Public Delegate Sub PERSONALRowChangeEventHandler(ByVal sender As Object, ByVal e As PERSONALRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COBRANZADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFAC_NUMERO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_EMISION As Global.System.Data.DataColumn
        
        Private columnFAC_RSOCIAL As Global.System.Data.DataColumn
        
        Private columnFAC_RUT As Global.System.Data.DataColumn
        
        Private columnFAC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnFAC_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_CONDICION_PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_ORDEN_COMPRA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_ABONO As Global.System.Data.DataColumn
        
        Private columnFAC_SALDO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_PACTADA As Global.System.Data.DataColumn
        
        Private columnFAC_ENCPAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F1PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F2PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_LLAMAR As Global.System.Data.DataColumn
        
        Private columnFAC_ASIGNADA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_ASIGNADA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COBRANZA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_EMISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_EMISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_CONDICION_PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_CONDICION_PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ORDEN_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ORDEN_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ABONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ABONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_SALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_PACTADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_PACTADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ENCPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ENCPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F1PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F1PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F2PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F2PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_LLAMARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_LLAMAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ASIGNADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ASIGNADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_ASIGNADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_ASIGNADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COBRANZARow
            Get
                Return CType(Me.Rows(index),COBRANZARow)
            End Get
        End Property
        
        Public Event COBRANZARowChanging As COBRANZARowChangeEventHandler
        
        Public Event COBRANZARowChanged As COBRANZARowChangeEventHandler
        
        Public Event COBRANZARowDeleting As COBRANZARowChangeEventHandler
        
        Public Event COBRANZARowDeleted As COBRANZARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOBRANZARow(ByVal row As COBRANZARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOBRANZARow( _
                    ByVal FAC_NUMERO As Integer,  _
                    ByVal FAC_FECHA_EMISION As Date,  _
                    ByVal FAC_RSOCIAL As String,  _
                    ByVal FAC_RUT As String,  _
                    ByVal FAC_EMPRESA As String,  _
                    ByVal FAC_TOTAL As Integer,  _
                    ByVal FAC_CONDICION_PAGO As String,  _
                    ByVal FAC_ORDEN_COMPRA As String,  _
                    ByVal FAC_FECHA_COBRANZA As Date,  _
                    ByVal FAC_FECHA_COBRANZA2 As Date,  _
                    ByVal FAC_NOTA_COBRANZA As String,  _
                    ByVal FAC_NOTA_COBRANZA2 As String,  _
                    ByVal FAC_ABONO As Integer,  _
                    ByVal FAC_SALDO As Integer,  _
                    ByVal FAC_FECHA_PACTADA As Date,  _
                    ByVal FAC_ENCPAGO As String,  _
                    ByVal FAC_F1PAGO As String,  _
                    ByVal FAC_F2PAGO As String,  _
                    ByVal FAC_FECHA_LLAMAR As String,  _
                    ByVal FAC_ASIGNADA As String,  _
                    ByVal FAC_FECHA_ASIGNADA As Date) As COBRANZARow
            Dim rowCOBRANZARow As COBRANZARow = CType(Me.NewRow,COBRANZARow)
            Dim columnValuesArray() As Object = New Object() {FAC_NUMERO, FAC_FECHA_EMISION, FAC_RSOCIAL, FAC_RUT, FAC_EMPRESA, FAC_TOTAL, FAC_CONDICION_PAGO, FAC_ORDEN_COMPRA, FAC_FECHA_COBRANZA, FAC_FECHA_COBRANZA2, FAC_NOTA_COBRANZA, FAC_NOTA_COBRANZA2, FAC_ABONO, FAC_SALDO, FAC_FECHA_PACTADA, FAC_ENCPAGO, FAC_F1PAGO, FAC_F2PAGO, FAC_FECHA_LLAMAR, FAC_ASIGNADA, FAC_FECHA_ASIGNADA}
            rowCOBRANZARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOBRANZARow)
            Return rowCOBRANZARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COBRANZADataTable = CType(MyBase.Clone,COBRANZADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COBRANZADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFAC_NUMERO = MyBase.Columns("FAC_NUMERO")
            Me.columnFAC_FECHA_EMISION = MyBase.Columns("FAC_FECHA_EMISION")
            Me.columnFAC_RSOCIAL = MyBase.Columns("FAC_RSOCIAL")
            Me.columnFAC_RUT = MyBase.Columns("FAC_RUT")
            Me.columnFAC_EMPRESA = MyBase.Columns("FAC_EMPRESA")
            Me.columnFAC_TOTAL = MyBase.Columns("FAC_TOTAL")
            Me.columnFAC_CONDICION_PAGO = MyBase.Columns("FAC_CONDICION_PAGO")
            Me.columnFAC_ORDEN_COMPRA = MyBase.Columns("FAC_ORDEN_COMPRA")
            Me.columnFAC_FECHA_COBRANZA = MyBase.Columns("FAC_FECHA_COBRANZA")
            Me.columnFAC_FECHA_COBRANZA2 = MyBase.Columns("FAC_FECHA_COBRANZA2")
            Me.columnFAC_NOTA_COBRANZA = MyBase.Columns("FAC_NOTA_COBRANZA")
            Me.columnFAC_NOTA_COBRANZA2 = MyBase.Columns("FAC_NOTA_COBRANZA2")
            Me.columnFAC_ABONO = MyBase.Columns("FAC_ABONO")
            Me.columnFAC_SALDO = MyBase.Columns("FAC_SALDO")
            Me.columnFAC_FECHA_PACTADA = MyBase.Columns("FAC_FECHA_PACTADA")
            Me.columnFAC_ENCPAGO = MyBase.Columns("FAC_ENCPAGO")
            Me.columnFAC_F1PAGO = MyBase.Columns("FAC_F1PAGO")
            Me.columnFAC_F2PAGO = MyBase.Columns("FAC_F2PAGO")
            Me.columnFAC_FECHA_LLAMAR = MyBase.Columns("FAC_FECHA_LLAMAR")
            Me.columnFAC_ASIGNADA = MyBase.Columns("FAC_ASIGNADA")
            Me.columnFAC_FECHA_ASIGNADA = MyBase.Columns("FAC_FECHA_ASIGNADA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFAC_NUMERO = New Global.System.Data.DataColumn("FAC_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NUMERO)
            Me.columnFAC_FECHA_EMISION = New Global.System.Data.DataColumn("FAC_FECHA_EMISION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_EMISION)
            Me.columnFAC_RSOCIAL = New Global.System.Data.DataColumn("FAC_RSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RSOCIAL)
            Me.columnFAC_RUT = New Global.System.Data.DataColumn("FAC_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RUT)
            Me.columnFAC_EMPRESA = New Global.System.Data.DataColumn("FAC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_EMPRESA)
            Me.columnFAC_TOTAL = New Global.System.Data.DataColumn("FAC_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_TOTAL)
            Me.columnFAC_CONDICION_PAGO = New Global.System.Data.DataColumn("FAC_CONDICION_PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_CONDICION_PAGO)
            Me.columnFAC_ORDEN_COMPRA = New Global.System.Data.DataColumn("FAC_ORDEN_COMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ORDEN_COMPRA)
            Me.columnFAC_FECHA_COBRANZA = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA)
            Me.columnFAC_FECHA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA2)
            Me.columnFAC_NOTA_COBRANZA = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA)
            Me.columnFAC_NOTA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA2)
            Me.columnFAC_ABONO = New Global.System.Data.DataColumn("FAC_ABONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ABONO)
            Me.columnFAC_SALDO = New Global.System.Data.DataColumn("FAC_SALDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_SALDO)
            Me.columnFAC_FECHA_PACTADA = New Global.System.Data.DataColumn("FAC_FECHA_PACTADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_PACTADA)
            Me.columnFAC_ENCPAGO = New Global.System.Data.DataColumn("FAC_ENCPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ENCPAGO)
            Me.columnFAC_F1PAGO = New Global.System.Data.DataColumn("FAC_F1PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F1PAGO)
            Me.columnFAC_F2PAGO = New Global.System.Data.DataColumn("FAC_F2PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F2PAGO)
            Me.columnFAC_FECHA_LLAMAR = New Global.System.Data.DataColumn("FAC_FECHA_LLAMAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_LLAMAR)
            Me.columnFAC_ASIGNADA = New Global.System.Data.DataColumn("FAC_ASIGNADA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ASIGNADA)
            Me.columnFAC_FECHA_ASIGNADA = New Global.System.Data.DataColumn("FAC_FECHA_ASIGNADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_ASIGNADA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOBRANZARow() As COBRANZARow
            Return CType(Me.NewRow,COBRANZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COBRANZARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COBRANZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COBRANZARowChangedEvent) Is Nothing) Then
                RaiseEvent COBRANZARowChanged(Me, New COBRANZARowChangeEvent(CType(e.Row,COBRANZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COBRANZARowChangingEvent) Is Nothing) Then
                RaiseEvent COBRANZARowChanging(Me, New COBRANZARowChangeEvent(CType(e.Row,COBRANZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COBRANZARowDeletedEvent) Is Nothing) Then
                RaiseEvent COBRANZARowDeleted(Me, New COBRANZARowChangeEvent(CType(e.Row,COBRANZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COBRANZARowDeletingEvent) Is Nothing) Then
                RaiseEvent COBRANZARowDeleting(Me, New COBRANZARowChangeEvent(CType(e.Row,COBRANZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOBRANZARow(ByVal row As COBRANZARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COBRANZADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COBRANZA_FILTRODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFAC_NUMERO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_EMISION As Global.System.Data.DataColumn
        
        Private columnFAC_RSOCIAL As Global.System.Data.DataColumn
        
        Private columnFAC_RUT As Global.System.Data.DataColumn
        
        Private columnFAC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnFAC_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_CONDICION_PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_ORDEN_COMPRA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_ABONO As Global.System.Data.DataColumn
        
        Private columnFAC_SALDO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_PACTADA As Global.System.Data.DataColumn
        
        Private columnFAC_ENCPAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F1PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F2PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_LLAMAR As Global.System.Data.DataColumn
        
        Private columnFAC_ASIGNADA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_ASIGNADA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COBRANZA_FILTRO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_EMISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_EMISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_CONDICION_PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_CONDICION_PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ORDEN_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ORDEN_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ABONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ABONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_SALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_PACTADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_PACTADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ENCPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ENCPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F1PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F1PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F2PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F2PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_LLAMARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_LLAMAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ASIGNADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ASIGNADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_ASIGNADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_ASIGNADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COBRANZA_FILTRORow
            Get
                Return CType(Me.Rows(index),COBRANZA_FILTRORow)
            End Get
        End Property
        
        Public Event COBRANZA_FILTRORowChanging As COBRANZA_FILTRORowChangeEventHandler
        
        Public Event COBRANZA_FILTRORowChanged As COBRANZA_FILTRORowChangeEventHandler
        
        Public Event COBRANZA_FILTRORowDeleting As COBRANZA_FILTRORowChangeEventHandler
        
        Public Event COBRANZA_FILTRORowDeleted As COBRANZA_FILTRORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOBRANZA_FILTRORow(ByVal row As COBRANZA_FILTRORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOBRANZA_FILTRORow( _
                    ByVal FAC_NUMERO As Integer,  _
                    ByVal FAC_FECHA_EMISION As Date,  _
                    ByVal FAC_RSOCIAL As String,  _
                    ByVal FAC_RUT As String,  _
                    ByVal FAC_EMPRESA As String,  _
                    ByVal FAC_TOTAL As Integer,  _
                    ByVal FAC_CONDICION_PAGO As String,  _
                    ByVal FAC_ORDEN_COMPRA As String,  _
                    ByVal FAC_FECHA_COBRANZA As Date,  _
                    ByVal FAC_FECHA_COBRANZA2 As Date,  _
                    ByVal FAC_NOTA_COBRANZA As String,  _
                    ByVal FAC_NOTA_COBRANZA2 As String,  _
                    ByVal FAC_ABONO As Integer,  _
                    ByVal FAC_SALDO As Integer,  _
                    ByVal FAC_FECHA_PACTADA As Date,  _
                    ByVal FAC_ENCPAGO As String,  _
                    ByVal FAC_F1PAGO As String,  _
                    ByVal FAC_F2PAGO As String,  _
                    ByVal FAC_FECHA_LLAMAR As String,  _
                    ByVal FAC_ASIGNADA As String,  _
                    ByVal FAC_FECHA_ASIGNADA As Date) As COBRANZA_FILTRORow
            Dim rowCOBRANZA_FILTRORow As COBRANZA_FILTRORow = CType(Me.NewRow,COBRANZA_FILTRORow)
            Dim columnValuesArray() As Object = New Object() {FAC_NUMERO, FAC_FECHA_EMISION, FAC_RSOCIAL, FAC_RUT, FAC_EMPRESA, FAC_TOTAL, FAC_CONDICION_PAGO, FAC_ORDEN_COMPRA, FAC_FECHA_COBRANZA, FAC_FECHA_COBRANZA2, FAC_NOTA_COBRANZA, FAC_NOTA_COBRANZA2, FAC_ABONO, FAC_SALDO, FAC_FECHA_PACTADA, FAC_ENCPAGO, FAC_F1PAGO, FAC_F2PAGO, FAC_FECHA_LLAMAR, FAC_ASIGNADA, FAC_FECHA_ASIGNADA}
            rowCOBRANZA_FILTRORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOBRANZA_FILTRORow)
            Return rowCOBRANZA_FILTRORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COBRANZA_FILTRODataTable = CType(MyBase.Clone,COBRANZA_FILTRODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COBRANZA_FILTRODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFAC_NUMERO = MyBase.Columns("FAC_NUMERO")
            Me.columnFAC_FECHA_EMISION = MyBase.Columns("FAC_FECHA_EMISION")
            Me.columnFAC_RSOCIAL = MyBase.Columns("FAC_RSOCIAL")
            Me.columnFAC_RUT = MyBase.Columns("FAC_RUT")
            Me.columnFAC_EMPRESA = MyBase.Columns("FAC_EMPRESA")
            Me.columnFAC_TOTAL = MyBase.Columns("FAC_TOTAL")
            Me.columnFAC_CONDICION_PAGO = MyBase.Columns("FAC_CONDICION_PAGO")
            Me.columnFAC_ORDEN_COMPRA = MyBase.Columns("FAC_ORDEN_COMPRA")
            Me.columnFAC_FECHA_COBRANZA = MyBase.Columns("FAC_FECHA_COBRANZA")
            Me.columnFAC_FECHA_COBRANZA2 = MyBase.Columns("FAC_FECHA_COBRANZA2")
            Me.columnFAC_NOTA_COBRANZA = MyBase.Columns("FAC_NOTA_COBRANZA")
            Me.columnFAC_NOTA_COBRANZA2 = MyBase.Columns("FAC_NOTA_COBRANZA2")
            Me.columnFAC_ABONO = MyBase.Columns("FAC_ABONO")
            Me.columnFAC_SALDO = MyBase.Columns("FAC_SALDO")
            Me.columnFAC_FECHA_PACTADA = MyBase.Columns("FAC_FECHA_PACTADA")
            Me.columnFAC_ENCPAGO = MyBase.Columns("FAC_ENCPAGO")
            Me.columnFAC_F1PAGO = MyBase.Columns("FAC_F1PAGO")
            Me.columnFAC_F2PAGO = MyBase.Columns("FAC_F2PAGO")
            Me.columnFAC_FECHA_LLAMAR = MyBase.Columns("FAC_FECHA_LLAMAR")
            Me.columnFAC_ASIGNADA = MyBase.Columns("FAC_ASIGNADA")
            Me.columnFAC_FECHA_ASIGNADA = MyBase.Columns("FAC_FECHA_ASIGNADA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFAC_NUMERO = New Global.System.Data.DataColumn("FAC_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NUMERO)
            Me.columnFAC_FECHA_EMISION = New Global.System.Data.DataColumn("FAC_FECHA_EMISION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_EMISION)
            Me.columnFAC_RSOCIAL = New Global.System.Data.DataColumn("FAC_RSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RSOCIAL)
            Me.columnFAC_RUT = New Global.System.Data.DataColumn("FAC_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RUT)
            Me.columnFAC_EMPRESA = New Global.System.Data.DataColumn("FAC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_EMPRESA)
            Me.columnFAC_TOTAL = New Global.System.Data.DataColumn("FAC_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_TOTAL)
            Me.columnFAC_CONDICION_PAGO = New Global.System.Data.DataColumn("FAC_CONDICION_PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_CONDICION_PAGO)
            Me.columnFAC_ORDEN_COMPRA = New Global.System.Data.DataColumn("FAC_ORDEN_COMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ORDEN_COMPRA)
            Me.columnFAC_FECHA_COBRANZA = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA)
            Me.columnFAC_FECHA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA2)
            Me.columnFAC_NOTA_COBRANZA = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA)
            Me.columnFAC_NOTA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA2)
            Me.columnFAC_ABONO = New Global.System.Data.DataColumn("FAC_ABONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ABONO)
            Me.columnFAC_SALDO = New Global.System.Data.DataColumn("FAC_SALDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_SALDO)
            Me.columnFAC_FECHA_PACTADA = New Global.System.Data.DataColumn("FAC_FECHA_PACTADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_PACTADA)
            Me.columnFAC_ENCPAGO = New Global.System.Data.DataColumn("FAC_ENCPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ENCPAGO)
            Me.columnFAC_F1PAGO = New Global.System.Data.DataColumn("FAC_F1PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F1PAGO)
            Me.columnFAC_F2PAGO = New Global.System.Data.DataColumn("FAC_F2PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F2PAGO)
            Me.columnFAC_FECHA_LLAMAR = New Global.System.Data.DataColumn("FAC_FECHA_LLAMAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_LLAMAR)
            Me.columnFAC_ASIGNADA = New Global.System.Data.DataColumn("FAC_ASIGNADA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ASIGNADA)
            Me.columnFAC_FECHA_ASIGNADA = New Global.System.Data.DataColumn("FAC_FECHA_ASIGNADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_ASIGNADA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOBRANZA_FILTRORow() As COBRANZA_FILTRORow
            Return CType(Me.NewRow,COBRANZA_FILTRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COBRANZA_FILTRORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COBRANZA_FILTRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COBRANZA_FILTRORowChangedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_FILTRORowChanged(Me, New COBRANZA_FILTRORowChangeEvent(CType(e.Row,COBRANZA_FILTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COBRANZA_FILTRORowChangingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_FILTRORowChanging(Me, New COBRANZA_FILTRORowChangeEvent(CType(e.Row,COBRANZA_FILTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COBRANZA_FILTRORowDeletedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_FILTRORowDeleted(Me, New COBRANZA_FILTRORowChangeEvent(CType(e.Row,COBRANZA_FILTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COBRANZA_FILTRORowDeletingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_FILTRORowDeleting(Me, New COBRANZA_FILTRORowChangeEvent(CType(e.Row,COBRANZA_FILTRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOBRANZA_FILTRORow(ByVal row As COBRANZA_FILTRORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COBRANZA_FILTRODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COBRANZA_DATOSORDENESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_SOL_NOMBRE As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FONO1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FONO2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_CELULAR1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_CELULAR2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnOT_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnOT_ORDENCOMPRA As Global.System.Data.DataColumn
        
        Private columnOT_FAC_ENCPAGO As Global.System.Data.DataColumn
        
        Private columnOT_FAC_F1PAGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COBRANZA_DATOSORDENES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_CELULAR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_CELULAR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_CELULAR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_CELULAR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ORDENCOMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ORDENCOMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_ENCPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_ENCPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_F1PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_F1PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COBRANZA_DATOSORDENESRow
            Get
                Return CType(Me.Rows(index),COBRANZA_DATOSORDENESRow)
            End Get
        End Property
        
        Public Event COBRANZA_DATOSORDENESRowChanging As COBRANZA_DATOSORDENESRowChangeEventHandler
        
        Public Event COBRANZA_DATOSORDENESRowChanged As COBRANZA_DATOSORDENESRowChangeEventHandler
        
        Public Event COBRANZA_DATOSORDENESRowDeleting As COBRANZA_DATOSORDENESRowChangeEventHandler
        
        Public Event COBRANZA_DATOSORDENESRowDeleted As COBRANZA_DATOSORDENESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOBRANZA_DATOSORDENESRow(ByVal row As COBRANZA_DATOSORDENESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOBRANZA_DATOSORDENESRow(ByVal OT_SOL_NOMBRE As String, ByVal OT_SOL_FONO1 As String, ByVal OT_SOL_FONO2 As String, ByVal OT_SOL_CELULAR1 As String, ByVal OT_SOL_CELULAR2 As String, ByVal OT_SOL_EMAIL1 As String, ByVal OT_SOL_EMAIL2 As String, ByVal OT_OBSERVACIONES As String, ByVal OT_ORDENCOMPRA As String, ByVal OT_FAC_ENCPAGO As String, ByVal OT_FAC_F1PAGO As String) As COBRANZA_DATOSORDENESRow
            Dim rowCOBRANZA_DATOSORDENESRow As COBRANZA_DATOSORDENESRow = CType(Me.NewRow,COBRANZA_DATOSORDENESRow)
            Dim columnValuesArray() As Object = New Object() {OT_SOL_NOMBRE, OT_SOL_FONO1, OT_SOL_FONO2, OT_SOL_CELULAR1, OT_SOL_CELULAR2, OT_SOL_EMAIL1, OT_SOL_EMAIL2, OT_OBSERVACIONES, OT_ORDENCOMPRA, OT_FAC_ENCPAGO, OT_FAC_F1PAGO}
            rowCOBRANZA_DATOSORDENESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOBRANZA_DATOSORDENESRow)
            Return rowCOBRANZA_DATOSORDENESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COBRANZA_DATOSORDENESDataTable = CType(MyBase.Clone,COBRANZA_DATOSORDENESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COBRANZA_DATOSORDENESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_SOL_NOMBRE = MyBase.Columns("OT_SOL_NOMBRE")
            Me.columnOT_SOL_FONO1 = MyBase.Columns("OT_SOL_FONO1")
            Me.columnOT_SOL_FONO2 = MyBase.Columns("OT_SOL_FONO2")
            Me.columnOT_SOL_CELULAR1 = MyBase.Columns("OT_SOL_CELULAR1")
            Me.columnOT_SOL_CELULAR2 = MyBase.Columns("OT_SOL_CELULAR2")
            Me.columnOT_SOL_EMAIL1 = MyBase.Columns("OT_SOL_EMAIL1")
            Me.columnOT_SOL_EMAIL2 = MyBase.Columns("OT_SOL_EMAIL2")
            Me.columnOT_OBSERVACIONES = MyBase.Columns("OT_OBSERVACIONES")
            Me.columnOT_ORDENCOMPRA = MyBase.Columns("OT_ORDENCOMPRA")
            Me.columnOT_FAC_ENCPAGO = MyBase.Columns("OT_FAC_ENCPAGO")
            Me.columnOT_FAC_F1PAGO = MyBase.Columns("OT_FAC_F1PAGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_SOL_NOMBRE = New Global.System.Data.DataColumn("OT_SOL_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_NOMBRE)
            Me.columnOT_SOL_FONO1 = New Global.System.Data.DataColumn("OT_SOL_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FONO1)
            Me.columnOT_SOL_FONO2 = New Global.System.Data.DataColumn("OT_SOL_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FONO2)
            Me.columnOT_SOL_CELULAR1 = New Global.System.Data.DataColumn("OT_SOL_CELULAR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_CELULAR1)
            Me.columnOT_SOL_CELULAR2 = New Global.System.Data.DataColumn("OT_SOL_CELULAR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_CELULAR2)
            Me.columnOT_SOL_EMAIL1 = New Global.System.Data.DataColumn("OT_SOL_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_EMAIL1)
            Me.columnOT_SOL_EMAIL2 = New Global.System.Data.DataColumn("OT_SOL_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_EMAIL2)
            Me.columnOT_OBSERVACIONES = New Global.System.Data.DataColumn("OT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_OBSERVACIONES)
            Me.columnOT_ORDENCOMPRA = New Global.System.Data.DataColumn("OT_ORDENCOMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ORDENCOMPRA)
            Me.columnOT_FAC_ENCPAGO = New Global.System.Data.DataColumn("OT_FAC_ENCPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_ENCPAGO)
            Me.columnOT_FAC_F1PAGO = New Global.System.Data.DataColumn("OT_FAC_F1PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_F1PAGO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOBRANZA_DATOSORDENESRow() As COBRANZA_DATOSORDENESRow
            Return CType(Me.NewRow,COBRANZA_DATOSORDENESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COBRANZA_DATOSORDENESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COBRANZA_DATOSORDENESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COBRANZA_DATOSORDENESRowChangedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENESRowChanged(Me, New COBRANZA_DATOSORDENESRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COBRANZA_DATOSORDENESRowChangingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENESRowChanging(Me, New COBRANZA_DATOSORDENESRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COBRANZA_DATOSORDENESRowDeletedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENESRowDeleted(Me, New COBRANZA_DATOSORDENESRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COBRANZA_DATOSORDENESRowDeletingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENESRowDeleting(Me, New COBRANZA_DATOSORDENESRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOBRANZA_DATOSORDENESRow(ByVal row As COBRANZA_DATOSORDENESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COBRANZA_DATOSORDENESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COBRANZA_CAMBIO_ESTADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFAC_NUMERO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_EMISION As Global.System.Data.DataColumn
        
        Private columnFAC_RSOCIAL As Global.System.Data.DataColumn
        
        Private columnFAC_RUT As Global.System.Data.DataColumn
        
        Private columnFAC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnFAC_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_CONDICION_PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_ORDEN_COMPRA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_ABONO As Global.System.Data.DataColumn
        
        Private columnFAC_SALDO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_PACTADA As Global.System.Data.DataColumn
        
        Private columnFAC_ENCPAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F1PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F2PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_ASIGNADA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_ASIGNADA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COBRANZA_CAMBIO_ESTADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_EMISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_EMISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_CONDICION_PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_CONDICION_PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ORDEN_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ORDEN_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ABONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ABONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_SALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_PACTADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_PACTADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ENCPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ENCPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F1PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F1PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F2PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F2PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ASIGNADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ASIGNADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_ASIGNADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_ASIGNADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COBRANZA_CAMBIO_ESTADORow
            Get
                Return CType(Me.Rows(index),COBRANZA_CAMBIO_ESTADORow)
            End Get
        End Property
        
        Public Event COBRANZA_CAMBIO_ESTADORowChanging As COBRANZA_CAMBIO_ESTADORowChangeEventHandler
        
        Public Event COBRANZA_CAMBIO_ESTADORowChanged As COBRANZA_CAMBIO_ESTADORowChangeEventHandler
        
        Public Event COBRANZA_CAMBIO_ESTADORowDeleting As COBRANZA_CAMBIO_ESTADORowChangeEventHandler
        
        Public Event COBRANZA_CAMBIO_ESTADORowDeleted As COBRANZA_CAMBIO_ESTADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOBRANZA_CAMBIO_ESTADORow(ByVal row As COBRANZA_CAMBIO_ESTADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOBRANZA_CAMBIO_ESTADORow( _
                    ByVal FAC_NUMERO As Integer,  _
                    ByVal FAC_FECHA_EMISION As Date,  _
                    ByVal FAC_RSOCIAL As String,  _
                    ByVal FAC_RUT As String,  _
                    ByVal FAC_EMPRESA As String,  _
                    ByVal FAC_TOTAL As Integer,  _
                    ByVal FAC_CONDICION_PAGO As String,  _
                    ByVal FAC_ORDEN_COMPRA As String,  _
                    ByVal FAC_FECHA_COBRANZA As Date,  _
                    ByVal FAC_FECHA_COBRANZA2 As Date,  _
                    ByVal FAC_NOTA_COBRANZA As String,  _
                    ByVal FAC_NOTA_COBRANZA2 As String,  _
                    ByVal FAC_ABONO As Integer,  _
                    ByVal FAC_SALDO As Integer,  _
                    ByVal FAC_FECHA_PACTADA As Date,  _
                    ByVal FAC_ENCPAGO As String,  _
                    ByVal FAC_F1PAGO As String,  _
                    ByVal FAC_F2PAGO As String,  _
                    ByVal FAC_ASIGNADA As String,  _
                    ByVal FAC_FECHA_ASIGNADA As Date) As COBRANZA_CAMBIO_ESTADORow
            Dim rowCOBRANZA_CAMBIO_ESTADORow As COBRANZA_CAMBIO_ESTADORow = CType(Me.NewRow,COBRANZA_CAMBIO_ESTADORow)
            Dim columnValuesArray() As Object = New Object() {FAC_NUMERO, FAC_FECHA_EMISION, FAC_RSOCIAL, FAC_RUT, FAC_EMPRESA, FAC_TOTAL, FAC_CONDICION_PAGO, FAC_ORDEN_COMPRA, FAC_FECHA_COBRANZA, FAC_FECHA_COBRANZA2, FAC_NOTA_COBRANZA, FAC_NOTA_COBRANZA2, FAC_ABONO, FAC_SALDO, FAC_FECHA_PACTADA, FAC_ENCPAGO, FAC_F1PAGO, FAC_F2PAGO, FAC_ASIGNADA, FAC_FECHA_ASIGNADA}
            rowCOBRANZA_CAMBIO_ESTADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOBRANZA_CAMBIO_ESTADORow)
            Return rowCOBRANZA_CAMBIO_ESTADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COBRANZA_CAMBIO_ESTADODataTable = CType(MyBase.Clone,COBRANZA_CAMBIO_ESTADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COBRANZA_CAMBIO_ESTADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFAC_NUMERO = MyBase.Columns("FAC_NUMERO")
            Me.columnFAC_FECHA_EMISION = MyBase.Columns("FAC_FECHA_EMISION")
            Me.columnFAC_RSOCIAL = MyBase.Columns("FAC_RSOCIAL")
            Me.columnFAC_RUT = MyBase.Columns("FAC_RUT")
            Me.columnFAC_EMPRESA = MyBase.Columns("FAC_EMPRESA")
            Me.columnFAC_TOTAL = MyBase.Columns("FAC_TOTAL")
            Me.columnFAC_CONDICION_PAGO = MyBase.Columns("FAC_CONDICION_PAGO")
            Me.columnFAC_ORDEN_COMPRA = MyBase.Columns("FAC_ORDEN_COMPRA")
            Me.columnFAC_FECHA_COBRANZA = MyBase.Columns("FAC_FECHA_COBRANZA")
            Me.columnFAC_FECHA_COBRANZA2 = MyBase.Columns("FAC_FECHA_COBRANZA2")
            Me.columnFAC_NOTA_COBRANZA = MyBase.Columns("FAC_NOTA_COBRANZA")
            Me.columnFAC_NOTA_COBRANZA2 = MyBase.Columns("FAC_NOTA_COBRANZA2")
            Me.columnFAC_ABONO = MyBase.Columns("FAC_ABONO")
            Me.columnFAC_SALDO = MyBase.Columns("FAC_SALDO")
            Me.columnFAC_FECHA_PACTADA = MyBase.Columns("FAC_FECHA_PACTADA")
            Me.columnFAC_ENCPAGO = MyBase.Columns("FAC_ENCPAGO")
            Me.columnFAC_F1PAGO = MyBase.Columns("FAC_F1PAGO")
            Me.columnFAC_F2PAGO = MyBase.Columns("FAC_F2PAGO")
            Me.columnFAC_ASIGNADA = MyBase.Columns("FAC_ASIGNADA")
            Me.columnFAC_FECHA_ASIGNADA = MyBase.Columns("FAC_FECHA_ASIGNADA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFAC_NUMERO = New Global.System.Data.DataColumn("FAC_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NUMERO)
            Me.columnFAC_FECHA_EMISION = New Global.System.Data.DataColumn("FAC_FECHA_EMISION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_EMISION)
            Me.columnFAC_RSOCIAL = New Global.System.Data.DataColumn("FAC_RSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RSOCIAL)
            Me.columnFAC_RUT = New Global.System.Data.DataColumn("FAC_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RUT)
            Me.columnFAC_EMPRESA = New Global.System.Data.DataColumn("FAC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_EMPRESA)
            Me.columnFAC_TOTAL = New Global.System.Data.DataColumn("FAC_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_TOTAL)
            Me.columnFAC_CONDICION_PAGO = New Global.System.Data.DataColumn("FAC_CONDICION_PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_CONDICION_PAGO)
            Me.columnFAC_ORDEN_COMPRA = New Global.System.Data.DataColumn("FAC_ORDEN_COMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ORDEN_COMPRA)
            Me.columnFAC_FECHA_COBRANZA = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA)
            Me.columnFAC_FECHA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA2)
            Me.columnFAC_NOTA_COBRANZA = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA)
            Me.columnFAC_NOTA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA2)
            Me.columnFAC_ABONO = New Global.System.Data.DataColumn("FAC_ABONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ABONO)
            Me.columnFAC_SALDO = New Global.System.Data.DataColumn("FAC_SALDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_SALDO)
            Me.columnFAC_FECHA_PACTADA = New Global.System.Data.DataColumn("FAC_FECHA_PACTADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_PACTADA)
            Me.columnFAC_ENCPAGO = New Global.System.Data.DataColumn("FAC_ENCPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ENCPAGO)
            Me.columnFAC_F1PAGO = New Global.System.Data.DataColumn("FAC_F1PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F1PAGO)
            Me.columnFAC_F2PAGO = New Global.System.Data.DataColumn("FAC_F2PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F2PAGO)
            Me.columnFAC_ASIGNADA = New Global.System.Data.DataColumn("FAC_ASIGNADA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ASIGNADA)
            Me.columnFAC_FECHA_ASIGNADA = New Global.System.Data.DataColumn("FAC_FECHA_ASIGNADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_ASIGNADA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOBRANZA_CAMBIO_ESTADORow() As COBRANZA_CAMBIO_ESTADORow
            Return CType(Me.NewRow,COBRANZA_CAMBIO_ESTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COBRANZA_CAMBIO_ESTADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COBRANZA_CAMBIO_ESTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COBRANZA_CAMBIO_ESTADORowChangedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_CAMBIO_ESTADORowChanged(Me, New COBRANZA_CAMBIO_ESTADORowChangeEvent(CType(e.Row,COBRANZA_CAMBIO_ESTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COBRANZA_CAMBIO_ESTADORowChangingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_CAMBIO_ESTADORowChanging(Me, New COBRANZA_CAMBIO_ESTADORowChangeEvent(CType(e.Row,COBRANZA_CAMBIO_ESTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COBRANZA_CAMBIO_ESTADORowDeletedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_CAMBIO_ESTADORowDeleted(Me, New COBRANZA_CAMBIO_ESTADORowChangeEvent(CType(e.Row,COBRANZA_CAMBIO_ESTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COBRANZA_CAMBIO_ESTADORowDeletingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_CAMBIO_ESTADORowDeleting(Me, New COBRANZA_CAMBIO_ESTADORowChangeEvent(CType(e.Row,COBRANZA_CAMBIO_ESTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOBRANZA_CAMBIO_ESTADORow(ByVal row As COBRANZA_CAMBIO_ESTADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COBRANZA_CAMBIO_ESTADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COBRANZA_MOROSODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFAC_NUMERO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_EMISION As Global.System.Data.DataColumn
        
        Private columnFAC_RSOCIAL As Global.System.Data.DataColumn
        
        Private columnFAC_RUT As Global.System.Data.DataColumn
        
        Private columnFAC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnFAC_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_CONDICION_PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_ORDEN_COMPRA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA As Global.System.Data.DataColumn
        
        Private columnFAC_NOTA_COBRANZA2 As Global.System.Data.DataColumn
        
        Private columnFAC_ABONO As Global.System.Data.DataColumn
        
        Private columnFAC_SALDO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_PACTADA As Global.System.Data.DataColumn
        
        Private columnFAC_ENCPAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F1PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_F2PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_MOROSO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COBRANZA_MOROSO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_EMISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_EMISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_CONDICION_PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_CONDICION_PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ORDEN_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ORDEN_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NOTA_COBRANZA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NOTA_COBRANZA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ABONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ABONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_SALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_PACTADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_PACTADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ENCPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ENCPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F1PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F1PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_F2PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_F2PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_MOROSOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_MOROSO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COBRANZA_MOROSORow
            Get
                Return CType(Me.Rows(index),COBRANZA_MOROSORow)
            End Get
        End Property
        
        Public Event COBRANZA_MOROSORowChanging As COBRANZA_MOROSORowChangeEventHandler
        
        Public Event COBRANZA_MOROSORowChanged As COBRANZA_MOROSORowChangeEventHandler
        
        Public Event COBRANZA_MOROSORowDeleting As COBRANZA_MOROSORowChangeEventHandler
        
        Public Event COBRANZA_MOROSORowDeleted As COBRANZA_MOROSORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOBRANZA_MOROSORow(ByVal row As COBRANZA_MOROSORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOBRANZA_MOROSORow( _
                    ByVal FAC_NUMERO As Integer,  _
                    ByVal FAC_FECHA_EMISION As Date,  _
                    ByVal FAC_RSOCIAL As String,  _
                    ByVal FAC_RUT As String,  _
                    ByVal FAC_EMPRESA As String,  _
                    ByVal FAC_TOTAL As Integer,  _
                    ByVal FAC_CONDICION_PAGO As String,  _
                    ByVal FAC_ORDEN_COMPRA As String,  _
                    ByVal FAC_FECHA_COBRANZA As Date,  _
                    ByVal FAC_FECHA_COBRANZA2 As Date,  _
                    ByVal FAC_NOTA_COBRANZA As String,  _
                    ByVal FAC_NOTA_COBRANZA2 As String,  _
                    ByVal FAC_ABONO As Integer,  _
                    ByVal FAC_SALDO As Integer,  _
                    ByVal FAC_FECHA_PACTADA As Date,  _
                    ByVal FAC_ENCPAGO As String,  _
                    ByVal FAC_F1PAGO As String,  _
                    ByVal FAC_F2PAGO As String,  _
                    ByVal FAC_FECHA_MOROSO As Date) As COBRANZA_MOROSORow
            Dim rowCOBRANZA_MOROSORow As COBRANZA_MOROSORow = CType(Me.NewRow,COBRANZA_MOROSORow)
            Dim columnValuesArray() As Object = New Object() {FAC_NUMERO, FAC_FECHA_EMISION, FAC_RSOCIAL, FAC_RUT, FAC_EMPRESA, FAC_TOTAL, FAC_CONDICION_PAGO, FAC_ORDEN_COMPRA, FAC_FECHA_COBRANZA, FAC_FECHA_COBRANZA2, FAC_NOTA_COBRANZA, FAC_NOTA_COBRANZA2, FAC_ABONO, FAC_SALDO, FAC_FECHA_PACTADA, FAC_ENCPAGO, FAC_F1PAGO, FAC_F2PAGO, FAC_FECHA_MOROSO}
            rowCOBRANZA_MOROSORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOBRANZA_MOROSORow)
            Return rowCOBRANZA_MOROSORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COBRANZA_MOROSODataTable = CType(MyBase.Clone,COBRANZA_MOROSODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COBRANZA_MOROSODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFAC_NUMERO = MyBase.Columns("FAC_NUMERO")
            Me.columnFAC_FECHA_EMISION = MyBase.Columns("FAC_FECHA_EMISION")
            Me.columnFAC_RSOCIAL = MyBase.Columns("FAC_RSOCIAL")
            Me.columnFAC_RUT = MyBase.Columns("FAC_RUT")
            Me.columnFAC_EMPRESA = MyBase.Columns("FAC_EMPRESA")
            Me.columnFAC_TOTAL = MyBase.Columns("FAC_TOTAL")
            Me.columnFAC_CONDICION_PAGO = MyBase.Columns("FAC_CONDICION_PAGO")
            Me.columnFAC_ORDEN_COMPRA = MyBase.Columns("FAC_ORDEN_COMPRA")
            Me.columnFAC_FECHA_COBRANZA = MyBase.Columns("FAC_FECHA_COBRANZA")
            Me.columnFAC_FECHA_COBRANZA2 = MyBase.Columns("FAC_FECHA_COBRANZA2")
            Me.columnFAC_NOTA_COBRANZA = MyBase.Columns("FAC_NOTA_COBRANZA")
            Me.columnFAC_NOTA_COBRANZA2 = MyBase.Columns("FAC_NOTA_COBRANZA2")
            Me.columnFAC_ABONO = MyBase.Columns("FAC_ABONO")
            Me.columnFAC_SALDO = MyBase.Columns("FAC_SALDO")
            Me.columnFAC_FECHA_PACTADA = MyBase.Columns("FAC_FECHA_PACTADA")
            Me.columnFAC_ENCPAGO = MyBase.Columns("FAC_ENCPAGO")
            Me.columnFAC_F1PAGO = MyBase.Columns("FAC_F1PAGO")
            Me.columnFAC_F2PAGO = MyBase.Columns("FAC_F2PAGO")
            Me.columnFAC_FECHA_MOROSO = MyBase.Columns("FAC_FECHA_MOROSO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFAC_NUMERO = New Global.System.Data.DataColumn("FAC_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NUMERO)
            Me.columnFAC_FECHA_EMISION = New Global.System.Data.DataColumn("FAC_FECHA_EMISION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_EMISION)
            Me.columnFAC_RSOCIAL = New Global.System.Data.DataColumn("FAC_RSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RSOCIAL)
            Me.columnFAC_RUT = New Global.System.Data.DataColumn("FAC_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RUT)
            Me.columnFAC_EMPRESA = New Global.System.Data.DataColumn("FAC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_EMPRESA)
            Me.columnFAC_TOTAL = New Global.System.Data.DataColumn("FAC_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_TOTAL)
            Me.columnFAC_CONDICION_PAGO = New Global.System.Data.DataColumn("FAC_CONDICION_PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_CONDICION_PAGO)
            Me.columnFAC_ORDEN_COMPRA = New Global.System.Data.DataColumn("FAC_ORDEN_COMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ORDEN_COMPRA)
            Me.columnFAC_FECHA_COBRANZA = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA)
            Me.columnFAC_FECHA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_FECHA_COBRANZA2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_COBRANZA2)
            Me.columnFAC_NOTA_COBRANZA = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA)
            Me.columnFAC_NOTA_COBRANZA2 = New Global.System.Data.DataColumn("FAC_NOTA_COBRANZA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NOTA_COBRANZA2)
            Me.columnFAC_ABONO = New Global.System.Data.DataColumn("FAC_ABONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ABONO)
            Me.columnFAC_SALDO = New Global.System.Data.DataColumn("FAC_SALDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_SALDO)
            Me.columnFAC_FECHA_PACTADA = New Global.System.Data.DataColumn("FAC_FECHA_PACTADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_PACTADA)
            Me.columnFAC_ENCPAGO = New Global.System.Data.DataColumn("FAC_ENCPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ENCPAGO)
            Me.columnFAC_F1PAGO = New Global.System.Data.DataColumn("FAC_F1PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F1PAGO)
            Me.columnFAC_F2PAGO = New Global.System.Data.DataColumn("FAC_F2PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_F2PAGO)
            Me.columnFAC_FECHA_MOROSO = New Global.System.Data.DataColumn("FAC_FECHA_MOROSO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_MOROSO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOBRANZA_MOROSORow() As COBRANZA_MOROSORow
            Return CType(Me.NewRow,COBRANZA_MOROSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COBRANZA_MOROSORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COBRANZA_MOROSORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COBRANZA_MOROSORowChangedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_MOROSORowChanged(Me, New COBRANZA_MOROSORowChangeEvent(CType(e.Row,COBRANZA_MOROSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COBRANZA_MOROSORowChangingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_MOROSORowChanging(Me, New COBRANZA_MOROSORowChangeEvent(CType(e.Row,COBRANZA_MOROSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COBRANZA_MOROSORowDeletedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_MOROSORowDeleted(Me, New COBRANZA_MOROSORowChangeEvent(CType(e.Row,COBRANZA_MOROSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COBRANZA_MOROSORowDeletingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_MOROSORowDeleting(Me, New COBRANZA_MOROSORowChangeEvent(CType(e.Row,COBRANZA_MOROSORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOBRANZA_MOROSORow(ByVal row As COBRANZA_MOROSORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COBRANZA_MOROSODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COBRANZA_DATOSORDENES_MOROSOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_SOL_NOMBRE As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FONO1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FONO2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_CELULAR1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_CELULAR2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnOT_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnOT_ORDENCOMPRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COBRANZA_DATOSORDENES_MOROSOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_CELULAR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_CELULAR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_CELULAR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_CELULAR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ORDENCOMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ORDENCOMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COBRANZA_DATOSORDENES_MOROSOSRow
            Get
                Return CType(Me.Rows(index),COBRANZA_DATOSORDENES_MOROSOSRow)
            End Get
        End Property
        
        Public Event COBRANZA_DATOSORDENES_MOROSOSRowChanging As COBRANZA_DATOSORDENES_MOROSOSRowChangeEventHandler
        
        Public Event COBRANZA_DATOSORDENES_MOROSOSRowChanged As COBRANZA_DATOSORDENES_MOROSOSRowChangeEventHandler
        
        Public Event COBRANZA_DATOSORDENES_MOROSOSRowDeleting As COBRANZA_DATOSORDENES_MOROSOSRowChangeEventHandler
        
        Public Event COBRANZA_DATOSORDENES_MOROSOSRowDeleted As COBRANZA_DATOSORDENES_MOROSOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOBRANZA_DATOSORDENES_MOROSOSRow(ByVal row As COBRANZA_DATOSORDENES_MOROSOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOBRANZA_DATOSORDENES_MOROSOSRow(ByVal OT_SOL_NOMBRE As String, ByVal OT_SOL_FONO1 As String, ByVal OT_SOL_FONO2 As String, ByVal OT_SOL_CELULAR1 As String, ByVal OT_SOL_CELULAR2 As String, ByVal OT_SOL_EMAIL1 As String, ByVal OT_SOL_EMAIL2 As String, ByVal OT_OBSERVACIONES As String, ByVal OT_ORDENCOMPRA As String) As COBRANZA_DATOSORDENES_MOROSOSRow
            Dim rowCOBRANZA_DATOSORDENES_MOROSOSRow As COBRANZA_DATOSORDENES_MOROSOSRow = CType(Me.NewRow,COBRANZA_DATOSORDENES_MOROSOSRow)
            Dim columnValuesArray() As Object = New Object() {OT_SOL_NOMBRE, OT_SOL_FONO1, OT_SOL_FONO2, OT_SOL_CELULAR1, OT_SOL_CELULAR2, OT_SOL_EMAIL1, OT_SOL_EMAIL2, OT_OBSERVACIONES, OT_ORDENCOMPRA}
            rowCOBRANZA_DATOSORDENES_MOROSOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOBRANZA_DATOSORDENES_MOROSOSRow)
            Return rowCOBRANZA_DATOSORDENES_MOROSOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COBRANZA_DATOSORDENES_MOROSOSDataTable = CType(MyBase.Clone,COBRANZA_DATOSORDENES_MOROSOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COBRANZA_DATOSORDENES_MOROSOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_SOL_NOMBRE = MyBase.Columns("OT_SOL_NOMBRE")
            Me.columnOT_SOL_FONO1 = MyBase.Columns("OT_SOL_FONO1")
            Me.columnOT_SOL_FONO2 = MyBase.Columns("OT_SOL_FONO2")
            Me.columnOT_SOL_CELULAR1 = MyBase.Columns("OT_SOL_CELULAR1")
            Me.columnOT_SOL_CELULAR2 = MyBase.Columns("OT_SOL_CELULAR2")
            Me.columnOT_SOL_EMAIL1 = MyBase.Columns("OT_SOL_EMAIL1")
            Me.columnOT_SOL_EMAIL2 = MyBase.Columns("OT_SOL_EMAIL2")
            Me.columnOT_OBSERVACIONES = MyBase.Columns("OT_OBSERVACIONES")
            Me.columnOT_ORDENCOMPRA = MyBase.Columns("OT_ORDENCOMPRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_SOL_NOMBRE = New Global.System.Data.DataColumn("OT_SOL_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_NOMBRE)
            Me.columnOT_SOL_FONO1 = New Global.System.Data.DataColumn("OT_SOL_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FONO1)
            Me.columnOT_SOL_FONO2 = New Global.System.Data.DataColumn("OT_SOL_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FONO2)
            Me.columnOT_SOL_CELULAR1 = New Global.System.Data.DataColumn("OT_SOL_CELULAR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_CELULAR1)
            Me.columnOT_SOL_CELULAR2 = New Global.System.Data.DataColumn("OT_SOL_CELULAR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_CELULAR2)
            Me.columnOT_SOL_EMAIL1 = New Global.System.Data.DataColumn("OT_SOL_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_EMAIL1)
            Me.columnOT_SOL_EMAIL2 = New Global.System.Data.DataColumn("OT_SOL_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_EMAIL2)
            Me.columnOT_OBSERVACIONES = New Global.System.Data.DataColumn("OT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_OBSERVACIONES)
            Me.columnOT_ORDENCOMPRA = New Global.System.Data.DataColumn("OT_ORDENCOMPRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ORDENCOMPRA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOBRANZA_DATOSORDENES_MOROSOSRow() As COBRANZA_DATOSORDENES_MOROSOSRow
            Return CType(Me.NewRow,COBRANZA_DATOSORDENES_MOROSOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COBRANZA_DATOSORDENES_MOROSOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COBRANZA_DATOSORDENES_MOROSOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COBRANZA_DATOSORDENES_MOROSOSRowChangedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENES_MOROSOSRowChanged(Me, New COBRANZA_DATOSORDENES_MOROSOSRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENES_MOROSOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COBRANZA_DATOSORDENES_MOROSOSRowChangingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENES_MOROSOSRowChanging(Me, New COBRANZA_DATOSORDENES_MOROSOSRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENES_MOROSOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COBRANZA_DATOSORDENES_MOROSOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENES_MOROSOSRowDeleted(Me, New COBRANZA_DATOSORDENES_MOROSOSRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENES_MOROSOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COBRANZA_DATOSORDENES_MOROSOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent COBRANZA_DATOSORDENES_MOROSOSRowDeleting(Me, New COBRANZA_DATOSORDENES_MOROSOSRowChangeEvent(CType(e.Row,COBRANZA_DATOSORDENES_MOROSOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOBRANZA_DATOSORDENES_MOROSOSRow(ByVal row As COBRANZA_DATOSORDENES_MOROSOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COBRANZA_DATOSORDENES_MOROSOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FACTURAS_NOASIGNADASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFAC_NUMERO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_EMISION As Global.System.Data.DataColumn
        
        Private columnFAC_CONDICION_PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_ABONO As Global.System.Data.DataColumn
        
        Private columnFAC_SALDO As Global.System.Data.DataColumn
        
        Private columnFAC_RSOCIAL As Global.System.Data.DataColumn
        
        Private columnFAC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_PACTADA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FACTURAS_NOASIGNADAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_EMISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_EMISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_CONDICION_PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_CONDICION_PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ABONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ABONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_SALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_PACTADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_PACTADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FACTURAS_NOASIGNADASRow
            Get
                Return CType(Me.Rows(index),FACTURAS_NOASIGNADASRow)
            End Get
        End Property
        
        Public Event FACTURAS_NOASIGNADASRowChanging As FACTURAS_NOASIGNADASRowChangeEventHandler
        
        Public Event FACTURAS_NOASIGNADASRowChanged As FACTURAS_NOASIGNADASRowChangeEventHandler
        
        Public Event FACTURAS_NOASIGNADASRowDeleting As FACTURAS_NOASIGNADASRowChangeEventHandler
        
        Public Event FACTURAS_NOASIGNADASRowDeleted As FACTURAS_NOASIGNADASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFACTURAS_NOASIGNADASRow(ByVal row As FACTURAS_NOASIGNADASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFACTURAS_NOASIGNADASRow(ByVal FAC_NUMERO As Integer, ByVal FAC_FECHA_EMISION As Date, ByVal FAC_CONDICION_PAGO As String, ByVal FAC_TOTAL As Integer, ByVal FAC_ABONO As Integer, ByVal FAC_SALDO As Integer, ByVal FAC_RSOCIAL As String, ByVal FAC_EMPRESA As String, ByVal FAC_FECHA_PACTADA As Date) As FACTURAS_NOASIGNADASRow
            Dim rowFACTURAS_NOASIGNADASRow As FACTURAS_NOASIGNADASRow = CType(Me.NewRow,FACTURAS_NOASIGNADASRow)
            Dim columnValuesArray() As Object = New Object() {FAC_NUMERO, FAC_FECHA_EMISION, FAC_CONDICION_PAGO, FAC_TOTAL, FAC_ABONO, FAC_SALDO, FAC_RSOCIAL, FAC_EMPRESA, FAC_FECHA_PACTADA}
            rowFACTURAS_NOASIGNADASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFACTURAS_NOASIGNADASRow)
            Return rowFACTURAS_NOASIGNADASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFAC_NUMERO(ByVal FAC_NUMERO As Integer) As FACTURAS_NOASIGNADASRow
            Return CType(Me.Rows.Find(New Object() {FAC_NUMERO}),FACTURAS_NOASIGNADASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FACTURAS_NOASIGNADASDataTable = CType(MyBase.Clone,FACTURAS_NOASIGNADASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FACTURAS_NOASIGNADASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFAC_NUMERO = MyBase.Columns("FAC_NUMERO")
            Me.columnFAC_FECHA_EMISION = MyBase.Columns("FAC_FECHA_EMISION")
            Me.columnFAC_CONDICION_PAGO = MyBase.Columns("FAC_CONDICION_PAGO")
            Me.columnFAC_TOTAL = MyBase.Columns("FAC_TOTAL")
            Me.columnFAC_ABONO = MyBase.Columns("FAC_ABONO")
            Me.columnFAC_SALDO = MyBase.Columns("FAC_SALDO")
            Me.columnFAC_RSOCIAL = MyBase.Columns("FAC_RSOCIAL")
            Me.columnFAC_EMPRESA = MyBase.Columns("FAC_EMPRESA")
            Me.columnFAC_FECHA_PACTADA = MyBase.Columns("FAC_FECHA_PACTADA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFAC_NUMERO = New Global.System.Data.DataColumn("FAC_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NUMERO)
            Me.columnFAC_FECHA_EMISION = New Global.System.Data.DataColumn("FAC_FECHA_EMISION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_EMISION)
            Me.columnFAC_CONDICION_PAGO = New Global.System.Data.DataColumn("FAC_CONDICION_PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_CONDICION_PAGO)
            Me.columnFAC_TOTAL = New Global.System.Data.DataColumn("FAC_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_TOTAL)
            Me.columnFAC_ABONO = New Global.System.Data.DataColumn("FAC_ABONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ABONO)
            Me.columnFAC_SALDO = New Global.System.Data.DataColumn("FAC_SALDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_SALDO)
            Me.columnFAC_RSOCIAL = New Global.System.Data.DataColumn("FAC_RSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RSOCIAL)
            Me.columnFAC_EMPRESA = New Global.System.Data.DataColumn("FAC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_EMPRESA)
            Me.columnFAC_FECHA_PACTADA = New Global.System.Data.DataColumn("FAC_FECHA_PACTADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_PACTADA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_TablasKey1", New Global.System.Data.DataColumn() {Me.columnFAC_NUMERO}, true))
            Me.columnFAC_NUMERO.AllowDBNull = false
            Me.columnFAC_NUMERO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFACTURAS_NOASIGNADASRow() As FACTURAS_NOASIGNADASRow
            Return CType(Me.NewRow,FACTURAS_NOASIGNADASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FACTURAS_NOASIGNADASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FACTURAS_NOASIGNADASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FACTURAS_NOASIGNADASRowChangedEvent) Is Nothing) Then
                RaiseEvent FACTURAS_NOASIGNADASRowChanged(Me, New FACTURAS_NOASIGNADASRowChangeEvent(CType(e.Row,FACTURAS_NOASIGNADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FACTURAS_NOASIGNADASRowChangingEvent) Is Nothing) Then
                RaiseEvent FACTURAS_NOASIGNADASRowChanging(Me, New FACTURAS_NOASIGNADASRowChangeEvent(CType(e.Row,FACTURAS_NOASIGNADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FACTURAS_NOASIGNADASRowDeletedEvent) Is Nothing) Then
                RaiseEvent FACTURAS_NOASIGNADASRowDeleted(Me, New FACTURAS_NOASIGNADASRowChangeEvent(CType(e.Row,FACTURAS_NOASIGNADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FACTURAS_NOASIGNADASRowDeletingEvent) Is Nothing) Then
                RaiseEvent FACTURAS_NOASIGNADASRowDeleting(Me, New FACTURAS_NOASIGNADASRowChangeEvent(CType(e.Row,FACTURAS_NOASIGNADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFACTURAS_NOASIGNADASRow(ByVal row As FACTURAS_NOASIGNADASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FACTURAS_NOASIGNADASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FACTURAS_PORASIGNARDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFAC_NUMERO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_EMISION As Global.System.Data.DataColumn
        
        Private columnFAC_CONDICION_PAGO As Global.System.Data.DataColumn
        
        Private columnFAC_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_ABONO As Global.System.Data.DataColumn
        
        Private columnFAC_SALDO As Global.System.Data.DataColumn
        
        Private columnFAC_RSOCIAL As Global.System.Data.DataColumn
        
        Private columnFAC_EMPRESA As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA_PACTADA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FACTURAS_PORASIGNAR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_EMISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_EMISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_CONDICION_PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_CONDICION_PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_ABONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_ABONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_SALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_RSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_RSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHA_PACTADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA_PACTADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FACTURAS_PORASIGNARRow
            Get
                Return CType(Me.Rows(index),FACTURAS_PORASIGNARRow)
            End Get
        End Property
        
        Public Event FACTURAS_PORASIGNARRowChanging As FACTURAS_PORASIGNARRowChangeEventHandler
        
        Public Event FACTURAS_PORASIGNARRowChanged As FACTURAS_PORASIGNARRowChangeEventHandler
        
        Public Event FACTURAS_PORASIGNARRowDeleting As FACTURAS_PORASIGNARRowChangeEventHandler
        
        Public Event FACTURAS_PORASIGNARRowDeleted As FACTURAS_PORASIGNARRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFACTURAS_PORASIGNARRow(ByVal row As FACTURAS_PORASIGNARRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFACTURAS_PORASIGNARRow(ByVal FAC_NUMERO As Integer, ByVal FAC_FECHA_EMISION As Date, ByVal FAC_CONDICION_PAGO As String, ByVal FAC_TOTAL As Integer, ByVal FAC_ABONO As Integer, ByVal FAC_SALDO As Integer, ByVal FAC_RSOCIAL As String, ByVal FAC_EMPRESA As String, ByVal FAC_FECHA_PACTADA As Date) As FACTURAS_PORASIGNARRow
            Dim rowFACTURAS_PORASIGNARRow As FACTURAS_PORASIGNARRow = CType(Me.NewRow,FACTURAS_PORASIGNARRow)
            Dim columnValuesArray() As Object = New Object() {FAC_NUMERO, FAC_FECHA_EMISION, FAC_CONDICION_PAGO, FAC_TOTAL, FAC_ABONO, FAC_SALDO, FAC_RSOCIAL, FAC_EMPRESA, FAC_FECHA_PACTADA}
            rowFACTURAS_PORASIGNARRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFACTURAS_PORASIGNARRow)
            Return rowFACTURAS_PORASIGNARRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFAC_NUMERO(ByVal FAC_NUMERO As Integer) As FACTURAS_PORASIGNARRow
            Return CType(Me.Rows.Find(New Object() {FAC_NUMERO}),FACTURAS_PORASIGNARRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FACTURAS_PORASIGNARDataTable = CType(MyBase.Clone,FACTURAS_PORASIGNARDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FACTURAS_PORASIGNARDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFAC_NUMERO = MyBase.Columns("FAC_NUMERO")
            Me.columnFAC_FECHA_EMISION = MyBase.Columns("FAC_FECHA_EMISION")
            Me.columnFAC_CONDICION_PAGO = MyBase.Columns("FAC_CONDICION_PAGO")
            Me.columnFAC_TOTAL = MyBase.Columns("FAC_TOTAL")
            Me.columnFAC_ABONO = MyBase.Columns("FAC_ABONO")
            Me.columnFAC_SALDO = MyBase.Columns("FAC_SALDO")
            Me.columnFAC_RSOCIAL = MyBase.Columns("FAC_RSOCIAL")
            Me.columnFAC_EMPRESA = MyBase.Columns("FAC_EMPRESA")
            Me.columnFAC_FECHA_PACTADA = MyBase.Columns("FAC_FECHA_PACTADA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFAC_NUMERO = New Global.System.Data.DataColumn("FAC_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NUMERO)
            Me.columnFAC_FECHA_EMISION = New Global.System.Data.DataColumn("FAC_FECHA_EMISION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_EMISION)
            Me.columnFAC_CONDICION_PAGO = New Global.System.Data.DataColumn("FAC_CONDICION_PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_CONDICION_PAGO)
            Me.columnFAC_TOTAL = New Global.System.Data.DataColumn("FAC_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_TOTAL)
            Me.columnFAC_ABONO = New Global.System.Data.DataColumn("FAC_ABONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_ABONO)
            Me.columnFAC_SALDO = New Global.System.Data.DataColumn("FAC_SALDO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_SALDO)
            Me.columnFAC_RSOCIAL = New Global.System.Data.DataColumn("FAC_RSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_RSOCIAL)
            Me.columnFAC_EMPRESA = New Global.System.Data.DataColumn("FAC_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_EMPRESA)
            Me.columnFAC_FECHA_PACTADA = New Global.System.Data.DataColumn("FAC_FECHA_PACTADA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA_PACTADA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_TablasKey2", New Global.System.Data.DataColumn() {Me.columnFAC_NUMERO}, true))
            Me.columnFAC_NUMERO.AllowDBNull = false
            Me.columnFAC_NUMERO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFACTURAS_PORASIGNARRow() As FACTURAS_PORASIGNARRow
            Return CType(Me.NewRow,FACTURAS_PORASIGNARRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FACTURAS_PORASIGNARRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FACTURAS_PORASIGNARRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FACTURAS_PORASIGNARRowChangedEvent) Is Nothing) Then
                RaiseEvent FACTURAS_PORASIGNARRowChanged(Me, New FACTURAS_PORASIGNARRowChangeEvent(CType(e.Row,FACTURAS_PORASIGNARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FACTURAS_PORASIGNARRowChangingEvent) Is Nothing) Then
                RaiseEvent FACTURAS_PORASIGNARRowChanging(Me, New FACTURAS_PORASIGNARRowChangeEvent(CType(e.Row,FACTURAS_PORASIGNARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FACTURAS_PORASIGNARRowDeletedEvent) Is Nothing) Then
                RaiseEvent FACTURAS_PORASIGNARRowDeleted(Me, New FACTURAS_PORASIGNARRowChangeEvent(CType(e.Row,FACTURAS_PORASIGNARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FACTURAS_PORASIGNARRowDeletingEvent) Is Nothing) Then
                RaiseEvent FACTURAS_PORASIGNARRowDeleting(Me, New FACTURAS_PORASIGNARRowChangeEvent(CType(e.Row,FACTURAS_PORASIGNARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFACTURAS_PORASIGNARRow(ByVal row As FACTURAS_PORASIGNARRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FACTURAS_PORASIGNARDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PERSONALDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PERSONAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PERSONALRow
            Get
                Return CType(Me.Rows(index),PERSONALRow)
            End Get
        End Property
        
        Public Event PERSONALRowChanging As PERSONALRowChangeEventHandler
        
        Public Event PERSONALRowChanged As PERSONALRowChangeEventHandler
        
        Public Event PERSONALRowDeleting As PERSONALRowChangeEventHandler
        
        Public Event PERSONALRowDeleted As PERSONALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPERSONALRow(ByVal NOMBRE As String) As PERSONALRow
            Dim rowPERSONALRow As PERSONALRow = CType(Me.NewRow,PERSONALRow)
            Dim columnValuesArray() As Object = New Object() {NOMBRE}
            rowPERSONALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPERSONALRow)
            Return rowPERSONALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PERSONALDataTable = CType(MyBase.Clone,PERSONALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PERSONALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPERSONALRow() As PERSONALRow
            Return CType(Me.NewRow,PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PERSONALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PERSONALRowChangedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanged(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PERSONALRowChangingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanging(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PERSONALRowDeletedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleted(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PERSONALRowDeletingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleting(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Tablas = New Cjto_Tablas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PERSONALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COBRANZARow
        Inherits Global.System.Data.DataRow
        
        Private tableCOBRANZA As COBRANZADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOBRANZA = CType(Me.Table,COBRANZADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NUMERO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_NUMEROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NUMERO' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_EMISION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_FECHA_EMISIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_EMISION' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_FECHA_EMISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_RSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RSOCIAL' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_RSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_RUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RUT' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_EMPRESA' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_TOTAL' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_CONDICION_PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_CONDICION_PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_CONDICION_PAGO' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_CONDICION_PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ORDEN_COMPRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_ORDEN_COMPRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ORDEN_COMPRA' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_ORDEN_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_FECHA_COBRANZAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_FECHA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_FECHA_COBRANZA2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA2' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_FECHA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_NOTA_COBRANZAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_NOTA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_NOTA_COBRANZA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA2' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_NOTA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ABONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_ABONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ABONO' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_ABONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_SALDO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_SALDOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_SALDO' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_PACTADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_FECHA_PACTADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_PACTADA' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_FECHA_PACTADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ENCPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_ENCPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ENCPAGO' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_ENCPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F1PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_F1PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F1PAGO' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_F1PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F2PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_F2PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F2PAGO' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_F2PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_LLAMAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_FECHA_LLAMARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_LLAMAR' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_FECHA_LLAMARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ASIGNADA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_ASIGNADAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ASIGNADA' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_ASIGNADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_ASIGNADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA.FAC_FECHA_ASIGNADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_ASIGNADA' de la tabla 'COBRANZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA.FAC_FECHA_ASIGNADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NUMERONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_NUMEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NUMERONull()
            Me(Me.tableCOBRANZA.FAC_NUMEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_EMISIONNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_FECHA_EMISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_EMISIONNull()
            Me(Me.tableCOBRANZA.FAC_FECHA_EMISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_RSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RSOCIALNull()
            Me(Me.tableCOBRANZA.FAC_RSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RUTNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_RUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RUTNull()
            Me(Me.tableCOBRANZA.FAC_RUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_EMPRESANull()
            Me(Me.tableCOBRANZA.FAC_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_TOTALNull()
            Me(Me.tableCOBRANZA.FAC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_CONDICION_PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_CONDICION_PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_CONDICION_PAGONull()
            Me(Me.tableCOBRANZA.FAC_CONDICION_PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ORDEN_COMPRANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_ORDEN_COMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ORDEN_COMPRANull()
            Me(Me.tableCOBRANZA.FAC_ORDEN_COMPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_FECHA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZANull()
            Me(Me.tableCOBRANZA.FAC_FECHA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_FECHA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZA2Null()
            Me(Me.tableCOBRANZA.FAC_FECHA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_NOTA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZANull()
            Me(Me.tableCOBRANZA.FAC_NOTA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_NOTA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZA2Null()
            Me(Me.tableCOBRANZA.FAC_NOTA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ABONONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_ABONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ABONONull()
            Me(Me.tableCOBRANZA.FAC_ABONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_SALDONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_SALDONull()
            Me(Me.tableCOBRANZA.FAC_SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_PACTADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_FECHA_PACTADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_PACTADANull()
            Me(Me.tableCOBRANZA.FAC_FECHA_PACTADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ENCPAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_ENCPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ENCPAGONull()
            Me(Me.tableCOBRANZA.FAC_ENCPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F1PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_F1PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F1PAGONull()
            Me(Me.tableCOBRANZA.FAC_F1PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F2PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_F2PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F2PAGONull()
            Me(Me.tableCOBRANZA.FAC_F2PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_LLAMARNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_FECHA_LLAMARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_LLAMARNull()
            Me(Me.tableCOBRANZA.FAC_FECHA_LLAMARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ASIGNADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_ASIGNADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ASIGNADANull()
            Me(Me.tableCOBRANZA.FAC_ASIGNADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_ASIGNADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA.FAC_FECHA_ASIGNADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_ASIGNADANull()
            Me(Me.tableCOBRANZA.FAC_FECHA_ASIGNADAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COBRANZA_FILTRORow
        Inherits Global.System.Data.DataRow
        
        Private tableCOBRANZA_FILTRO As COBRANZA_FILTRODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOBRANZA_FILTRO = CType(Me.Table,COBRANZA_FILTRODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NUMERO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_NUMEROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NUMERO' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_EMISION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_EMISIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_EMISION' de la tabla 'COBRANZA_FILTRO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_EMISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_RSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RSOCIAL' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_RSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_RUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RUT' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_EMPRESA' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_TOTAL' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_CONDICION_PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_CONDICION_PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_CONDICION_PAGO' de la tabla 'COBRANZA_FILTRO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_CONDICION_PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ORDEN_COMPRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_ORDEN_COMPRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ORDEN_COMPRA' de la tabla 'COBRANZA_FILTRO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_ORDEN_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA' de la tabla 'COBRANZA_FILTRO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZA2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA2' de la tabla 'COBRANZA_FILTRO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA' de la tabla 'COBRANZA_FILTRO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA2' de la tabla 'COBRANZA_FILTRO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ABONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_ABONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ABONO' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_ABONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_SALDO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_SALDOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_SALDO' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_PACTADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_PACTADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_PACTADA' de la tabla 'COBRANZA_FILTRO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_PACTADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ENCPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_ENCPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ENCPAGO' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_ENCPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F1PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_F1PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F1PAGO' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_F1PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F2PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_F2PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F2PAGO' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_F2PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_LLAMAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_LLAMARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_LLAMAR' de la tabla 'COBRANZA_FILTRO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_LLAMARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ASIGNADA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_ASIGNADAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ASIGNADA' de la tabla 'COBRANZA_FILTRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_ASIGNADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_ASIGNADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_ASIGNADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_ASIGNADA' de la tabla 'COBRANZA_FILTRO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_ASIGNADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NUMERONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_NUMEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NUMERONull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_NUMEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_EMISIONNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_FECHA_EMISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_EMISIONNull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_EMISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_RSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RSOCIALNull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_RSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RUTNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_RUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RUTNull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_RUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_EMPRESANull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_TOTALNull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_CONDICION_PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_CONDICION_PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_CONDICION_PAGONull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_CONDICION_PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ORDEN_COMPRANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_ORDEN_COMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ORDEN_COMPRANull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_ORDEN_COMPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZANull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZA2Null()
            Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZANull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZA2Null()
            Me(Me.tableCOBRANZA_FILTRO.FAC_NOTA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ABONONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_ABONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ABONONull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_ABONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_SALDONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_SALDONull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_PACTADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_FECHA_PACTADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_PACTADANull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_PACTADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ENCPAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_ENCPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ENCPAGONull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_ENCPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F1PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_F1PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F1PAGONull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_F1PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F2PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_F2PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F2PAGONull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_F2PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_LLAMARNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_FECHA_LLAMARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_LLAMARNull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_LLAMARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ASIGNADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_ASIGNADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ASIGNADANull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_ASIGNADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_ASIGNADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_FILTRO.FAC_FECHA_ASIGNADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_ASIGNADANull()
            Me(Me.tableCOBRANZA_FILTRO.FAC_FECHA_ASIGNADAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COBRANZA_DATOSORDENESRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOBRANZA_DATOSORDENES As COBRANZA_DATOSORDENESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOBRANZA_DATOSORDENES = CType(Me.Table,COBRANZA_DATOSORDENESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_NOMBRE' de la tabla 'COBRANZA_DATOSORDENES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FONO1' de la tabla 'COBRANZA_DATOSORDENES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FONO2' de la tabla 'COBRANZA_DATOSORDENES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_CELULAR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_CELULAR1' de la tabla 'COBRANZA_DATOSORDENES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_CELULAR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_CELULAR2' de la tabla 'COBRANZA_DATOSORDENES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_EMAIL1' de la tabla 'COBRANZA_DATOSORDENES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_EMAIL2' de la tabla 'COBRANZA_DATOSORDENES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_OBSERVACIONES' de la tabla 'COBRANZA_DATOSORDENES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ORDENCOMPRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_ORDENCOMPRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ORDENCOMPRA' de la tabla 'COBRANZA_DATOSORDENES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_ORDENCOMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_ENCPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_ENCPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_ENCPAGO' de la tabla 'COBRANZA_DATOSORDENES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_ENCPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_F1PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_F1PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_F1PAGO' de la tabla 'COBRANZA_DATOSORDENES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_F1PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_NOMBRENull()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FONO1Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FONO1Null()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FONO2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FONO2Null()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_CELULAR1Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_CELULAR1Null()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_CELULAR2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_CELULAR2Null()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_CELULAR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_EMAIL1Null()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_EMAIL2Null()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_SOL_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_OBSERVACIONESNull()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ORDENCOMPRANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_ORDENCOMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ORDENCOMPRANull()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_ORDENCOMPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_ENCPAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_ENCPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_ENCPAGONull()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_ENCPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_F1PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_F1PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_F1PAGONull()
            Me(Me.tableCOBRANZA_DATOSORDENES.OT_FAC_F1PAGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COBRANZA_CAMBIO_ESTADORow
        Inherits Global.System.Data.DataRow
        
        Private tableCOBRANZA_CAMBIO_ESTADO As COBRANZA_CAMBIO_ESTADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOBRANZA_CAMBIO_ESTADO = CType(Me.Table,COBRANZA_CAMBIO_ESTADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NUMERO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NUMEROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NUMERO' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_EMISION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_EMISIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_EMISION' de la tabla 'COBRANZA_CAMBIO_ESTADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_EMISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RSOCIAL' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RUT' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_EMPRESA' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_TOTAL' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_CONDICION_PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_CONDICION_PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_CONDICION_PAGO' de la tabla 'COBRANZA_CAMBIO_ESTADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_CONDICION_PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ORDEN_COMPRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ORDEN_COMPRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ORDEN_COMPRA' de la tabla 'COBRANZA_CAMBIO_ESTADO' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ORDEN_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA' de la tabla 'COBRANZA_CAMBIO_ESTADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZA2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA2' de la tabla 'COBRANZA_CAMBIO_ESTADO'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA' de la tabla 'COBRANZA_CAMBIO_ESTADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA2' de la tabla 'COBRANZA_CAMBIO_ESTADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ABONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ABONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ABONO' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ABONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_SALDO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_SALDOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_SALDO' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_PACTADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_PACTADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_PACTADA' de la tabla 'COBRANZA_CAMBIO_ESTADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_PACTADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ENCPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ENCPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ENCPAGO' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ENCPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F1PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F1PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F1PAGO' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F1PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F2PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F2PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F2PAGO' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F2PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ASIGNADA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ASIGNADAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ASIGNADA' de la tabla 'COBRANZA_CAMBIO_ESTADO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ASIGNADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_ASIGNADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_ASIGNADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_ASIGNADA' de la tabla 'COBRANZA_CAMBIO_ESTADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_ASIGNADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NUMERONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NUMEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NUMERONull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NUMEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_EMISIONNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_EMISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_EMISIONNull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_EMISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RSOCIALNull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RUTNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RUTNull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_RUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_EMPRESANull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_TOTALNull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_CONDICION_PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_CONDICION_PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_CONDICION_PAGONull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_CONDICION_PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ORDEN_COMPRANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ORDEN_COMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ORDEN_COMPRANull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ORDEN_COMPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZANull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZA2Null()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZANull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZA2Null()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_NOTA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ABONONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ABONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ABONONull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ABONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_SALDONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_SALDONull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_PACTADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_PACTADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_PACTADANull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_PACTADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ENCPAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ENCPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ENCPAGONull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ENCPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F1PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F1PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F1PAGONull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F1PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F2PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F2PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F2PAGONull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_F2PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ASIGNADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ASIGNADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ASIGNADANull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_ASIGNADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_ASIGNADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_ASIGNADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_ASIGNADANull()
            Me(Me.tableCOBRANZA_CAMBIO_ESTADO.FAC_FECHA_ASIGNADAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COBRANZA_MOROSORow
        Inherits Global.System.Data.DataRow
        
        Private tableCOBRANZA_MOROSO As COBRANZA_MOROSODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOBRANZA_MOROSO = CType(Me.Table,COBRANZA_MOROSODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NUMERO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_NUMEROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NUMERO' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_EMISION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_EMISIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_EMISION' de la tabla 'COBRANZA_MOROSO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_EMISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_RSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RSOCIAL' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_RSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_RUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RUT' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_EMPRESA' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_TOTAL' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_CONDICION_PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_CONDICION_PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_CONDICION_PAGO' de la tabla 'COBRANZA_MOROSO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_CONDICION_PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ORDEN_COMPRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_ORDEN_COMPRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ORDEN_COMPRA' de la tabla 'COBRANZA_MOROSO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_ORDEN_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA' de la tabla 'COBRANZA_MOROSO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_COBRANZA2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZA2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_COBRANZA2' de la tabla 'COBRANZA_MOROSO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA' de la tabla 'COBRANZA_MOROSO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NOTA_COBRANZA2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NOTA_COBRANZA2' de la tabla 'COBRANZA_MOROSO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ABONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_ABONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ABONO' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_ABONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_SALDO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_SALDOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_SALDO' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_PACTADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_PACTADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_PACTADA' de la tabla 'COBRANZA_MOROSO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_PACTADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ENCPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_ENCPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ENCPAGO' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_ENCPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F1PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_F1PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F1PAGO' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_F1PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_F2PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_F2PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_F2PAGO' de la tabla 'COBRANZA_MOROSO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_F2PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_MOROSO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_MOROSOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_MOROSO' de la tabla 'COBRANZA_MOROSO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_MOROSOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NUMERONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_NUMEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NUMERONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_NUMEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_EMISIONNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_FECHA_EMISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_EMISIONNull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_EMISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_RSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RSOCIALNull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_RSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RUTNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_RUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RUTNull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_RUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_EMPRESANull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_TOTALNull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_CONDICION_PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_CONDICION_PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_CONDICION_PAGONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_CONDICION_PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ORDEN_COMPRANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_ORDEN_COMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ORDEN_COMPRANull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_ORDEN_COMPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZANull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_COBRANZA2Null()
            Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZANull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NOTA_COBRANZA2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NOTA_COBRANZA2Null()
            Me(Me.tableCOBRANZA_MOROSO.FAC_NOTA_COBRANZA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ABONONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_ABONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ABONONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_ABONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_SALDONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_SALDONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_PACTADANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_FECHA_PACTADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_PACTADANull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_PACTADAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ENCPAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_ENCPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ENCPAGONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_ENCPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F1PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_F1PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F1PAGONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_F1PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_F2PAGONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_F2PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_F2PAGONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_F2PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_MOROSONull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_MOROSO.FAC_FECHA_MOROSOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_MOROSONull()
            Me(Me.tableCOBRANZA_MOROSO.FAC_FECHA_MOROSOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COBRANZA_DATOSORDENES_MOROSOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOBRANZA_DATOSORDENES_MOROSOS As COBRANZA_DATOSORDENES_MOROSOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOBRANZA_DATOSORDENES_MOROSOS = CType(Me.Table,COBRANZA_DATOSORDENES_MOROSOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_NOMBRE' de la tabla 'COBRANZA_DATOSORDENES_MOROSOS"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FONO1' de la tabla 'COBRANZA_DATOSORDENES_MOROSOS'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FONO2' de la tabla 'COBRANZA_DATOSORDENES_MOROSOS'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_CELULAR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_CELULAR1' de la tabla 'COBRANZA_DATOSORDENES_MOROS"& _ 
                            "OS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_CELULAR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_CELULAR2' de la tabla 'COBRANZA_DATOSORDENES_MOROS"& _ 
                            "OS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_EMAIL1' de la tabla 'COBRANZA_DATOSORDENES_MOROSOS"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_EMAIL2' de la tabla 'COBRANZA_DATOSORDENES_MOROSOS"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_OBSERVACIONES' de la tabla 'COBRANZA_DATOSORDENES_MORO"& _ 
                            "SOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ORDENCOMPRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_ORDENCOMPRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ORDENCOMPRA' de la tabla 'COBRANZA_DATOSORDENES_MOROSO"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_ORDENCOMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_NOMBRENull()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FONO1Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FONO1Null()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FONO2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FONO2Null()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_CELULAR1Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_CELULAR1Null()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_CELULAR2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_CELULAR2Null()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_CELULAR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_EMAIL1Null()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_EMAIL2Null()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_SOL_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_OBSERVACIONESNull()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ORDENCOMPRANull() As Boolean
            Return Me.IsNull(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_ORDENCOMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ORDENCOMPRANull()
            Me(Me.tableCOBRANZA_DATOSORDENES_MOROSOS.OT_ORDENCOMPRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FACTURAS_NOASIGNADASRow
        Inherits Global.System.Data.DataRow
        
        Private tableFACTURAS_NOASIGNADAS As FACTURAS_NOASIGNADASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFACTURAS_NOASIGNADAS = CType(Me.Table,FACTURAS_NOASIGNADASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_EMISION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_EMISIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_EMISION' de la tabla 'FACTURAS_NOASIGNADAS' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_EMISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_CONDICION_PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_CONDICION_PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_CONDICION_PAGO' de la tabla 'FACTURAS_NOASIGNADAS' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_CONDICION_PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_TOTAL' de la tabla 'FACTURAS_NOASIGNADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ABONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_ABONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ABONO' de la tabla 'FACTURAS_NOASIGNADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_ABONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_SALDO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_SALDOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_SALDO' de la tabla 'FACTURAS_NOASIGNADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_RSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RSOCIAL' de la tabla 'FACTURAS_NOASIGNADAS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_RSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_EMPRESA' de la tabla 'FACTURAS_NOASIGNADAS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_PACTADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_PACTADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_PACTADA' de la tabla 'FACTURAS_NOASIGNADAS' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_PACTADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_EMISIONNull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_EMISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_EMISIONNull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_EMISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_CONDICION_PAGONull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_CONDICION_PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_CONDICION_PAGONull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_CONDICION_PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_TOTALNull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ABONONull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_ABONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ABONONull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_ABONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_SALDONull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_SALDONull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_RSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RSOCIALNull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_RSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_EMPRESANull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_PACTADANull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_PACTADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_PACTADANull()
            Me(Me.tableFACTURAS_NOASIGNADAS.FAC_FECHA_PACTADAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FACTURAS_PORASIGNARRow
        Inherits Global.System.Data.DataRow
        
        Private tableFACTURAS_PORASIGNAR As FACTURAS_PORASIGNARDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFACTURAS_PORASIGNAR = CType(Me.Table,FACTURAS_PORASIGNARDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_EMISION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_EMISIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_EMISION' de la tabla 'FACTURAS_PORASIGNAR' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_EMISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_CONDICION_PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_CONDICION_PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_CONDICION_PAGO' de la tabla 'FACTURAS_PORASIGNAR' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_CONDICION_PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_TOTAL' de la tabla 'FACTURAS_PORASIGNAR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_ABONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_ABONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_ABONO' de la tabla 'FACTURAS_PORASIGNAR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_ABONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_SALDO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_SALDOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_SALDO' de la tabla 'FACTURAS_PORASIGNAR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_RSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_RSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_RSOCIAL' de la tabla 'FACTURAS_PORASIGNAR' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_RSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_EMPRESA' de la tabla 'FACTURAS_PORASIGNAR' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA_PACTADA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_PACTADAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA_PACTADA' de la tabla 'FACTURAS_PORASIGNAR' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_PACTADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_EMISIONNull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_EMISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_EMISIONNull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_EMISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_CONDICION_PAGONull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_CONDICION_PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_CONDICION_PAGONull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_CONDICION_PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_TOTALNull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_ABONONull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_ABONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_ABONONull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_ABONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_SALDONull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_SALDONull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_RSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_RSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_RSOCIALNull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_RSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_EMPRESANull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHA_PACTADANull() As Boolean
            Return Me.IsNull(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_PACTADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHA_PACTADANull()
            Me(Me.tableFACTURAS_PORASIGNAR.FAC_FECHA_PACTADAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PERSONALRow
        Inherits Global.System.Data.DataRow
        
        Private tablePERSONAL As PERSONALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePERSONAL = CType(Me.Table,PERSONALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAL.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE' de la tabla 'PERSONAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAL.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tablePERSONAL.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRENull()
            Me(Me.tablePERSONAL.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COBRANZARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COBRANZARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COBRANZARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COBRANZARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COBRANZA_FILTRORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COBRANZA_FILTRORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COBRANZA_FILTRORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COBRANZA_FILTRORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COBRANZA_DATOSORDENESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COBRANZA_DATOSORDENESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COBRANZA_DATOSORDENESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COBRANZA_DATOSORDENESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COBRANZA_CAMBIO_ESTADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COBRANZA_CAMBIO_ESTADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COBRANZA_CAMBIO_ESTADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COBRANZA_CAMBIO_ESTADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COBRANZA_MOROSORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COBRANZA_MOROSORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COBRANZA_MOROSORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COBRANZA_MOROSORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COBRANZA_DATOSORDENES_MOROSOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COBRANZA_DATOSORDENES_MOROSOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COBRANZA_DATOSORDENES_MOROSOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COBRANZA_DATOSORDENES_MOROSOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FACTURAS_NOASIGNADASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FACTURAS_NOASIGNADASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FACTURAS_NOASIGNADASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FACTURAS_NOASIGNADASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FACTURAS_PORASIGNARRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FACTURAS_PORASIGNARRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FACTURAS_PORASIGNARRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FACTURAS_PORASIGNARRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PERSONALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PERSONALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PERSONALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PERSONALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
