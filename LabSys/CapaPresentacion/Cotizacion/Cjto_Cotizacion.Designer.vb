'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5472
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Cjto_Cotizacion"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Cjto_Cotizacion
    Inherits Global.System.Data.DataSet
    
    Private tablePRODUCTOR As PRODUCTORDataTable
    
    Private tableCOTIZA_ANALISIS As COTIZA_ANALISISDataTable
    
    Private tableCOTIZA_ANALISIS1 As COTIZA_ANALISIS1DataTable
    
    Private tableCOTIZA_NOTAS As COTIZA_NOTASDataTable
    
    Private tablePRODUCTOR1 As PRODUCTOR1DataTable
    
    Private tableCOTIZACION1 As COTIZACION1DataTable
    
    Private tableCOMBO_ANALISIS As COMBO_ANALISISDataTable
    
    Private tableCOTIZA_NOTAS1 As COTIZA_NOTAS1DataTable
    
    Private tableCOTIZA_ANALISIS2 As COTIZA_ANALISIS2DataTable
    
    Private tableCOTIZA_ANALISIS11 As COTIZA_ANALISIS11DataTable
    
    Private tableCOTIZA_ANALISIS12 As COTIZA_ANALISIS12DataTable
    
    Private tableCOTIZA_ANALISIS13 As COTIZA_ANALISIS13DataTable
    
    Private tableCODIGO_ANALISIS As CODIGO_ANALISISDataTable
    
    Private tableCOTIZACION As COTIZACIONDataTable
    
    Private tableEMPRESA As EMPRESADataTable
    
    Private tablePRO_PASO As PRO_PASODataTable
    
    Private tableCOMBO_ANALISIS1 As COMBO_ANALISIS1DataTable
    
    Private tableANALISIS1 As ANALISIS1DataTable
    
    Private tableCOTIZA_DETALLE As COTIZA_DETALLEDataTable
    
    Private tableCOTIZA_DETALLE1 As COTIZA_DETALLE1DataTable
    
    Private tableANALISIS As ANALISISDataTable
    
    Private tableSUBMUESTRA As SUBMUESTRADataTable
    
    Private tableMUESTRA As MUESTRADataTable
    
    Private tableCOTIZA_ANALISIS14 As COTIZA_ANALISIS14DataTable
    
    Private tableCOTIZA_ANALISIS15 As COTIZA_ANALISIS15DataTable
    
    Private tableLISTADO_DETALLE As LISTADO_DETALLEDataTable
    
    Private tableCOTIZA_ANALISIS16 As COTIZA_ANALISIS16DataTable
    
    Private tableCOMBO_COTIZA As COMBO_COTIZADataTable
    
    Private tableCOTIZA_COMUNAS As COTIZA_COMUNASDataTable
    
    Private tableCOTIZA_COMUNAS1 As COTIZA_COMUNAS1DataTable
    
    Private tableCOTIZA_COMUNAS2 As COTIZA_COMUNAS2DataTable
    
    Private tableCOTIZA_DETALLE_ORD As COTIZA_DETALLE_ORDDataTable
    
    Private tableCOTIZA_ANALISIS17 As COTIZA_ANALISIS17DataTable
    
    Private tableNOTA_PLANILLA As NOTA_PLANILLADataTable
    
    Private tableCOTIZA_ANALISIS_BASE As COTIZA_ANALISIS_BASEDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PRODUCTOR")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTORDataTable(ds.Tables("PRODUCTOR")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISISDataTable(ds.Tables("COTIZA_ANALISIS")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS1DataTable(ds.Tables("COTIZA_ANALISIS1")))
            End If
            If (Not (ds.Tables("COTIZA_NOTAS")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_NOTASDataTable(ds.Tables("COTIZA_NOTAS")))
            End If
            If (Not (ds.Tables("PRODUCTOR1")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTOR1DataTable(ds.Tables("PRODUCTOR1")))
            End If
            If (Not (ds.Tables("COTIZACION1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZACION1DataTable(ds.Tables("COTIZACION1")))
            End If
            If (Not (ds.Tables("COMBO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_ANALISISDataTable(ds.Tables("COMBO_ANALISIS")))
            End If
            If (Not (ds.Tables("COTIZA_NOTAS1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_NOTAS1DataTable(ds.Tables("COTIZA_NOTAS1")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS2")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS2DataTable(ds.Tables("COTIZA_ANALISIS2")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS11")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS11DataTable(ds.Tables("COTIZA_ANALISIS11")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS12")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS12DataTable(ds.Tables("COTIZA_ANALISIS12")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS13")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS13DataTable(ds.Tables("COTIZA_ANALISIS13")))
            End If
            If (Not (ds.Tables("CODIGO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New CODIGO_ANALISISDataTable(ds.Tables("CODIGO_ANALISIS")))
            End If
            If (Not (ds.Tables("COTIZACION")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZACIONDataTable(ds.Tables("COTIZACION")))
            End If
            If (Not (ds.Tables("EMPRESA")) Is Nothing) Then
                MyBase.Tables.Add(New EMPRESADataTable(ds.Tables("EMPRESA")))
            End If
            If (Not (ds.Tables("PRO_PASO")) Is Nothing) Then
                MyBase.Tables.Add(New PRO_PASODataTable(ds.Tables("PRO_PASO")))
            End If
            If (Not (ds.Tables("COMBO_ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_ANALISIS1DataTable(ds.Tables("COMBO_ANALISIS1")))
            End If
            If (Not (ds.Tables("ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS1DataTable(ds.Tables("ANALISIS1")))
            End If
            If (Not (ds.Tables("COTIZA_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_DETALLEDataTable(ds.Tables("COTIZA_DETALLE")))
            End If
            If (Not (ds.Tables("COTIZA_DETALLE1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_DETALLE1DataTable(ds.Tables("COTIZA_DETALLE1")))
            End If
            If (Not (ds.Tables("ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISISDataTable(ds.Tables("ANALISIS")))
            End If
            If (Not (ds.Tables("SUBMUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New SUBMUESTRADataTable(ds.Tables("SUBMUESTRA")))
            End If
            If (Not (ds.Tables("MUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New MUESTRADataTable(ds.Tables("MUESTRA")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS14")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS14DataTable(ds.Tables("COTIZA_ANALISIS14")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS15")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS15DataTable(ds.Tables("COTIZA_ANALISIS15")))
            End If
            If (Not (ds.Tables("LISTADO_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New LISTADO_DETALLEDataTable(ds.Tables("LISTADO_DETALLE")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS16")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS16DataTable(ds.Tables("COTIZA_ANALISIS16")))
            End If
            If (Not (ds.Tables("COMBO_COTIZA")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_COTIZADataTable(ds.Tables("COMBO_COTIZA")))
            End If
            If (Not (ds.Tables("COTIZA_COMUNAS")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_COMUNASDataTable(ds.Tables("COTIZA_COMUNAS")))
            End If
            If (Not (ds.Tables("COTIZA_COMUNAS1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_COMUNAS1DataTable(ds.Tables("COTIZA_COMUNAS1")))
            End If
            If (Not (ds.Tables("COTIZA_COMUNAS2")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_COMUNAS2DataTable(ds.Tables("COTIZA_COMUNAS2")))
            End If
            If (Not (ds.Tables("COTIZA_DETALLE_ORD")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_DETALLE_ORDDataTable(ds.Tables("COTIZA_DETALLE_ORD")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS17")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS17DataTable(ds.Tables("COTIZA_ANALISIS17")))
            End If
            If (Not (ds.Tables("NOTA_PLANILLA")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_PLANILLADataTable(ds.Tables("NOTA_PLANILLA")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS_BASE")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS_BASEDataTable(ds.Tables("COTIZA_ANALISIS_BASE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODUCTOR() As PRODUCTORDataTable
        Get
            Return Me.tablePRODUCTOR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS() As COTIZA_ANALISISDataTable
        Get
            Return Me.tableCOTIZA_ANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS1() As COTIZA_ANALISIS1DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_NOTAS() As COTIZA_NOTASDataTable
        Get
            Return Me.tableCOTIZA_NOTAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODUCTOR1() As PRODUCTOR1DataTable
        Get
            Return Me.tablePRODUCTOR1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZACION1() As COTIZACION1DataTable
        Get
            Return Me.tableCOTIZACION1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMBO_ANALISIS() As COMBO_ANALISISDataTable
        Get
            Return Me.tableCOMBO_ANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_NOTAS1() As COTIZA_NOTAS1DataTable
        Get
            Return Me.tableCOTIZA_NOTAS1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS2() As COTIZA_ANALISIS2DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS11() As COTIZA_ANALISIS11DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS11
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS12() As COTIZA_ANALISIS12DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS12
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS13() As COTIZA_ANALISIS13DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS13
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CODIGO_ANALISIS() As CODIGO_ANALISISDataTable
        Get
            Return Me.tableCODIGO_ANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZACION() As COTIZACIONDataTable
        Get
            Return Me.tableCOTIZACION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EMPRESA() As EMPRESADataTable
        Get
            Return Me.tableEMPRESA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRO_PASO() As PRO_PASODataTable
        Get
            Return Me.tablePRO_PASO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMBO_ANALISIS1() As COMBO_ANALISIS1DataTable
        Get
            Return Me.tableCOMBO_ANALISIS1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS1() As ANALISIS1DataTable
        Get
            Return Me.tableANALISIS1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_DETALLE() As COTIZA_DETALLEDataTable
        Get
            Return Me.tableCOTIZA_DETALLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_DETALLE1() As COTIZA_DETALLE1DataTable
        Get
            Return Me.tableCOTIZA_DETALLE1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS() As ANALISISDataTable
        Get
            Return Me.tableANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SUBMUESTRA() As SUBMUESTRADataTable
        Get
            Return Me.tableSUBMUESTRA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MUESTRA() As MUESTRADataTable
        Get
            Return Me.tableMUESTRA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS14() As COTIZA_ANALISIS14DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS14
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS15() As COTIZA_ANALISIS15DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS15
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LISTADO_DETALLE() As LISTADO_DETALLEDataTable
        Get
            Return Me.tableLISTADO_DETALLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS16() As COTIZA_ANALISIS16DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS16
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMBO_COTIZA() As COMBO_COTIZADataTable
        Get
            Return Me.tableCOMBO_COTIZA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_COMUNAS() As COTIZA_COMUNASDataTable
        Get
            Return Me.tableCOTIZA_COMUNAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_COMUNAS1() As COTIZA_COMUNAS1DataTable
        Get
            Return Me.tableCOTIZA_COMUNAS1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_COMUNAS2() As COTIZA_COMUNAS2DataTable
        Get
            Return Me.tableCOTIZA_COMUNAS2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_DETALLE_ORD() As COTIZA_DETALLE_ORDDataTable
        Get
            Return Me.tableCOTIZA_DETALLE_ORD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS17() As COTIZA_ANALISIS17DataTable
        Get
            Return Me.tableCOTIZA_ANALISIS17
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NOTA_PLANILLA() As NOTA_PLANILLADataTable
        Get
            Return Me.tableNOTA_PLANILLA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTIZA_ANALISIS_BASE() As COTIZA_ANALISIS_BASEDataTable
        Get
            Return Me.tableCOTIZA_ANALISIS_BASE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Cjto_Cotizacion = CType(MyBase.Clone,Cjto_Cotizacion)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PRODUCTOR")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTORDataTable(ds.Tables("PRODUCTOR")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISISDataTable(ds.Tables("COTIZA_ANALISIS")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS1DataTable(ds.Tables("COTIZA_ANALISIS1")))
            End If
            If (Not (ds.Tables("COTIZA_NOTAS")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_NOTASDataTable(ds.Tables("COTIZA_NOTAS")))
            End If
            If (Not (ds.Tables("PRODUCTOR1")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTOR1DataTable(ds.Tables("PRODUCTOR1")))
            End If
            If (Not (ds.Tables("COTIZACION1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZACION1DataTable(ds.Tables("COTIZACION1")))
            End If
            If (Not (ds.Tables("COMBO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_ANALISISDataTable(ds.Tables("COMBO_ANALISIS")))
            End If
            If (Not (ds.Tables("COTIZA_NOTAS1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_NOTAS1DataTable(ds.Tables("COTIZA_NOTAS1")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS2")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS2DataTable(ds.Tables("COTIZA_ANALISIS2")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS11")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS11DataTable(ds.Tables("COTIZA_ANALISIS11")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS12")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS12DataTable(ds.Tables("COTIZA_ANALISIS12")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS13")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS13DataTable(ds.Tables("COTIZA_ANALISIS13")))
            End If
            If (Not (ds.Tables("CODIGO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New CODIGO_ANALISISDataTable(ds.Tables("CODIGO_ANALISIS")))
            End If
            If (Not (ds.Tables("COTIZACION")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZACIONDataTable(ds.Tables("COTIZACION")))
            End If
            If (Not (ds.Tables("EMPRESA")) Is Nothing) Then
                MyBase.Tables.Add(New EMPRESADataTable(ds.Tables("EMPRESA")))
            End If
            If (Not (ds.Tables("PRO_PASO")) Is Nothing) Then
                MyBase.Tables.Add(New PRO_PASODataTable(ds.Tables("PRO_PASO")))
            End If
            If (Not (ds.Tables("COMBO_ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_ANALISIS1DataTable(ds.Tables("COMBO_ANALISIS1")))
            End If
            If (Not (ds.Tables("ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS1DataTable(ds.Tables("ANALISIS1")))
            End If
            If (Not (ds.Tables("COTIZA_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_DETALLEDataTable(ds.Tables("COTIZA_DETALLE")))
            End If
            If (Not (ds.Tables("COTIZA_DETALLE1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_DETALLE1DataTable(ds.Tables("COTIZA_DETALLE1")))
            End If
            If (Not (ds.Tables("ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISISDataTable(ds.Tables("ANALISIS")))
            End If
            If (Not (ds.Tables("SUBMUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New SUBMUESTRADataTable(ds.Tables("SUBMUESTRA")))
            End If
            If (Not (ds.Tables("MUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New MUESTRADataTable(ds.Tables("MUESTRA")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS14")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS14DataTable(ds.Tables("COTIZA_ANALISIS14")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS15")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS15DataTable(ds.Tables("COTIZA_ANALISIS15")))
            End If
            If (Not (ds.Tables("LISTADO_DETALLE")) Is Nothing) Then
                MyBase.Tables.Add(New LISTADO_DETALLEDataTable(ds.Tables("LISTADO_DETALLE")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS16")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS16DataTable(ds.Tables("COTIZA_ANALISIS16")))
            End If
            If (Not (ds.Tables("COMBO_COTIZA")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_COTIZADataTable(ds.Tables("COMBO_COTIZA")))
            End If
            If (Not (ds.Tables("COTIZA_COMUNAS")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_COMUNASDataTable(ds.Tables("COTIZA_COMUNAS")))
            End If
            If (Not (ds.Tables("COTIZA_COMUNAS1")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_COMUNAS1DataTable(ds.Tables("COTIZA_COMUNAS1")))
            End If
            If (Not (ds.Tables("COTIZA_COMUNAS2")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_COMUNAS2DataTable(ds.Tables("COTIZA_COMUNAS2")))
            End If
            If (Not (ds.Tables("COTIZA_DETALLE_ORD")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_DETALLE_ORDDataTable(ds.Tables("COTIZA_DETALLE_ORD")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS17")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS17DataTable(ds.Tables("COTIZA_ANALISIS17")))
            End If
            If (Not (ds.Tables("NOTA_PLANILLA")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_PLANILLADataTable(ds.Tables("NOTA_PLANILLA")))
            End If
            If (Not (ds.Tables("COTIZA_ANALISIS_BASE")) Is Nothing) Then
                MyBase.Tables.Add(New COTIZA_ANALISIS_BASEDataTable(ds.Tables("COTIZA_ANALISIS_BASE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePRODUCTOR = CType(MyBase.Tables("PRODUCTOR"),PRODUCTORDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODUCTOR) Is Nothing) Then
                Me.tablePRODUCTOR.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS = CType(MyBase.Tables("COTIZA_ANALISIS"),COTIZA_ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS1 = CType(MyBase.Tables("COTIZA_ANALISIS1"),COTIZA_ANALISIS1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS1) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS1.InitVars
            End If
        End If
        Me.tableCOTIZA_NOTAS = CType(MyBase.Tables("COTIZA_NOTAS"),COTIZA_NOTASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_NOTAS) Is Nothing) Then
                Me.tableCOTIZA_NOTAS.InitVars
            End If
        End If
        Me.tablePRODUCTOR1 = CType(MyBase.Tables("PRODUCTOR1"),PRODUCTOR1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODUCTOR1) Is Nothing) Then
                Me.tablePRODUCTOR1.InitVars
            End If
        End If
        Me.tableCOTIZACION1 = CType(MyBase.Tables("COTIZACION1"),COTIZACION1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZACION1) Is Nothing) Then
                Me.tableCOTIZACION1.InitVars
            End If
        End If
        Me.tableCOMBO_ANALISIS = CType(MyBase.Tables("COMBO_ANALISIS"),COMBO_ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOMBO_ANALISIS) Is Nothing) Then
                Me.tableCOMBO_ANALISIS.InitVars
            End If
        End If
        Me.tableCOTIZA_NOTAS1 = CType(MyBase.Tables("COTIZA_NOTAS1"),COTIZA_NOTAS1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_NOTAS1) Is Nothing) Then
                Me.tableCOTIZA_NOTAS1.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS2 = CType(MyBase.Tables("COTIZA_ANALISIS2"),COTIZA_ANALISIS2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS2) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS2.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS11 = CType(MyBase.Tables("COTIZA_ANALISIS11"),COTIZA_ANALISIS11DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS11) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS11.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS12 = CType(MyBase.Tables("COTIZA_ANALISIS12"),COTIZA_ANALISIS12DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS12) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS12.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS13 = CType(MyBase.Tables("COTIZA_ANALISIS13"),COTIZA_ANALISIS13DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS13) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS13.InitVars
            End If
        End If
        Me.tableCODIGO_ANALISIS = CType(MyBase.Tables("CODIGO_ANALISIS"),CODIGO_ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCODIGO_ANALISIS) Is Nothing) Then
                Me.tableCODIGO_ANALISIS.InitVars
            End If
        End If
        Me.tableCOTIZACION = CType(MyBase.Tables("COTIZACION"),COTIZACIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZACION) Is Nothing) Then
                Me.tableCOTIZACION.InitVars
            End If
        End If
        Me.tableEMPRESA = CType(MyBase.Tables("EMPRESA"),EMPRESADataTable)
        If (initTable = true) Then
            If (Not (Me.tableEMPRESA) Is Nothing) Then
                Me.tableEMPRESA.InitVars
            End If
        End If
        Me.tablePRO_PASO = CType(MyBase.Tables("PRO_PASO"),PRO_PASODataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRO_PASO) Is Nothing) Then
                Me.tablePRO_PASO.InitVars
            End If
        End If
        Me.tableCOMBO_ANALISIS1 = CType(MyBase.Tables("COMBO_ANALISIS1"),COMBO_ANALISIS1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOMBO_ANALISIS1) Is Nothing) Then
                Me.tableCOMBO_ANALISIS1.InitVars
            End If
        End If
        Me.tableANALISIS1 = CType(MyBase.Tables("ANALISIS1"),ANALISIS1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS1) Is Nothing) Then
                Me.tableANALISIS1.InitVars
            End If
        End If
        Me.tableCOTIZA_DETALLE = CType(MyBase.Tables("COTIZA_DETALLE"),COTIZA_DETALLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_DETALLE) Is Nothing) Then
                Me.tableCOTIZA_DETALLE.InitVars
            End If
        End If
        Me.tableCOTIZA_DETALLE1 = CType(MyBase.Tables("COTIZA_DETALLE1"),COTIZA_DETALLE1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_DETALLE1) Is Nothing) Then
                Me.tableCOTIZA_DETALLE1.InitVars
            End If
        End If
        Me.tableANALISIS = CType(MyBase.Tables("ANALISIS"),ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS) Is Nothing) Then
                Me.tableANALISIS.InitVars
            End If
        End If
        Me.tableSUBMUESTRA = CType(MyBase.Tables("SUBMUESTRA"),SUBMUESTRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSUBMUESTRA) Is Nothing) Then
                Me.tableSUBMUESTRA.InitVars
            End If
        End If
        Me.tableMUESTRA = CType(MyBase.Tables("MUESTRA"),MUESTRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableMUESTRA) Is Nothing) Then
                Me.tableMUESTRA.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS14 = CType(MyBase.Tables("COTIZA_ANALISIS14"),COTIZA_ANALISIS14DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS14) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS14.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS15 = CType(MyBase.Tables("COTIZA_ANALISIS15"),COTIZA_ANALISIS15DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS15) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS15.InitVars
            End If
        End If
        Me.tableLISTADO_DETALLE = CType(MyBase.Tables("LISTADO_DETALLE"),LISTADO_DETALLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLISTADO_DETALLE) Is Nothing) Then
                Me.tableLISTADO_DETALLE.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS16 = CType(MyBase.Tables("COTIZA_ANALISIS16"),COTIZA_ANALISIS16DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS16) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS16.InitVars
            End If
        End If
        Me.tableCOMBO_COTIZA = CType(MyBase.Tables("COMBO_COTIZA"),COMBO_COTIZADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOMBO_COTIZA) Is Nothing) Then
                Me.tableCOMBO_COTIZA.InitVars
            End If
        End If
        Me.tableCOTIZA_COMUNAS = CType(MyBase.Tables("COTIZA_COMUNAS"),COTIZA_COMUNASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_COMUNAS) Is Nothing) Then
                Me.tableCOTIZA_COMUNAS.InitVars
            End If
        End If
        Me.tableCOTIZA_COMUNAS1 = CType(MyBase.Tables("COTIZA_COMUNAS1"),COTIZA_COMUNAS1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_COMUNAS1) Is Nothing) Then
                Me.tableCOTIZA_COMUNAS1.InitVars
            End If
        End If
        Me.tableCOTIZA_COMUNAS2 = CType(MyBase.Tables("COTIZA_COMUNAS2"),COTIZA_COMUNAS2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_COMUNAS2) Is Nothing) Then
                Me.tableCOTIZA_COMUNAS2.InitVars
            End If
        End If
        Me.tableCOTIZA_DETALLE_ORD = CType(MyBase.Tables("COTIZA_DETALLE_ORD"),COTIZA_DETALLE_ORDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_DETALLE_ORD) Is Nothing) Then
                Me.tableCOTIZA_DETALLE_ORD.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS17 = CType(MyBase.Tables("COTIZA_ANALISIS17"),COTIZA_ANALISIS17DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS17) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS17.InitVars
            End If
        End If
        Me.tableNOTA_PLANILLA = CType(MyBase.Tables("NOTA_PLANILLA"),NOTA_PLANILLADataTable)
        If (initTable = true) Then
            If (Not (Me.tableNOTA_PLANILLA) Is Nothing) Then
                Me.tableNOTA_PLANILLA.InitVars
            End If
        End If
        Me.tableCOTIZA_ANALISIS_BASE = CType(MyBase.Tables("COTIZA_ANALISIS_BASE"),COTIZA_ANALISIS_BASEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTIZA_ANALISIS_BASE) Is Nothing) Then
                Me.tableCOTIZA_ANALISIS_BASE.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Cjto_Cotizacion"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/Cjto_Cotizacion.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("es-CL")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePRODUCTOR = New PRODUCTORDataTable
        MyBase.Tables.Add(Me.tablePRODUCTOR)
        Me.tableCOTIZA_ANALISIS = New COTIZA_ANALISISDataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS)
        Me.tableCOTIZA_ANALISIS1 = New COTIZA_ANALISIS1DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS1)
        Me.tableCOTIZA_NOTAS = New COTIZA_NOTASDataTable
        MyBase.Tables.Add(Me.tableCOTIZA_NOTAS)
        Me.tablePRODUCTOR1 = New PRODUCTOR1DataTable
        MyBase.Tables.Add(Me.tablePRODUCTOR1)
        Me.tableCOTIZACION1 = New COTIZACION1DataTable
        MyBase.Tables.Add(Me.tableCOTIZACION1)
        Me.tableCOMBO_ANALISIS = New COMBO_ANALISISDataTable
        MyBase.Tables.Add(Me.tableCOMBO_ANALISIS)
        Me.tableCOTIZA_NOTAS1 = New COTIZA_NOTAS1DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_NOTAS1)
        Me.tableCOTIZA_ANALISIS2 = New COTIZA_ANALISIS2DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS2)
        Me.tableCOTIZA_ANALISIS11 = New COTIZA_ANALISIS11DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS11)
        Me.tableCOTIZA_ANALISIS12 = New COTIZA_ANALISIS12DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS12)
        Me.tableCOTIZA_ANALISIS13 = New COTIZA_ANALISIS13DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS13)
        Me.tableCODIGO_ANALISIS = New CODIGO_ANALISISDataTable
        MyBase.Tables.Add(Me.tableCODIGO_ANALISIS)
        Me.tableCOTIZACION = New COTIZACIONDataTable
        MyBase.Tables.Add(Me.tableCOTIZACION)
        Me.tableEMPRESA = New EMPRESADataTable
        MyBase.Tables.Add(Me.tableEMPRESA)
        Me.tablePRO_PASO = New PRO_PASODataTable
        MyBase.Tables.Add(Me.tablePRO_PASO)
        Me.tableCOMBO_ANALISIS1 = New COMBO_ANALISIS1DataTable
        MyBase.Tables.Add(Me.tableCOMBO_ANALISIS1)
        Me.tableANALISIS1 = New ANALISIS1DataTable
        MyBase.Tables.Add(Me.tableANALISIS1)
        Me.tableCOTIZA_DETALLE = New COTIZA_DETALLEDataTable
        MyBase.Tables.Add(Me.tableCOTIZA_DETALLE)
        Me.tableCOTIZA_DETALLE1 = New COTIZA_DETALLE1DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_DETALLE1)
        Me.tableANALISIS = New ANALISISDataTable
        MyBase.Tables.Add(Me.tableANALISIS)
        Me.tableSUBMUESTRA = New SUBMUESTRADataTable
        MyBase.Tables.Add(Me.tableSUBMUESTRA)
        Me.tableMUESTRA = New MUESTRADataTable
        MyBase.Tables.Add(Me.tableMUESTRA)
        Me.tableCOTIZA_ANALISIS14 = New COTIZA_ANALISIS14DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS14)
        Me.tableCOTIZA_ANALISIS15 = New COTIZA_ANALISIS15DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS15)
        Me.tableLISTADO_DETALLE = New LISTADO_DETALLEDataTable
        MyBase.Tables.Add(Me.tableLISTADO_DETALLE)
        Me.tableCOTIZA_ANALISIS16 = New COTIZA_ANALISIS16DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS16)
        Me.tableCOMBO_COTIZA = New COMBO_COTIZADataTable
        MyBase.Tables.Add(Me.tableCOMBO_COTIZA)
        Me.tableCOTIZA_COMUNAS = New COTIZA_COMUNASDataTable
        MyBase.Tables.Add(Me.tableCOTIZA_COMUNAS)
        Me.tableCOTIZA_COMUNAS1 = New COTIZA_COMUNAS1DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_COMUNAS1)
        Me.tableCOTIZA_COMUNAS2 = New COTIZA_COMUNAS2DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_COMUNAS2)
        Me.tableCOTIZA_DETALLE_ORD = New COTIZA_DETALLE_ORDDataTable
        MyBase.Tables.Add(Me.tableCOTIZA_DETALLE_ORD)
        Me.tableCOTIZA_ANALISIS17 = New COTIZA_ANALISIS17DataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS17)
        Me.tableNOTA_PLANILLA = New NOTA_PLANILLADataTable
        MyBase.Tables.Add(Me.tableNOTA_PLANILLA)
        Me.tableCOTIZA_ANALISIS_BASE = New COTIZA_ANALISIS_BASEDataTable
        MyBase.Tables.Add(Me.tableCOTIZA_ANALISIS_BASE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRODUCTOR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_NOTAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRODUCTOR1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZACION1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOMBO_ANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_NOTAS1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS11() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS12() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS13() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCODIGO_ANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZACION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEMPRESA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRO_PASO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOMBO_ANALISIS1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_DETALLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_DETALLE1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSUBMUESTRA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMUESTRA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS14() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS15() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLISTADO_DETALLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS16() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOMBO_COTIZA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_COMUNAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_COMUNAS1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_COMUNAS2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_DETALLE_ORD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS17() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNOTA_PLANILLA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTIZA_ANALISIS_BASE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PRODUCTORRowChangeEventHandler(ByVal sender As Object, ByVal e As PRODUCTORRowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISISRowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS1RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS1RowChangeEvent)
    
    Public Delegate Sub COTIZA_NOTASRowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_NOTASRowChangeEvent)
    
    Public Delegate Sub PRODUCTOR1RowChangeEventHandler(ByVal sender As Object, ByVal e As PRODUCTOR1RowChangeEvent)
    
    Public Delegate Sub COTIZACION1RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZACION1RowChangeEvent)
    
    Public Delegate Sub COMBO_ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As COMBO_ANALISISRowChangeEvent)
    
    Public Delegate Sub COTIZA_NOTAS1RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_NOTAS1RowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS2RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS2RowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS11RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS11RowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS12RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS12RowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS13RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS13RowChangeEvent)
    
    Public Delegate Sub CODIGO_ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As CODIGO_ANALISISRowChangeEvent)
    
    Public Delegate Sub COTIZACIONRowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZACIONRowChangeEvent)
    
    Public Delegate Sub EMPRESARowChangeEventHandler(ByVal sender As Object, ByVal e As EMPRESARowChangeEvent)
    
    Public Delegate Sub PRO_PASORowChangeEventHandler(ByVal sender As Object, ByVal e As PRO_PASORowChangeEvent)
    
    Public Delegate Sub COMBO_ANALISIS1RowChangeEventHandler(ByVal sender As Object, ByVal e As COMBO_ANALISIS1RowChangeEvent)
    
    Public Delegate Sub ANALISIS1RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS1RowChangeEvent)
    
    Public Delegate Sub COTIZA_DETALLERowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_DETALLERowChangeEvent)
    
    Public Delegate Sub COTIZA_DETALLE1RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_DETALLE1RowChangeEvent)
    
    Public Delegate Sub ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISISRowChangeEvent)
    
    Public Delegate Sub SUBMUESTRARowChangeEventHandler(ByVal sender As Object, ByVal e As SUBMUESTRARowChangeEvent)
    
    Public Delegate Sub MUESTRARowChangeEventHandler(ByVal sender As Object, ByVal e As MUESTRARowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS14RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS14RowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS15RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS15RowChangeEvent)
    
    Public Delegate Sub LISTADO_DETALLERowChangeEventHandler(ByVal sender As Object, ByVal e As LISTADO_DETALLERowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS16RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS16RowChangeEvent)
    
    Public Delegate Sub COMBO_COTIZARowChangeEventHandler(ByVal sender As Object, ByVal e As COMBO_COTIZARowChangeEvent)
    
    Public Delegate Sub COTIZA_COMUNASRowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_COMUNASRowChangeEvent)
    
    Public Delegate Sub COTIZA_COMUNAS1RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_COMUNAS1RowChangeEvent)
    
    Public Delegate Sub COTIZA_COMUNAS2RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_COMUNAS2RowChangeEvent)
    
    Public Delegate Sub COTIZA_DETALLE_ORDRowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_DETALLE_ORDRowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS17RowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS17RowChangeEvent)
    
    Public Delegate Sub NOTA_PLANILLARowChangeEventHandler(ByVal sender As Object, ByVal e As NOTA_PLANILLARowChangeEvent)
    
    Public Delegate Sub COTIZA_ANALISIS_BASERowChangeEventHandler(ByVal sender As Object, ByVal e As COTIZA_ANALISIS_BASERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODUCTORDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRO_RUT As Global.System.Data.DataColumn
        
        Private columnPRO_NOMBRE As Global.System.Data.DataColumn
        
        Private columnPRO_DIRECCION As Global.System.Data.DataColumn
        
        Private columnPRO_FONO1 As Global.System.Data.DataColumn
        
        Private columnPRO_FONO2 As Global.System.Data.DataColumn
        
        Private columnPRO_CELULAR As Global.System.Data.DataColumn
        
        Private columnPRO_FAX As Global.System.Data.DataColumn
        
        Private columnPRO_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnPRO_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnPRO_CASILLA As Global.System.Data.DataColumn
        
        Private columnPRO_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCIU_NOMBRE As Global.System.Data.DataColumn
        
        Private columnLOC_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnCOM_COMUNA As Global.System.Data.DataColumn
        
        Private columnPRO_EMPRESA As Global.System.Data.DataColumn
        
        Private columnPRO_ATENCION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODUCTOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_CELULARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CELULAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_CASILLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CASILLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIU_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIU_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOC_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOC_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COM_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOM_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_ATENCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_ATENCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODUCTORRow
            Get
                Return CType(Me.Rows(index),PRODUCTORRow)
            End Get
        End Property
        
        Public Event PRODUCTORRowChanging As PRODUCTORRowChangeEventHandler
        
        Public Event PRODUCTORRowChanged As PRODUCTORRowChangeEventHandler
        
        Public Event PRODUCTORRowDeleting As PRODUCTORRowChangeEventHandler
        
        Public Event PRODUCTORRowDeleted As PRODUCTORRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRODUCTORRow(ByVal row As PRODUCTORRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRODUCTORRow( _
                    ByVal PRO_RUT As String,  _
                    ByVal PRO_NOMBRE As String,  _
                    ByVal PRO_DIRECCION As String,  _
                    ByVal PRO_FONO1 As String,  _
                    ByVal PRO_FONO2 As String,  _
                    ByVal PRO_CELULAR As String,  _
                    ByVal PRO_FAX As String,  _
                    ByVal PRO_EMAIL1 As String,  _
                    ByVal PRO_EMAIL2 As String,  _
                    ByVal PRO_CASILLA As String,  _
                    ByVal PRO_DESCUENTO As Double,  _
                    ByVal CIU_NOMBRE As String,  _
                    ByVal LOC_LOCALIDAD As String,  _
                    ByVal COM_COMUNA As String,  _
                    ByVal PRO_EMPRESA As String,  _
                    ByVal PRO_ATENCION As String) As PRODUCTORRow
            Dim rowPRODUCTORRow As PRODUCTORRow = CType(Me.NewRow,PRODUCTORRow)
            Dim columnValuesArray() As Object = New Object() {PRO_RUT, PRO_NOMBRE, PRO_DIRECCION, PRO_FONO1, PRO_FONO2, PRO_CELULAR, PRO_FAX, PRO_EMAIL1, PRO_EMAIL2, PRO_CASILLA, PRO_DESCUENTO, CIU_NOMBRE, LOC_LOCALIDAD, COM_COMUNA, PRO_EMPRESA, PRO_ATENCION}
            rowPRODUCTORRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODUCTORRow)
            Return rowPRODUCTORRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRO_RUTPRO_NOMBRE(ByVal PRO_RUT As String, ByVal PRO_NOMBRE As String) As PRODUCTORRow
            Return CType(Me.Rows.Find(New Object() {PRO_RUT, PRO_NOMBRE}),PRODUCTORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODUCTORDataTable = CType(MyBase.Clone,PRODUCTORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODUCTORDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRO_RUT = MyBase.Columns("PRO_RUT")
            Me.columnPRO_NOMBRE = MyBase.Columns("PRO_NOMBRE")
            Me.columnPRO_DIRECCION = MyBase.Columns("PRO_DIRECCION")
            Me.columnPRO_FONO1 = MyBase.Columns("PRO_FONO1")
            Me.columnPRO_FONO2 = MyBase.Columns("PRO_FONO2")
            Me.columnPRO_CELULAR = MyBase.Columns("PRO_CELULAR")
            Me.columnPRO_FAX = MyBase.Columns("PRO_FAX")
            Me.columnPRO_EMAIL1 = MyBase.Columns("PRO_EMAIL1")
            Me.columnPRO_EMAIL2 = MyBase.Columns("PRO_EMAIL2")
            Me.columnPRO_CASILLA = MyBase.Columns("PRO_CASILLA")
            Me.columnPRO_DESCUENTO = MyBase.Columns("PRO_DESCUENTO")
            Me.columnCIU_NOMBRE = MyBase.Columns("CIU_NOMBRE")
            Me.columnLOC_LOCALIDAD = MyBase.Columns("LOC_LOCALIDAD")
            Me.columnCOM_COMUNA = MyBase.Columns("COM_COMUNA")
            Me.columnPRO_EMPRESA = MyBase.Columns("PRO_EMPRESA")
            Me.columnPRO_ATENCION = MyBase.Columns("PRO_ATENCION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRO_RUT = New Global.System.Data.DataColumn("PRO_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_RUT)
            Me.columnPRO_NOMBRE = New Global.System.Data.DataColumn("PRO_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_NOMBRE)
            Me.columnPRO_DIRECCION = New Global.System.Data.DataColumn("PRO_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_DIRECCION)
            Me.columnPRO_FONO1 = New Global.System.Data.DataColumn("PRO_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FONO1)
            Me.columnPRO_FONO2 = New Global.System.Data.DataColumn("PRO_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FONO2)
            Me.columnPRO_CELULAR = New Global.System.Data.DataColumn("PRO_CELULAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CELULAR)
            Me.columnPRO_FAX = New Global.System.Data.DataColumn("PRO_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FAX)
            Me.columnPRO_EMAIL1 = New Global.System.Data.DataColumn("PRO_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMAIL1)
            Me.columnPRO_EMAIL2 = New Global.System.Data.DataColumn("PRO_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMAIL2)
            Me.columnPRO_CASILLA = New Global.System.Data.DataColumn("PRO_CASILLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CASILLA)
            Me.columnPRO_DESCUENTO = New Global.System.Data.DataColumn("PRO_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_DESCUENTO)
            Me.columnCIU_NOMBRE = New Global.System.Data.DataColumn("CIU_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIU_NOMBRE)
            Me.columnLOC_LOCALIDAD = New Global.System.Data.DataColumn("LOC_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOC_LOCALIDAD)
            Me.columnCOM_COMUNA = New Global.System.Data.DataColumn("COM_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOM_COMUNA)
            Me.columnPRO_EMPRESA = New Global.System.Data.DataColumn("PRO_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMPRESA)
            Me.columnPRO_ATENCION = New Global.System.Data.DataColumn("PRO_ATENCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_ATENCION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey2", New Global.System.Data.DataColumn() {Me.columnPRO_RUT, Me.columnPRO_NOMBRE}, true))
            Me.columnPRO_RUT.AllowDBNull = false
            Me.columnPRO_NOMBRE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRODUCTORRow() As PRODUCTORRow
            Return CType(Me.NewRow,PRODUCTORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODUCTORRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODUCTORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODUCTORRowChangedEvent) Is Nothing) Then
                RaiseEvent PRODUCTORRowChanged(Me, New PRODUCTORRowChangeEvent(CType(e.Row,PRODUCTORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODUCTORRowChangingEvent) Is Nothing) Then
                RaiseEvent PRODUCTORRowChanging(Me, New PRODUCTORRowChangeEvent(CType(e.Row,PRODUCTORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODUCTORRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODUCTORRowDeleted(Me, New PRODUCTORRowChangeEvent(CType(e.Row,PRODUCTORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODUCTORRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODUCTORRowDeleting(Me, New PRODUCTORRowChangeEvent(CType(e.Row,PRODUCTORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRODUCTORRow(ByVal row As PRODUCTORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODUCTORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCTD_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTA_UNITARIO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISISRow
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISISRow)
            End Get
        End Property
        
        Public Event COTIZA_ANALISISRowChanging As COTIZA_ANALISISRowChangeEventHandler
        
        Public Event COTIZA_ANALISISRowChanged As COTIZA_ANALISISRowChangeEventHandler
        
        Public Event COTIZA_ANALISISRowDeleting As COTIZA_ANALISISRowChangeEventHandler
        
        Public Event COTIZA_ANALISISRowDeleted As COTIZA_ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISISRow(ByVal row As COTIZA_ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISISRow(ByVal COT_NUMERO As Double, ByVal CTD_ANALISIS As Double, ByVal CTA_UNITARIO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer) As COTIZA_ANALISISRow
            Dim rowCOTIZA_ANALISISRow As COTIZA_ANALISISRow = CType(Me.NewRow,COTIZA_ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, CTD_ANALISIS, CTA_UNITARIO, CTA_DESCUENTO, CTA_NETO}
            rowCOTIZA_ANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISISRow)
            Return rowCOTIZA_ANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOT_NUMEROCTD_ANALISIS(ByVal COT_NUMERO As Double, ByVal CTD_ANALISIS As Double) As COTIZA_ANALISISRow
            Return CType(Me.Rows.Find(New Object() {COT_NUMERO, CTD_ANALISIS}),COTIZA_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISISDataTable = CType(MyBase.Clone,COTIZA_ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCTD_ANALISIS = MyBase.Columns("CTD_ANALISIS")
            Me.columnCTA_UNITARIO = MyBase.Columns("CTA_UNITARIO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCTD_ANALISIS = New Global.System.Data.DataColumn("CTD_ANALISIS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_ANALISIS)
            Me.columnCTA_UNITARIO = New Global.System.Data.DataColumn("CTA_UNITARIO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_UNITARIO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey5", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO, Me.columnCTD_ANALISIS}, true))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCTD_ANALISIS.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISISRow() As COTIZA_ANALISISRow
            Return CType(Me.NewRow,COTIZA_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISISRowChanged(Me, New COTIZA_ANALISISRowChangeEvent(CType(e.Row,COTIZA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISISRowChanging(Me, New COTIZA_ANALISISRowChangeEvent(CType(e.Row,COTIZA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISISRowDeleted(Me, New COTIZA_ANALISISRowChangeEvent(CType(e.Row,COTIZA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISISRowDeleting(Me, New COTIZA_ANALISISRowChangeEvent(CType(e.Row,COTIZA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISISRow(ByVal row As COTIZA_ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS1Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS1Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS1RowChanging As COTIZA_ANALISIS1RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS1RowChanged As COTIZA_ANALISIS1RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS1RowDeleting As COTIZA_ANALISIS1RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS1RowDeleted As COTIZA_ANALISIS1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS1Row(ByVal row As COTIZA_ANALISIS1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS1Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS1Row
            Dim rowCOTIZA_ANALISIS1Row As COTIZA_ANALISIS1Row = CType(Me.NewRow,COTIZA_ANALISIS1Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS1Row)
            Return rowCOTIZA_ANALISIS1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS1Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS1DataTable = CType(MyBase.Clone,COTIZA_ANALISIS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey3", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS1Row() As COTIZA_ANALISIS1Row
            Return CType(Me.NewRow,COTIZA_ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS1RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS1RowChanged(Me, New COTIZA_ANALISIS1RowChangeEvent(CType(e.Row,COTIZA_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS1RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS1RowChanging(Me, New COTIZA_ANALISIS1RowChangeEvent(CType(e.Row,COTIZA_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS1RowDeleted(Me, New COTIZA_ANALISIS1RowChangeEvent(CType(e.Row,COTIZA_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS1RowDeleting(Me, New COTIZA_ANALISIS1RowChangeEvent(CType(e.Row,COTIZA_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS1Row(ByVal row As COTIZA_ANALISIS1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_NOTASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCON_NUMERO As Global.System.Data.DataColumn
        
        Private columnNOT_NOTAS As Global.System.Data.DataColumn
        
        Private columnNOTA_COT_TIPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_NOTAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CON_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCON_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOT_NOTASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOT_NOTAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTA_COT_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTA_COT_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_NOTASRow
            Get
                Return CType(Me.Rows(index),COTIZA_NOTASRow)
            End Get
        End Property
        
        Public Event COTIZA_NOTASRowChanging As COTIZA_NOTASRowChangeEventHandler
        
        Public Event COTIZA_NOTASRowChanged As COTIZA_NOTASRowChangeEventHandler
        
        Public Event COTIZA_NOTASRowDeleting As COTIZA_NOTASRowChangeEventHandler
        
        Public Event COTIZA_NOTASRowDeleted As COTIZA_NOTASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_NOTASRow(ByVal row As COTIZA_NOTASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_NOTASRow(ByVal COT_NUMERO As Double, ByVal CON_NUMERO As Integer, ByVal NOT_NOTAS As String, ByVal NOTA_COT_TIPO As String) As COTIZA_NOTASRow
            Dim rowCOTIZA_NOTASRow As COTIZA_NOTASRow = CType(Me.NewRow,COTIZA_NOTASRow)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, CON_NUMERO, NOT_NOTAS, NOTA_COT_TIPO}
            rowCOTIZA_NOTASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_NOTASRow)
            Return rowCOTIZA_NOTASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOT_NUMEROCON_NUMERO(ByVal COT_NUMERO As Double, ByVal CON_NUMERO As Integer) As COTIZA_NOTASRow
            Return CType(Me.Rows.Find(New Object() {COT_NUMERO, CON_NUMERO}),COTIZA_NOTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_NOTASDataTable = CType(MyBase.Clone,COTIZA_NOTASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_NOTASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCON_NUMERO = MyBase.Columns("CON_NUMERO")
            Me.columnNOT_NOTAS = MyBase.Columns("NOT_NOTAS")
            Me.columnNOTA_COT_TIPO = MyBase.Columns("NOTA_COT_TIPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCON_NUMERO = New Global.System.Data.DataColumn("CON_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCON_NUMERO)
            Me.columnNOT_NOTAS = New Global.System.Data.DataColumn("NOT_NOTAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOT_NOTAS)
            Me.columnNOTA_COT_TIPO = New Global.System.Data.DataColumn("NOTA_COT_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTA_COT_TIPO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey4", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO, Me.columnCON_NUMERO}, true))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCON_NUMERO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_NOTASRow() As COTIZA_NOTASRow
            Return CType(Me.NewRow,COTIZA_NOTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_NOTASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_NOTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_NOTASRowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTASRowChanged(Me, New COTIZA_NOTASRowChangeEvent(CType(e.Row,COTIZA_NOTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_NOTASRowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTASRowChanging(Me, New COTIZA_NOTASRowChangeEvent(CType(e.Row,COTIZA_NOTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_NOTASRowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTASRowDeleted(Me, New COTIZA_NOTASRowChangeEvent(CType(e.Row,COTIZA_NOTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_NOTASRowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTASRowDeleting(Me, New COTIZA_NOTASRowChangeEvent(CType(e.Row,COTIZA_NOTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_NOTASRow(ByVal row As COTIZA_NOTASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_NOTASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODUCTOR1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRO_RUT As Global.System.Data.DataColumn
        
        Private columnPRO_NOMBRE As Global.System.Data.DataColumn
        
        Private columnPRO_DIRECCION As Global.System.Data.DataColumn
        
        Private columnPRO_FONO1 As Global.System.Data.DataColumn
        
        Private columnPRO_FONO2 As Global.System.Data.DataColumn
        
        Private columnPRO_CELULAR As Global.System.Data.DataColumn
        
        Private columnPRO_FAX As Global.System.Data.DataColumn
        
        Private columnPRO_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnPRO_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnPRO_CASILLA As Global.System.Data.DataColumn
        
        Private columnPRO_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCIU_NOMBRE As Global.System.Data.DataColumn
        
        Private columnLOC_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnCOM_COMUNA As Global.System.Data.DataColumn
        
        Private columnPRO_ATENCION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODUCTOR1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_CELULARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CELULAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_CASILLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CASILLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIU_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIU_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOC_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOC_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COM_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOM_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_ATENCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_ATENCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODUCTOR1Row
            Get
                Return CType(Me.Rows(index),PRODUCTOR1Row)
            End Get
        End Property
        
        Public Event PRODUCTOR1RowChanging As PRODUCTOR1RowChangeEventHandler
        
        Public Event PRODUCTOR1RowChanged As PRODUCTOR1RowChangeEventHandler
        
        Public Event PRODUCTOR1RowDeleting As PRODUCTOR1RowChangeEventHandler
        
        Public Event PRODUCTOR1RowDeleted As PRODUCTOR1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRODUCTOR1Row(ByVal row As PRODUCTOR1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRODUCTOR1Row(ByVal PRO_RUT As String, ByVal PRO_NOMBRE As String, ByVal PRO_DIRECCION As String, ByVal PRO_FONO1 As String, ByVal PRO_FONO2 As String, ByVal PRO_CELULAR As String, ByVal PRO_FAX As String, ByVal PRO_EMAIL1 As String, ByVal PRO_EMAIL2 As String, ByVal PRO_CASILLA As String, ByVal PRO_DESCUENTO As Double, ByVal CIU_NOMBRE As String, ByVal LOC_LOCALIDAD As String, ByVal COM_COMUNA As String, ByVal PRO_ATENCION As String) As PRODUCTOR1Row
            Dim rowPRODUCTOR1Row As PRODUCTOR1Row = CType(Me.NewRow,PRODUCTOR1Row)
            Dim columnValuesArray() As Object = New Object() {PRO_RUT, PRO_NOMBRE, PRO_DIRECCION, PRO_FONO1, PRO_FONO2, PRO_CELULAR, PRO_FAX, PRO_EMAIL1, PRO_EMAIL2, PRO_CASILLA, PRO_DESCUENTO, CIU_NOMBRE, LOC_LOCALIDAD, COM_COMUNA, PRO_ATENCION}
            rowPRODUCTOR1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODUCTOR1Row)
            Return rowPRODUCTOR1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRO_RUTPRO_NOMBRE(ByVal PRO_RUT As String, ByVal PRO_NOMBRE As String) As PRODUCTOR1Row
            Return CType(Me.Rows.Find(New Object() {PRO_RUT, PRO_NOMBRE}),PRODUCTOR1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODUCTOR1DataTable = CType(MyBase.Clone,PRODUCTOR1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODUCTOR1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRO_RUT = MyBase.Columns("PRO_RUT")
            Me.columnPRO_NOMBRE = MyBase.Columns("PRO_NOMBRE")
            Me.columnPRO_DIRECCION = MyBase.Columns("PRO_DIRECCION")
            Me.columnPRO_FONO1 = MyBase.Columns("PRO_FONO1")
            Me.columnPRO_FONO2 = MyBase.Columns("PRO_FONO2")
            Me.columnPRO_CELULAR = MyBase.Columns("PRO_CELULAR")
            Me.columnPRO_FAX = MyBase.Columns("PRO_FAX")
            Me.columnPRO_EMAIL1 = MyBase.Columns("PRO_EMAIL1")
            Me.columnPRO_EMAIL2 = MyBase.Columns("PRO_EMAIL2")
            Me.columnPRO_CASILLA = MyBase.Columns("PRO_CASILLA")
            Me.columnPRO_DESCUENTO = MyBase.Columns("PRO_DESCUENTO")
            Me.columnCIU_NOMBRE = MyBase.Columns("CIU_NOMBRE")
            Me.columnLOC_LOCALIDAD = MyBase.Columns("LOC_LOCALIDAD")
            Me.columnCOM_COMUNA = MyBase.Columns("COM_COMUNA")
            Me.columnPRO_ATENCION = MyBase.Columns("PRO_ATENCION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRO_RUT = New Global.System.Data.DataColumn("PRO_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_RUT)
            Me.columnPRO_NOMBRE = New Global.System.Data.DataColumn("PRO_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_NOMBRE)
            Me.columnPRO_DIRECCION = New Global.System.Data.DataColumn("PRO_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_DIRECCION)
            Me.columnPRO_FONO1 = New Global.System.Data.DataColumn("PRO_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FONO1)
            Me.columnPRO_FONO2 = New Global.System.Data.DataColumn("PRO_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FONO2)
            Me.columnPRO_CELULAR = New Global.System.Data.DataColumn("PRO_CELULAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CELULAR)
            Me.columnPRO_FAX = New Global.System.Data.DataColumn("PRO_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FAX)
            Me.columnPRO_EMAIL1 = New Global.System.Data.DataColumn("PRO_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMAIL1)
            Me.columnPRO_EMAIL2 = New Global.System.Data.DataColumn("PRO_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMAIL2)
            Me.columnPRO_CASILLA = New Global.System.Data.DataColumn("PRO_CASILLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CASILLA)
            Me.columnPRO_DESCUENTO = New Global.System.Data.DataColumn("PRO_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_DESCUENTO)
            Me.columnCIU_NOMBRE = New Global.System.Data.DataColumn("CIU_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIU_NOMBRE)
            Me.columnLOC_LOCALIDAD = New Global.System.Data.DataColumn("LOC_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOC_LOCALIDAD)
            Me.columnCOM_COMUNA = New Global.System.Data.DataColumn("COM_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOM_COMUNA)
            Me.columnPRO_ATENCION = New Global.System.Data.DataColumn("PRO_ATENCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_ATENCION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey6", New Global.System.Data.DataColumn() {Me.columnPRO_RUT, Me.columnPRO_NOMBRE}, true))
            Me.columnPRO_RUT.AllowDBNull = false
            Me.columnPRO_NOMBRE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRODUCTOR1Row() As PRODUCTOR1Row
            Return CType(Me.NewRow,PRODUCTOR1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODUCTOR1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODUCTOR1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODUCTOR1RowChangedEvent) Is Nothing) Then
                RaiseEvent PRODUCTOR1RowChanged(Me, New PRODUCTOR1RowChangeEvent(CType(e.Row,PRODUCTOR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODUCTOR1RowChangingEvent) Is Nothing) Then
                RaiseEvent PRODUCTOR1RowChanging(Me, New PRODUCTOR1RowChangeEvent(CType(e.Row,PRODUCTOR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODUCTOR1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODUCTOR1RowDeleted(Me, New PRODUCTOR1RowChangeEvent(CType(e.Row,PRODUCTOR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODUCTOR1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODUCTOR1RowDeleting(Me, New PRODUCTOR1RowChangeEvent(CType(e.Row,PRODUCTOR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRODUCTOR1Row(ByVal row As PRODUCTOR1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODUCTOR1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZACION1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCOT_RUT As Global.System.Data.DataColumn
        
        Private columnCOT_NOMBRE As Global.System.Data.DataColumn
        
        Private columnCOT_EMAIL As Global.System.Data.DataColumn
        
        Private columnCOT_ATENCION As Global.System.Data.DataColumn
        
        Private columnCOT_DIRECCION As Global.System.Data.DataColumn
        
        Private columnCOT_COMUNA As Global.System.Data.DataColumn
        
        Private columnCOT_FONO As Global.System.Data.DataColumn
        
        Private columnCOT_FAX As Global.System.Data.DataColumn
        
        Private columnCOT_SUBTOTAL As Global.System.Data.DataColumn
        
        Private columnCOT_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCOT_NETO As Global.System.Data.DataColumn
        
        Private columnCOT_IVA As Global.System.Data.DataColumn
        
        Private columnCOT_TOTAL As Global.System.Data.DataColumn
        
        Private columnCOT_FECHA As Global.System.Data.DataColumn
        
        Private columnCOT_CELULAR As Global.System.Data.DataColumn
        
        Private columnCOT_CIUDAD As Global.System.Data.DataColumn
        
        Private columnCOT_EMPRESA As Global.System.Data.DataColumn
        
        Private columnCOT_MUE1 As Global.System.Data.DataColumn
        
        Private columnCOT_MUE2 As Global.System.Data.DataColumn
        
        Private columnCOT_MUE3 As Global.System.Data.DataColumn
        
        Private columnCOT_MUE4 As Global.System.Data.DataColumn
        
        Private columnCOT_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnCOT_CARGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZACION1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_EMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_ATENCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_ATENCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_FONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_FONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_SUBTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_SUBTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_IVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_CELULARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_CELULAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_CARGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_CARGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZACION1Row
            Get
                Return CType(Me.Rows(index),COTIZACION1Row)
            End Get
        End Property
        
        Public Event COTIZACION1RowChanging As COTIZACION1RowChangeEventHandler
        
        Public Event COTIZACION1RowChanged As COTIZACION1RowChangeEventHandler
        
        Public Event COTIZACION1RowDeleting As COTIZACION1RowChangeEventHandler
        
        Public Event COTIZACION1RowDeleted As COTIZACION1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZACION1Row(ByVal row As COTIZACION1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZACION1Row( _
                    ByVal COT_NUMERO As Double,  _
                    ByVal COT_RUT As String,  _
                    ByVal COT_NOMBRE As String,  _
                    ByVal COT_EMAIL As String,  _
                    ByVal COT_ATENCION As String,  _
                    ByVal COT_DIRECCION As String,  _
                    ByVal COT_COMUNA As String,  _
                    ByVal COT_FONO As String,  _
                    ByVal COT_FAX As String,  _
                    ByVal COT_SUBTOTAL As Integer,  _
                    ByVal COT_DESCUENTO As Double,  _
                    ByVal COT_NETO As Integer,  _
                    ByVal COT_IVA As Integer,  _
                    ByVal COT_TOTAL As Integer,  _
                    ByVal COT_FECHA As Date,  _
                    ByVal COT_CELULAR As String,  _
                    ByVal COT_CIUDAD As String,  _
                    ByVal COT_EMPRESA As String,  _
                    ByVal COT_MUE1 As String,  _
                    ByVal COT_MUE2 As String,  _
                    ByVal COT_MUE3 As String,  _
                    ByVal COT_MUE4 As String,  _
                    ByVal COT_EMAIL2 As String,  _
                    ByVal COT_CARGO As String) As COTIZACION1Row
            Dim rowCOTIZACION1Row As COTIZACION1Row = CType(Me.NewRow,COTIZACION1Row)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, COT_RUT, COT_NOMBRE, COT_EMAIL, COT_ATENCION, COT_DIRECCION, COT_COMUNA, COT_FONO, COT_FAX, COT_SUBTOTAL, COT_DESCUENTO, COT_NETO, COT_IVA, COT_TOTAL, COT_FECHA, COT_CELULAR, COT_CIUDAD, COT_EMPRESA, COT_MUE1, COT_MUE2, COT_MUE3, COT_MUE4, COT_EMAIL2, COT_CARGO}
            rowCOTIZACION1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZACION1Row)
            Return rowCOTIZACION1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOT_NUMERO(ByVal COT_NUMERO As Double) As COTIZACION1Row
            Return CType(Me.Rows.Find(New Object() {COT_NUMERO}),COTIZACION1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZACION1DataTable = CType(MyBase.Clone,COTIZACION1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZACION1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCOT_RUT = MyBase.Columns("COT_RUT")
            Me.columnCOT_NOMBRE = MyBase.Columns("COT_NOMBRE")
            Me.columnCOT_EMAIL = MyBase.Columns("COT_EMAIL")
            Me.columnCOT_ATENCION = MyBase.Columns("COT_ATENCION")
            Me.columnCOT_DIRECCION = MyBase.Columns("COT_DIRECCION")
            Me.columnCOT_COMUNA = MyBase.Columns("COT_COMUNA")
            Me.columnCOT_FONO = MyBase.Columns("COT_FONO")
            Me.columnCOT_FAX = MyBase.Columns("COT_FAX")
            Me.columnCOT_SUBTOTAL = MyBase.Columns("COT_SUBTOTAL")
            Me.columnCOT_DESCUENTO = MyBase.Columns("COT_DESCUENTO")
            Me.columnCOT_NETO = MyBase.Columns("COT_NETO")
            Me.columnCOT_IVA = MyBase.Columns("COT_IVA")
            Me.columnCOT_TOTAL = MyBase.Columns("COT_TOTAL")
            Me.columnCOT_FECHA = MyBase.Columns("COT_FECHA")
            Me.columnCOT_CELULAR = MyBase.Columns("COT_CELULAR")
            Me.columnCOT_CIUDAD = MyBase.Columns("COT_CIUDAD")
            Me.columnCOT_EMPRESA = MyBase.Columns("COT_EMPRESA")
            Me.columnCOT_MUE1 = MyBase.Columns("COT_MUE1")
            Me.columnCOT_MUE2 = MyBase.Columns("COT_MUE2")
            Me.columnCOT_MUE3 = MyBase.Columns("COT_MUE3")
            Me.columnCOT_MUE4 = MyBase.Columns("COT_MUE4")
            Me.columnCOT_EMAIL2 = MyBase.Columns("COT_EMAIL2")
            Me.columnCOT_CARGO = MyBase.Columns("COT_CARGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCOT_RUT = New Global.System.Data.DataColumn("COT_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_RUT)
            Me.columnCOT_NOMBRE = New Global.System.Data.DataColumn("COT_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NOMBRE)
            Me.columnCOT_EMAIL = New Global.System.Data.DataColumn("COT_EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_EMAIL)
            Me.columnCOT_ATENCION = New Global.System.Data.DataColumn("COT_ATENCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_ATENCION)
            Me.columnCOT_DIRECCION = New Global.System.Data.DataColumn("COT_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_DIRECCION)
            Me.columnCOT_COMUNA = New Global.System.Data.DataColumn("COT_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_COMUNA)
            Me.columnCOT_FONO = New Global.System.Data.DataColumn("COT_FONO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_FONO)
            Me.columnCOT_FAX = New Global.System.Data.DataColumn("COT_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_FAX)
            Me.columnCOT_SUBTOTAL = New Global.System.Data.DataColumn("COT_SUBTOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_SUBTOTAL)
            Me.columnCOT_DESCUENTO = New Global.System.Data.DataColumn("COT_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_DESCUENTO)
            Me.columnCOT_NETO = New Global.System.Data.DataColumn("COT_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NETO)
            Me.columnCOT_IVA = New Global.System.Data.DataColumn("COT_IVA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_IVA)
            Me.columnCOT_TOTAL = New Global.System.Data.DataColumn("COT_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_TOTAL)
            Me.columnCOT_FECHA = New Global.System.Data.DataColumn("COT_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_FECHA)
            Me.columnCOT_CELULAR = New Global.System.Data.DataColumn("COT_CELULAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_CELULAR)
            Me.columnCOT_CIUDAD = New Global.System.Data.DataColumn("COT_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_CIUDAD)
            Me.columnCOT_EMPRESA = New Global.System.Data.DataColumn("COT_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_EMPRESA)
            Me.columnCOT_MUE1 = New Global.System.Data.DataColumn("COT_MUE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE1)
            Me.columnCOT_MUE2 = New Global.System.Data.DataColumn("COT_MUE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE2)
            Me.columnCOT_MUE3 = New Global.System.Data.DataColumn("COT_MUE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE3)
            Me.columnCOT_MUE4 = New Global.System.Data.DataColumn("COT_MUE4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE4)
            Me.columnCOT_EMAIL2 = New Global.System.Data.DataColumn("COT_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_EMAIL2)
            Me.columnCOT_CARGO = New Global.System.Data.DataColumn("COT_CARGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_CARGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey37", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO}, true))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCOT_NUMERO.Unique = true
            Me.columnCOT_RUT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZACION1Row() As COTIZACION1Row
            Return CType(Me.NewRow,COTIZACION1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZACION1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZACION1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZACION1RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZACION1RowChanged(Me, New COTIZACION1RowChangeEvent(CType(e.Row,COTIZACION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZACION1RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZACION1RowChanging(Me, New COTIZACION1RowChangeEvent(CType(e.Row,COTIZACION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZACION1RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZACION1RowDeleted(Me, New COTIZACION1RowChangeEvent(CType(e.Row,COTIZACION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZACION1RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZACION1RowDeleting(Me, New COTIZACION1RowChangeEvent(CType(e.Row,COTIZACION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZACION1Row(ByVal row As COTIZACION1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZACION1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COMBO_ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COMBO_ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMBO_ANALISISRow
            Get
                Return CType(Me.Rows(index),COMBO_ANALISISRow)
            End Get
        End Property
        
        Public Event COMBO_ANALISISRowChanging As COMBO_ANALISISRowChangeEventHandler
        
        Public Event COMBO_ANALISISRowChanged As COMBO_ANALISISRowChangeEventHandler
        
        Public Event COMBO_ANALISISRowDeleting As COMBO_ANALISISRowChangeEventHandler
        
        Public Event COMBO_ANALISISRowDeleted As COMBO_ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOMBO_ANALISISRow(ByVal row As COMBO_ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOMBO_ANALISISRow(ByVal COB_CODIGO As Double, ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String) As COMBO_ANALISISRow
            Dim rowCOMBO_ANALISISRow As COMBO_ANALISISRow = CType(Me.NewRow,COMBO_ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {COB_CODIGO, ANA_CODIGO, ANA_ANALISIS}
            rowCOMBO_ANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOMBO_ANALISISRow)
            Return rowCOMBO_ANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOB_CODIGOANA_CODIGO(ByVal COB_CODIGO As Double, ByVal ANA_CODIGO As Double) As COMBO_ANALISISRow
            Return CType(Me.Rows.Find(New Object() {COB_CODIGO, ANA_CODIGO}),COMBO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COMBO_ANALISISDataTable = CType(MyBase.Clone,COMBO_ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COMBO_ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOB_CODIGO = MyBase.Columns("COB_CODIGO")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOB_CODIGO = New Global.System.Data.DataColumn("COB_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOB_CODIGO)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey8", New Global.System.Data.DataColumn() {Me.columnCOB_CODIGO, Me.columnANA_CODIGO}, true))
            Me.columnCOB_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOMBO_ANALISISRow() As COMBO_ANALISISRow
            Return CType(Me.NewRow,COMBO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COMBO_ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COMBO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMBO_ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowChanged(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMBO_ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowChanging(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMBO_ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowDeleted(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMBO_ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowDeleting(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOMBO_ANALISISRow(ByVal row As COMBO_ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COMBO_ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_NOTAS1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCON_NUMERO As Global.System.Data.DataColumn
        
        Private columnNOT_NOTAS As Global.System.Data.DataColumn
        
        Private columnNOTA_COT_TIPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_NOTAS1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CON_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCON_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOT_NOTASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOT_NOTAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTA_COT_TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTA_COT_TIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_NOTAS1Row
            Get
                Return CType(Me.Rows(index),COTIZA_NOTAS1Row)
            End Get
        End Property
        
        Public Event COTIZA_NOTAS1RowChanging As COTIZA_NOTAS1RowChangeEventHandler
        
        Public Event COTIZA_NOTAS1RowChanged As COTIZA_NOTAS1RowChangeEventHandler
        
        Public Event COTIZA_NOTAS1RowDeleting As COTIZA_NOTAS1RowChangeEventHandler
        
        Public Event COTIZA_NOTAS1RowDeleted As COTIZA_NOTAS1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_NOTAS1Row(ByVal row As COTIZA_NOTAS1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_NOTAS1Row(ByVal COT_NUMERO As Double, ByVal CON_NUMERO As Integer, ByVal NOT_NOTAS As String, ByVal NOTA_COT_TIPO As String) As COTIZA_NOTAS1Row
            Dim rowCOTIZA_NOTAS1Row As COTIZA_NOTAS1Row = CType(Me.NewRow,COTIZA_NOTAS1Row)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, CON_NUMERO, NOT_NOTAS, NOTA_COT_TIPO}
            rowCOTIZA_NOTAS1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_NOTAS1Row)
            Return rowCOTIZA_NOTAS1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOT_NUMEROCON_NUMERO(ByVal COT_NUMERO As Double, ByVal CON_NUMERO As Integer) As COTIZA_NOTAS1Row
            Return CType(Me.Rows.Find(New Object() {COT_NUMERO, CON_NUMERO}),COTIZA_NOTAS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_NOTAS1DataTable = CType(MyBase.Clone,COTIZA_NOTAS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_NOTAS1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCON_NUMERO = MyBase.Columns("CON_NUMERO")
            Me.columnNOT_NOTAS = MyBase.Columns("NOT_NOTAS")
            Me.columnNOTA_COT_TIPO = MyBase.Columns("NOTA_COT_TIPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCON_NUMERO = New Global.System.Data.DataColumn("CON_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCON_NUMERO)
            Me.columnNOT_NOTAS = New Global.System.Data.DataColumn("NOT_NOTAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOT_NOTAS)
            Me.columnNOTA_COT_TIPO = New Global.System.Data.DataColumn("NOTA_COT_TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTA_COT_TIPO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey7", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO, Me.columnCON_NUMERO}, true))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCON_NUMERO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_NOTAS1Row() As COTIZA_NOTAS1Row
            Return CType(Me.NewRow,COTIZA_NOTAS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_NOTAS1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_NOTAS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_NOTAS1RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTAS1RowChanged(Me, New COTIZA_NOTAS1RowChangeEvent(CType(e.Row,COTIZA_NOTAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_NOTAS1RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTAS1RowChanging(Me, New COTIZA_NOTAS1RowChangeEvent(CType(e.Row,COTIZA_NOTAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_NOTAS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTAS1RowDeleted(Me, New COTIZA_NOTAS1RowChangeEvent(CType(e.Row,COTIZA_NOTAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_NOTAS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_NOTAS1RowDeleting(Me, New COTIZA_NOTAS1RowChangeEvent(CType(e.Row,COTIZA_NOTAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_NOTAS1Row(ByVal row As COTIZA_NOTAS1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_NOTAS1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCTD_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTA_UNITARIO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS2Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS2Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS2RowChanging As COTIZA_ANALISIS2RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS2RowChanged As COTIZA_ANALISIS2RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS2RowDeleting As COTIZA_ANALISIS2RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS2RowDeleted As COTIZA_ANALISIS2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS2Row(ByVal row As COTIZA_ANALISIS2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS2Row(ByVal COT_NUMERO As Double, ByVal CTD_ANALISIS As Double, ByVal CTA_UNITARIO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer) As COTIZA_ANALISIS2Row
            Dim rowCOTIZA_ANALISIS2Row As COTIZA_ANALISIS2Row = CType(Me.NewRow,COTIZA_ANALISIS2Row)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, CTD_ANALISIS, CTA_UNITARIO, CTA_DESCUENTO, CTA_NETO}
            rowCOTIZA_ANALISIS2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS2Row)
            Return rowCOTIZA_ANALISIS2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS2DataTable = CType(MyBase.Clone,COTIZA_ANALISIS2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCTD_ANALISIS = MyBase.Columns("CTD_ANALISIS")
            Me.columnCTA_UNITARIO = MyBase.Columns("CTA_UNITARIO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCTD_ANALISIS = New Global.System.Data.DataColumn("CTD_ANALISIS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_ANALISIS)
            Me.columnCTA_UNITARIO = New Global.System.Data.DataColumn("CTA_UNITARIO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_UNITARIO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey11", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO, Me.columnCTD_ANALISIS}, false))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCTD_ANALISIS.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS2Row() As COTIZA_ANALISIS2Row
            Return CType(Me.NewRow,COTIZA_ANALISIS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS2RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS2RowChanged(Me, New COTIZA_ANALISIS2RowChangeEvent(CType(e.Row,COTIZA_ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS2RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS2RowChanging(Me, New COTIZA_ANALISIS2RowChangeEvent(CType(e.Row,COTIZA_ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS2RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS2RowDeleted(Me, New COTIZA_ANALISIS2RowChangeEvent(CType(e.Row,COTIZA_ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS2RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS2RowDeleting(Me, New COTIZA_ANALISIS2RowChangeEvent(CType(e.Row,COTIZA_ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS2Row(ByVal row As COTIZA_ANALISIS2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS11DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS11"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS11Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS11Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS11RowChanging As COTIZA_ANALISIS11RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS11RowChanged As COTIZA_ANALISIS11RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS11RowDeleting As COTIZA_ANALISIS11RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS11RowDeleted As COTIZA_ANALISIS11RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS11Row(ByVal row As COTIZA_ANALISIS11Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS11Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS11Row
            Dim rowCOTIZA_ANALISIS11Row As COTIZA_ANALISIS11Row = CType(Me.NewRow,COTIZA_ANALISIS11Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS11Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS11Row)
            Return rowCOTIZA_ANALISIS11Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS11Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS11Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS11DataTable = CType(MyBase.Clone,COTIZA_ANALISIS11DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS11DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey12", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS11Row() As COTIZA_ANALISIS11Row
            Return CType(Me.NewRow,COTIZA_ANALISIS11Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS11Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS11Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS11RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS11RowChanged(Me, New COTIZA_ANALISIS11RowChangeEvent(CType(e.Row,COTIZA_ANALISIS11Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS11RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS11RowChanging(Me, New COTIZA_ANALISIS11RowChangeEvent(CType(e.Row,COTIZA_ANALISIS11Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS11RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS11RowDeleted(Me, New COTIZA_ANALISIS11RowChangeEvent(CType(e.Row,COTIZA_ANALISIS11Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS11RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS11RowDeleting(Me, New COTIZA_ANALISIS11RowChangeEvent(CType(e.Row,COTIZA_ANALISIS11Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS11Row(ByVal row As COTIZA_ANALISIS11Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS11DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS12DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS12"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS12Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS12Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS12RowChanging As COTIZA_ANALISIS12RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS12RowChanged As COTIZA_ANALISIS12RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS12RowDeleting As COTIZA_ANALISIS12RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS12RowDeleted As COTIZA_ANALISIS12RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS12Row(ByVal row As COTIZA_ANALISIS12Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS12Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS12Row
            Dim rowCOTIZA_ANALISIS12Row As COTIZA_ANALISIS12Row = CType(Me.NewRow,COTIZA_ANALISIS12Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS12Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS12Row)
            Return rowCOTIZA_ANALISIS12Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS12Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS12Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS12DataTable = CType(MyBase.Clone,COTIZA_ANALISIS12DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS12DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey13", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS12Row() As COTIZA_ANALISIS12Row
            Return CType(Me.NewRow,COTIZA_ANALISIS12Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS12Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS12Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS12RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS12RowChanged(Me, New COTIZA_ANALISIS12RowChangeEvent(CType(e.Row,COTIZA_ANALISIS12Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS12RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS12RowChanging(Me, New COTIZA_ANALISIS12RowChangeEvent(CType(e.Row,COTIZA_ANALISIS12Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS12RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS12RowDeleted(Me, New COTIZA_ANALISIS12RowChangeEvent(CType(e.Row,COTIZA_ANALISIS12Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS12RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS12RowDeleting(Me, New COTIZA_ANALISIS12RowChangeEvent(CType(e.Row,COTIZA_ANALISIS12Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS12Row(ByVal row As COTIZA_ANALISIS12Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS12DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS13DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS13"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS13Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS13Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS13RowChanging As COTIZA_ANALISIS13RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS13RowChanged As COTIZA_ANALISIS13RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS13RowDeleting As COTIZA_ANALISIS13RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS13RowDeleted As COTIZA_ANALISIS13RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS13Row(ByVal row As COTIZA_ANALISIS13Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS13Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS13Row
            Dim rowCOTIZA_ANALISIS13Row As COTIZA_ANALISIS13Row = CType(Me.NewRow,COTIZA_ANALISIS13Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS13Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS13Row)
            Return rowCOTIZA_ANALISIS13Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS13Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS13Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS13DataTable = CType(MyBase.Clone,COTIZA_ANALISIS13DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS13DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey14", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS13Row() As COTIZA_ANALISIS13Row
            Return CType(Me.NewRow,COTIZA_ANALISIS13Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS13Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS13Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS13RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS13RowChanged(Me, New COTIZA_ANALISIS13RowChangeEvent(CType(e.Row,COTIZA_ANALISIS13Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS13RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS13RowChanging(Me, New COTIZA_ANALISIS13RowChangeEvent(CType(e.Row,COTIZA_ANALISIS13Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS13RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS13RowDeleted(Me, New COTIZA_ANALISIS13RowChangeEvent(CType(e.Row,COTIZA_ANALISIS13Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS13RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS13RowDeleting(Me, New COTIZA_ANALISIS13RowChangeEvent(CType(e.Row,COTIZA_ANALISIS13Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS13Row(ByVal row As COTIZA_ANALISIS13Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS13DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CODIGO_ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CODIGO_ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CODIGO_ANALISISRow
            Get
                Return CType(Me.Rows(index),CODIGO_ANALISISRow)
            End Get
        End Property
        
        Public Event CODIGO_ANALISISRowChanging As CODIGO_ANALISISRowChangeEventHandler
        
        Public Event CODIGO_ANALISISRowChanged As CODIGO_ANALISISRowChangeEventHandler
        
        Public Event CODIGO_ANALISISRowDeleting As CODIGO_ANALISISRowChangeEventHandler
        
        Public Event CODIGO_ANALISISRowDeleted As CODIGO_ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCODIGO_ANALISISRow(ByVal row As CODIGO_ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCODIGO_ANALISISRow(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String) As CODIGO_ANALISISRow
            Dim rowCODIGO_ANALISISRow As CODIGO_ANALISISRow = CType(Me.NewRow,CODIGO_ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS}
            rowCODIGO_ANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCODIGO_ANALISISRow)
            Return rowCODIGO_ANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGOANA_ANALISIS(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String) As CODIGO_ANALISISRow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO, ANA_ANALISIS}),CODIGO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CODIGO_ANALISISDataTable = CType(MyBase.Clone,CODIGO_ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CODIGO_ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey21", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO, Me.columnANA_ANALISIS}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_ANALISIS.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCODIGO_ANALISISRow() As CODIGO_ANALISISRow
            Return CType(Me.NewRow,CODIGO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CODIGO_ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CODIGO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CODIGO_ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowChanged(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CODIGO_ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowChanging(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CODIGO_ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowDeleted(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CODIGO_ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowDeleting(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCODIGO_ANALISISRow(ByVal row As CODIGO_ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CODIGO_ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZACIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCOT_RUT As Global.System.Data.DataColumn
        
        Private columnCOT_NOMBRE As Global.System.Data.DataColumn
        
        Private columnCOT_EMAIL As Global.System.Data.DataColumn
        
        Private columnCOT_ATENCION As Global.System.Data.DataColumn
        
        Private columnCOT_DIRECCION As Global.System.Data.DataColumn
        
        Private columnCOT_COMUNA As Global.System.Data.DataColumn
        
        Private columnCOT_FONO As Global.System.Data.DataColumn
        
        Private columnCOT_FAX As Global.System.Data.DataColumn
        
        Private columnCOT_SUBTOTAL As Global.System.Data.DataColumn
        
        Private columnCOT_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCOT_NETO As Global.System.Data.DataColumn
        
        Private columnCOT_IVA As Global.System.Data.DataColumn
        
        Private columnCOT_TOTAL As Global.System.Data.DataColumn
        
        Private columnCOT_FECHA As Global.System.Data.DataColumn
        
        Private columnCOT_CELULAR As Global.System.Data.DataColumn
        
        Private columnCOT_CIUDAD As Global.System.Data.DataColumn
        
        Private columnCOT_EMPRESA As Global.System.Data.DataColumn
        
        Private columnCOT_MUE1 As Global.System.Data.DataColumn
        
        Private columnCOT_MUE2 As Global.System.Data.DataColumn
        
        Private columnCOT_MUE3 As Global.System.Data.DataColumn
        
        Private columnCOT_MUE4 As Global.System.Data.DataColumn
        
        Private columnCOT_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnCOT_CARGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZACION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_EMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_ATENCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_ATENCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_FONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_FONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_SUBTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_SUBTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_IVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_CELULARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_CELULAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_MUE4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_MUE4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_CARGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_CARGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZACIONRow
            Get
                Return CType(Me.Rows(index),COTIZACIONRow)
            End Get
        End Property
        
        Public Event COTIZACIONRowChanging As COTIZACIONRowChangeEventHandler
        
        Public Event COTIZACIONRowChanged As COTIZACIONRowChangeEventHandler
        
        Public Event COTIZACIONRowDeleting As COTIZACIONRowChangeEventHandler
        
        Public Event COTIZACIONRowDeleted As COTIZACIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZACIONRow(ByVal row As COTIZACIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZACIONRow( _
                    ByVal COT_NUMERO As Double,  _
                    ByVal COT_RUT As String,  _
                    ByVal COT_NOMBRE As String,  _
                    ByVal COT_EMAIL As String,  _
                    ByVal COT_ATENCION As String,  _
                    ByVal COT_DIRECCION As String,  _
                    ByVal COT_COMUNA As String,  _
                    ByVal COT_FONO As String,  _
                    ByVal COT_FAX As String,  _
                    ByVal COT_SUBTOTAL As Integer,  _
                    ByVal COT_DESCUENTO As Double,  _
                    ByVal COT_NETO As Integer,  _
                    ByVal COT_IVA As Integer,  _
                    ByVal COT_TOTAL As Integer,  _
                    ByVal COT_FECHA As Date,  _
                    ByVal COT_CELULAR As String,  _
                    ByVal COT_CIUDAD As String,  _
                    ByVal COT_EMPRESA As String,  _
                    ByVal COT_MUE1 As String,  _
                    ByVal COT_MUE2 As String,  _
                    ByVal COT_MUE3 As String,  _
                    ByVal COT_MUE4 As String,  _
                    ByVal COT_EMAIL2 As String,  _
                    ByVal COT_CARGO As String) As COTIZACIONRow
            Dim rowCOTIZACIONRow As COTIZACIONRow = CType(Me.NewRow,COTIZACIONRow)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, COT_RUT, COT_NOMBRE, COT_EMAIL, COT_ATENCION, COT_DIRECCION, COT_COMUNA, COT_FONO, COT_FAX, COT_SUBTOTAL, COT_DESCUENTO, COT_NETO, COT_IVA, COT_TOTAL, COT_FECHA, COT_CELULAR, COT_CIUDAD, COT_EMPRESA, COT_MUE1, COT_MUE2, COT_MUE3, COT_MUE4, COT_EMAIL2, COT_CARGO}
            rowCOTIZACIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZACIONRow)
            Return rowCOTIZACIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOT_NUMERO(ByVal COT_NUMERO As Double) As COTIZACIONRow
            Return CType(Me.Rows.Find(New Object() {COT_NUMERO}),COTIZACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZACIONDataTable = CType(MyBase.Clone,COTIZACIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZACIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCOT_RUT = MyBase.Columns("COT_RUT")
            Me.columnCOT_NOMBRE = MyBase.Columns("COT_NOMBRE")
            Me.columnCOT_EMAIL = MyBase.Columns("COT_EMAIL")
            Me.columnCOT_ATENCION = MyBase.Columns("COT_ATENCION")
            Me.columnCOT_DIRECCION = MyBase.Columns("COT_DIRECCION")
            Me.columnCOT_COMUNA = MyBase.Columns("COT_COMUNA")
            Me.columnCOT_FONO = MyBase.Columns("COT_FONO")
            Me.columnCOT_FAX = MyBase.Columns("COT_FAX")
            Me.columnCOT_SUBTOTAL = MyBase.Columns("COT_SUBTOTAL")
            Me.columnCOT_DESCUENTO = MyBase.Columns("COT_DESCUENTO")
            Me.columnCOT_NETO = MyBase.Columns("COT_NETO")
            Me.columnCOT_IVA = MyBase.Columns("COT_IVA")
            Me.columnCOT_TOTAL = MyBase.Columns("COT_TOTAL")
            Me.columnCOT_FECHA = MyBase.Columns("COT_FECHA")
            Me.columnCOT_CELULAR = MyBase.Columns("COT_CELULAR")
            Me.columnCOT_CIUDAD = MyBase.Columns("COT_CIUDAD")
            Me.columnCOT_EMPRESA = MyBase.Columns("COT_EMPRESA")
            Me.columnCOT_MUE1 = MyBase.Columns("COT_MUE1")
            Me.columnCOT_MUE2 = MyBase.Columns("COT_MUE2")
            Me.columnCOT_MUE3 = MyBase.Columns("COT_MUE3")
            Me.columnCOT_MUE4 = MyBase.Columns("COT_MUE4")
            Me.columnCOT_EMAIL2 = MyBase.Columns("COT_EMAIL2")
            Me.columnCOT_CARGO = MyBase.Columns("COT_CARGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCOT_RUT = New Global.System.Data.DataColumn("COT_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_RUT)
            Me.columnCOT_NOMBRE = New Global.System.Data.DataColumn("COT_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NOMBRE)
            Me.columnCOT_EMAIL = New Global.System.Data.DataColumn("COT_EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_EMAIL)
            Me.columnCOT_ATENCION = New Global.System.Data.DataColumn("COT_ATENCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_ATENCION)
            Me.columnCOT_DIRECCION = New Global.System.Data.DataColumn("COT_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_DIRECCION)
            Me.columnCOT_COMUNA = New Global.System.Data.DataColumn("COT_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_COMUNA)
            Me.columnCOT_FONO = New Global.System.Data.DataColumn("COT_FONO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_FONO)
            Me.columnCOT_FAX = New Global.System.Data.DataColumn("COT_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_FAX)
            Me.columnCOT_SUBTOTAL = New Global.System.Data.DataColumn("COT_SUBTOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_SUBTOTAL)
            Me.columnCOT_DESCUENTO = New Global.System.Data.DataColumn("COT_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_DESCUENTO)
            Me.columnCOT_NETO = New Global.System.Data.DataColumn("COT_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NETO)
            Me.columnCOT_IVA = New Global.System.Data.DataColumn("COT_IVA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_IVA)
            Me.columnCOT_TOTAL = New Global.System.Data.DataColumn("COT_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_TOTAL)
            Me.columnCOT_FECHA = New Global.System.Data.DataColumn("COT_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_FECHA)
            Me.columnCOT_CELULAR = New Global.System.Data.DataColumn("COT_CELULAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_CELULAR)
            Me.columnCOT_CIUDAD = New Global.System.Data.DataColumn("COT_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_CIUDAD)
            Me.columnCOT_EMPRESA = New Global.System.Data.DataColumn("COT_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_EMPRESA)
            Me.columnCOT_MUE1 = New Global.System.Data.DataColumn("COT_MUE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE1)
            Me.columnCOT_MUE2 = New Global.System.Data.DataColumn("COT_MUE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE2)
            Me.columnCOT_MUE3 = New Global.System.Data.DataColumn("COT_MUE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE3)
            Me.columnCOT_MUE4 = New Global.System.Data.DataColumn("COT_MUE4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_MUE4)
            Me.columnCOT_EMAIL2 = New Global.System.Data.DataColumn("COT_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_EMAIL2)
            Me.columnCOT_CARGO = New Global.System.Data.DataColumn("COT_CARGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_CARGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey9", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO}, true))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCOT_NUMERO.Unique = true
            Me.columnCOT_RUT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZACIONRow() As COTIZACIONRow
            Return CType(Me.NewRow,COTIZACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZACIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZACIONRowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZACIONRowChanged(Me, New COTIZACIONRowChangeEvent(CType(e.Row,COTIZACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZACIONRowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZACIONRowChanging(Me, New COTIZACIONRowChangeEvent(CType(e.Row,COTIZACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZACIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZACIONRowDeleted(Me, New COTIZACIONRowChangeEvent(CType(e.Row,COTIZACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZACIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZACIONRowDeleting(Me, New COTIZACIONRowChangeEvent(CType(e.Row,COTIZACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZACIONRow(ByVal row As COTIZACIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZACIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EMPRESADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRO_EMPRESA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EMPRESA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EMPRESARow
            Get
                Return CType(Me.Rows(index),EMPRESARow)
            End Get
        End Property
        
        Public Event EMPRESARowChanging As EMPRESARowChangeEventHandler
        
        Public Event EMPRESARowChanged As EMPRESARowChangeEventHandler
        
        Public Event EMPRESARowDeleting As EMPRESARowChangeEventHandler
        
        Public Event EMPRESARowDeleted As EMPRESARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEMPRESARow(ByVal row As EMPRESARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEMPRESARow(ByVal PRO_EMPRESA As String) As EMPRESARow
            Dim rowEMPRESARow As EMPRESARow = CType(Me.NewRow,EMPRESARow)
            Dim columnValuesArray() As Object = New Object() {PRO_EMPRESA}
            rowEMPRESARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEMPRESARow)
            Return rowEMPRESARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EMPRESADataTable = CType(MyBase.Clone,EMPRESADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EMPRESADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRO_EMPRESA = MyBase.Columns("PRO_EMPRESA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRO_EMPRESA = New Global.System.Data.DataColumn("PRO_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMPRESA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEMPRESARow() As EMPRESARow
            Return CType(Me.NewRow,EMPRESARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EMPRESARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EMPRESARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EMPRESARowChangedEvent) Is Nothing) Then
                RaiseEvent EMPRESARowChanged(Me, New EMPRESARowChangeEvent(CType(e.Row,EMPRESARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EMPRESARowChangingEvent) Is Nothing) Then
                RaiseEvent EMPRESARowChanging(Me, New EMPRESARowChangeEvent(CType(e.Row,EMPRESARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EMPRESARowDeletedEvent) Is Nothing) Then
                RaiseEvent EMPRESARowDeleted(Me, New EMPRESARowChangeEvent(CType(e.Row,EMPRESARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EMPRESARowDeletingEvent) Is Nothing) Then
                RaiseEvent EMPRESARowDeleting(Me, New EMPRESARowChangeEvent(CType(e.Row,EMPRESARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEMPRESARow(ByVal row As EMPRESARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EMPRESADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRO_PASODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRO_NOMBRE As Global.System.Data.DataColumn
        
        Private columnPRO_RUT As Global.System.Data.DataColumn
        
        Private columnPRO_DIRECCION As Global.System.Data.DataColumn
        
        Private columnPRO_FONO1 As Global.System.Data.DataColumn
        
        Private columnPRO_FONO2 As Global.System.Data.DataColumn
        
        Private columnPRO_CELULAR As Global.System.Data.DataColumn
        
        Private columnPRO_FAX As Global.System.Data.DataColumn
        
        Private columnPRO_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnPRO_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnPRO_CASILLA As Global.System.Data.DataColumn
        
        Private columnPRO_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCIU_NOMBRE As Global.System.Data.DataColumn
        
        Private columnLOC_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnCOM_COMUNA As Global.System.Data.DataColumn
        
        Private columnPRO_ATENCION As Global.System.Data.DataColumn
        
        Private columnPRO_EMPRESA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRO_PASO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_CELULARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CELULAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_CASILLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_CASILLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIU_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIU_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOC_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOC_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COM_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOM_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_ATENCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_ATENCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRO_PASORow
            Get
                Return CType(Me.Rows(index),PRO_PASORow)
            End Get
        End Property
        
        Public Event PRO_PASORowChanging As PRO_PASORowChangeEventHandler
        
        Public Event PRO_PASORowChanged As PRO_PASORowChangeEventHandler
        
        Public Event PRO_PASORowDeleting As PRO_PASORowChangeEventHandler
        
        Public Event PRO_PASORowDeleted As PRO_PASORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRO_PASORow(ByVal row As PRO_PASORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRO_PASORow( _
                    ByVal PRO_NOMBRE As String,  _
                    ByVal PRO_RUT As String,  _
                    ByVal PRO_DIRECCION As String,  _
                    ByVal PRO_FONO1 As String,  _
                    ByVal PRO_FONO2 As String,  _
                    ByVal PRO_CELULAR As String,  _
                    ByVal PRO_FAX As String,  _
                    ByVal PRO_EMAIL1 As String,  _
                    ByVal PRO_EMAIL2 As String,  _
                    ByVal PRO_CASILLA As String,  _
                    ByVal PRO_DESCUENTO As Double,  _
                    ByVal CIU_NOMBRE As String,  _
                    ByVal LOC_LOCALIDAD As String,  _
                    ByVal COM_COMUNA As String,  _
                    ByVal PRO_ATENCION As String,  _
                    ByVal PRO_EMPRESA As String) As PRO_PASORow
            Dim rowPRO_PASORow As PRO_PASORow = CType(Me.NewRow,PRO_PASORow)
            Dim columnValuesArray() As Object = New Object() {PRO_NOMBRE, PRO_RUT, PRO_DIRECCION, PRO_FONO1, PRO_FONO2, PRO_CELULAR, PRO_FAX, PRO_EMAIL1, PRO_EMAIL2, PRO_CASILLA, PRO_DESCUENTO, CIU_NOMBRE, LOC_LOCALIDAD, COM_COMUNA, PRO_ATENCION, PRO_EMPRESA}
            rowPRO_PASORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRO_PASORow)
            Return rowPRO_PASORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRO_NOMBREPRO_RUT(ByVal PRO_NOMBRE As String, ByVal PRO_RUT As String) As PRO_PASORow
            Return CType(Me.Rows.Find(New Object() {PRO_NOMBRE, PRO_RUT}),PRO_PASORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRO_PASODataTable = CType(MyBase.Clone,PRO_PASODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRO_PASODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRO_NOMBRE = MyBase.Columns("PRO_NOMBRE")
            Me.columnPRO_RUT = MyBase.Columns("PRO_RUT")
            Me.columnPRO_DIRECCION = MyBase.Columns("PRO_DIRECCION")
            Me.columnPRO_FONO1 = MyBase.Columns("PRO_FONO1")
            Me.columnPRO_FONO2 = MyBase.Columns("PRO_FONO2")
            Me.columnPRO_CELULAR = MyBase.Columns("PRO_CELULAR")
            Me.columnPRO_FAX = MyBase.Columns("PRO_FAX")
            Me.columnPRO_EMAIL1 = MyBase.Columns("PRO_EMAIL1")
            Me.columnPRO_EMAIL2 = MyBase.Columns("PRO_EMAIL2")
            Me.columnPRO_CASILLA = MyBase.Columns("PRO_CASILLA")
            Me.columnPRO_DESCUENTO = MyBase.Columns("PRO_DESCUENTO")
            Me.columnCIU_NOMBRE = MyBase.Columns("CIU_NOMBRE")
            Me.columnLOC_LOCALIDAD = MyBase.Columns("LOC_LOCALIDAD")
            Me.columnCOM_COMUNA = MyBase.Columns("COM_COMUNA")
            Me.columnPRO_ATENCION = MyBase.Columns("PRO_ATENCION")
            Me.columnPRO_EMPRESA = MyBase.Columns("PRO_EMPRESA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRO_NOMBRE = New Global.System.Data.DataColumn("PRO_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_NOMBRE)
            Me.columnPRO_RUT = New Global.System.Data.DataColumn("PRO_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_RUT)
            Me.columnPRO_DIRECCION = New Global.System.Data.DataColumn("PRO_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_DIRECCION)
            Me.columnPRO_FONO1 = New Global.System.Data.DataColumn("PRO_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FONO1)
            Me.columnPRO_FONO2 = New Global.System.Data.DataColumn("PRO_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FONO2)
            Me.columnPRO_CELULAR = New Global.System.Data.DataColumn("PRO_CELULAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CELULAR)
            Me.columnPRO_FAX = New Global.System.Data.DataColumn("PRO_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_FAX)
            Me.columnPRO_EMAIL1 = New Global.System.Data.DataColumn("PRO_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMAIL1)
            Me.columnPRO_EMAIL2 = New Global.System.Data.DataColumn("PRO_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMAIL2)
            Me.columnPRO_CASILLA = New Global.System.Data.DataColumn("PRO_CASILLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_CASILLA)
            Me.columnPRO_DESCUENTO = New Global.System.Data.DataColumn("PRO_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_DESCUENTO)
            Me.columnCIU_NOMBRE = New Global.System.Data.DataColumn("CIU_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIU_NOMBRE)
            Me.columnLOC_LOCALIDAD = New Global.System.Data.DataColumn("LOC_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOC_LOCALIDAD)
            Me.columnCOM_COMUNA = New Global.System.Data.DataColumn("COM_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOM_COMUNA)
            Me.columnPRO_ATENCION = New Global.System.Data.DataColumn("PRO_ATENCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_ATENCION)
            Me.columnPRO_EMPRESA = New Global.System.Data.DataColumn("PRO_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_EMPRESA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey19", New Global.System.Data.DataColumn() {Me.columnPRO_NOMBRE, Me.columnPRO_RUT}, true))
            Me.columnPRO_NOMBRE.AllowDBNull = false
            Me.columnPRO_RUT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRO_PASORow() As PRO_PASORow
            Return CType(Me.NewRow,PRO_PASORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRO_PASORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRO_PASORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRO_PASORowChangedEvent) Is Nothing) Then
                RaiseEvent PRO_PASORowChanged(Me, New PRO_PASORowChangeEvent(CType(e.Row,PRO_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRO_PASORowChangingEvent) Is Nothing) Then
                RaiseEvent PRO_PASORowChanging(Me, New PRO_PASORowChangeEvent(CType(e.Row,PRO_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRO_PASORowDeletedEvent) Is Nothing) Then
                RaiseEvent PRO_PASORowDeleted(Me, New PRO_PASORowChangeEvent(CType(e.Row,PRO_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRO_PASORowDeletingEvent) Is Nothing) Then
                RaiseEvent PRO_PASORowDeleting(Me, New PRO_PASORowChangeEvent(CType(e.Row,PRO_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRO_PASORow(ByVal row As PRO_PASORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRO_PASODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COMBO_ANALISIS1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COMBO_ANALISIS1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMBO_ANALISIS1Row
            Get
                Return CType(Me.Rows(index),COMBO_ANALISIS1Row)
            End Get
        End Property
        
        Public Event COMBO_ANALISIS1RowChanging As COMBO_ANALISIS1RowChangeEventHandler
        
        Public Event COMBO_ANALISIS1RowChanged As COMBO_ANALISIS1RowChangeEventHandler
        
        Public Event COMBO_ANALISIS1RowDeleting As COMBO_ANALISIS1RowChangeEventHandler
        
        Public Event COMBO_ANALISIS1RowDeleted As COMBO_ANALISIS1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOMBO_ANALISIS1Row(ByVal row As COMBO_ANALISIS1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOMBO_ANALISIS1Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String) As COMBO_ANALISIS1Row
            Dim rowCOMBO_ANALISIS1Row As COMBO_ANALISIS1Row = CType(Me.NewRow,COMBO_ANALISIS1Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS}
            rowCOMBO_ANALISIS1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOMBO_ANALISIS1Row)
            Return rowCOMBO_ANALISIS1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COMBO_ANALISIS1Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COMBO_ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COMBO_ANALISIS1DataTable = CType(MyBase.Clone,COMBO_ANALISIS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COMBO_ANALISIS1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey23", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOMBO_ANALISIS1Row() As COMBO_ANALISIS1Row
            Return CType(Me.NewRow,COMBO_ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COMBO_ANALISIS1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COMBO_ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMBO_ANALISIS1RowChangedEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISIS1RowChanged(Me, New COMBO_ANALISIS1RowChangeEvent(CType(e.Row,COMBO_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMBO_ANALISIS1RowChangingEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISIS1RowChanging(Me, New COMBO_ANALISIS1RowChangeEvent(CType(e.Row,COMBO_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMBO_ANALISIS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISIS1RowDeleted(Me, New COMBO_ANALISIS1RowChangeEvent(CType(e.Row,COMBO_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMBO_ANALISIS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISIS1RowDeleting(Me, New COMBO_ANALISIS1RowChangeEvent(CType(e.Row,COMBO_ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOMBO_ANALISIS1Row(ByVal row As COMBO_ANALISIS1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COMBO_ANALISIS1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS1Row
            Get
                Return CType(Me.Rows(index),ANALISIS1Row)
            End Get
        End Property
        
        Public Event ANALISIS1RowChanging As ANALISIS1RowChangeEventHandler
        
        Public Event ANALISIS1RowChanged As ANALISIS1RowChangeEventHandler
        
        Public Event ANALISIS1RowDeleting As ANALISIS1RowChangeEventHandler
        
        Public Event ANALISIS1RowDeleted As ANALISIS1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS1Row(ByVal row As ANALISIS1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS1Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String) As ANALISIS1Row
            Dim rowANALISIS1Row As ANALISIS1Row = CType(Me.NewRow,ANALISIS1Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO}
            rowANALISIS1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS1Row)
            Return rowANALISIS1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS1Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS1DataTable = CType(MyBase.Clone,ANALISIS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey25", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS1Row() As ANALISIS1Row
            Return CType(Me.NewRow,ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS1RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowChanged(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS1RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowChanging(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowDeleted(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowDeleting(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS1Row(ByVal row As ANALISIS1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_DETALLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCTD_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTD_CANTIDAD As Global.System.Data.DataColumn
        
        Private columnCTD_UNITARIO As Global.System.Data.DataColumn
        
        Private columnCTD_SUBTOTAL As Global.System.Data.DataColumn
        
        Private columnCTD_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTD_TOTAL As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTD_MUESTRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_DETALLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_CANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_SUBTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_SUBTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_MUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_MUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_DETALLERow
            Get
                Return CType(Me.Rows(index),COTIZA_DETALLERow)
            End Get
        End Property
        
        Public Event COTIZA_DETALLERowChanging As COTIZA_DETALLERowChangeEventHandler
        
        Public Event COTIZA_DETALLERowChanged As COTIZA_DETALLERowChangeEventHandler
        
        Public Event COTIZA_DETALLERowDeleting As COTIZA_DETALLERowChangeEventHandler
        
        Public Event COTIZA_DETALLERowDeleted As COTIZA_DETALLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_DETALLERow(ByVal row As COTIZA_DETALLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_DETALLERow(ByVal COT_NUMERO As Double, ByVal CTD_ANALISIS As Double, ByVal CTD_CANTIDAD As Integer, ByVal CTD_UNITARIO As Integer, ByVal CTD_SUBTOTAL As Integer, ByVal CTD_DESCUENTO As Double, ByVal CTD_TOTAL As Integer, ByVal ANA_ANALISIS As String, ByVal CTD_MUESTRA As String) As COTIZA_DETALLERow
            Dim rowCOTIZA_DETALLERow As COTIZA_DETALLERow = CType(Me.NewRow,COTIZA_DETALLERow)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, CTD_ANALISIS, CTD_CANTIDAD, CTD_UNITARIO, CTD_SUBTOTAL, CTD_DESCUENTO, CTD_TOTAL, ANA_ANALISIS, CTD_MUESTRA}
            rowCOTIZA_DETALLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_DETALLERow)
            Return rowCOTIZA_DETALLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOT_NUMEROCTD_ANALISIS(ByVal COT_NUMERO As Double, ByVal CTD_ANALISIS As Double) As COTIZA_DETALLERow
            Return CType(Me.Rows.Find(New Object() {COT_NUMERO, CTD_ANALISIS}),COTIZA_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_DETALLEDataTable = CType(MyBase.Clone,COTIZA_DETALLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_DETALLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCTD_ANALISIS = MyBase.Columns("CTD_ANALISIS")
            Me.columnCTD_CANTIDAD = MyBase.Columns("CTD_CANTIDAD")
            Me.columnCTD_UNITARIO = MyBase.Columns("CTD_UNITARIO")
            Me.columnCTD_SUBTOTAL = MyBase.Columns("CTD_SUBTOTAL")
            Me.columnCTD_DESCUENTO = MyBase.Columns("CTD_DESCUENTO")
            Me.columnCTD_TOTAL = MyBase.Columns("CTD_TOTAL")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnCTD_MUESTRA = MyBase.Columns("CTD_MUESTRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCTD_ANALISIS = New Global.System.Data.DataColumn("CTD_ANALISIS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_ANALISIS)
            Me.columnCTD_CANTIDAD = New Global.System.Data.DataColumn("CTD_CANTIDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_CANTIDAD)
            Me.columnCTD_UNITARIO = New Global.System.Data.DataColumn("CTD_UNITARIO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_UNITARIO)
            Me.columnCTD_SUBTOTAL = New Global.System.Data.DataColumn("CTD_SUBTOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_SUBTOTAL)
            Me.columnCTD_DESCUENTO = New Global.System.Data.DataColumn("CTD_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_DESCUENTO)
            Me.columnCTD_TOTAL = New Global.System.Data.DataColumn("CTD_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_TOTAL)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnCTD_MUESTRA = New Global.System.Data.DataColumn("CTD_MUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_MUESTRA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey1", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO, Me.columnCTD_ANALISIS}, true))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCTD_ANALISIS.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_DETALLERow() As COTIZA_DETALLERow
            Return CType(Me.NewRow,COTIZA_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_DETALLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_DETALLERowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLERowChanged(Me, New COTIZA_DETALLERowChangeEvent(CType(e.Row,COTIZA_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_DETALLERowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLERowChanging(Me, New COTIZA_DETALLERowChangeEvent(CType(e.Row,COTIZA_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_DETALLERowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLERowDeleted(Me, New COTIZA_DETALLERowChangeEvent(CType(e.Row,COTIZA_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_DETALLERowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLERowDeleting(Me, New COTIZA_DETALLERowChangeEvent(CType(e.Row,COTIZA_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_DETALLERow(ByVal row As COTIZA_DETALLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_DETALLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_DETALLE1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCTD_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTD_CANTIDAD As Global.System.Data.DataColumn
        
        Private columnCTD_UNITARIO As Global.System.Data.DataColumn
        
        Private columnCTD_SUBTOTAL As Global.System.Data.DataColumn
        
        Private columnCTD_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTD_TOTAL As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTD_MUESTRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_DETALLE1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_CANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_SUBTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_SUBTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_MUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_MUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_DETALLE1Row
            Get
                Return CType(Me.Rows(index),COTIZA_DETALLE1Row)
            End Get
        End Property
        
        Public Event COTIZA_DETALLE1RowChanging As COTIZA_DETALLE1RowChangeEventHandler
        
        Public Event COTIZA_DETALLE1RowChanged As COTIZA_DETALLE1RowChangeEventHandler
        
        Public Event COTIZA_DETALLE1RowDeleting As COTIZA_DETALLE1RowChangeEventHandler
        
        Public Event COTIZA_DETALLE1RowDeleted As COTIZA_DETALLE1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_DETALLE1Row(ByVal row As COTIZA_DETALLE1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_DETALLE1Row(ByVal COT_NUMERO As Double, ByVal CTD_ANALISIS As Double, ByVal CTD_CANTIDAD As Integer, ByVal CTD_UNITARIO As Integer, ByVal CTD_SUBTOTAL As Integer, ByVal CTD_DESCUENTO As Double, ByVal CTD_TOTAL As Integer, ByVal ANA_ANALISIS As String, ByVal CTD_MUESTRA As String) As COTIZA_DETALLE1Row
            Dim rowCOTIZA_DETALLE1Row As COTIZA_DETALLE1Row = CType(Me.NewRow,COTIZA_DETALLE1Row)
            Dim columnValuesArray() As Object = New Object() {COT_NUMERO, CTD_ANALISIS, CTD_CANTIDAD, CTD_UNITARIO, CTD_SUBTOTAL, CTD_DESCUENTO, CTD_TOTAL, ANA_ANALISIS, CTD_MUESTRA}
            rowCOTIZA_DETALLE1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_DETALLE1Row)
            Return rowCOTIZA_DETALLE1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOT_NUMEROCTD_ANALISIS(ByVal COT_NUMERO As Double, ByVal CTD_ANALISIS As Double) As COTIZA_DETALLE1Row
            Return CType(Me.Rows.Find(New Object() {COT_NUMERO, CTD_ANALISIS}),COTIZA_DETALLE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_DETALLE1DataTable = CType(MyBase.Clone,COTIZA_DETALLE1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_DETALLE1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnCTD_ANALISIS = MyBase.Columns("CTD_ANALISIS")
            Me.columnCTD_CANTIDAD = MyBase.Columns("CTD_CANTIDAD")
            Me.columnCTD_UNITARIO = MyBase.Columns("CTD_UNITARIO")
            Me.columnCTD_SUBTOTAL = MyBase.Columns("CTD_SUBTOTAL")
            Me.columnCTD_DESCUENTO = MyBase.Columns("CTD_DESCUENTO")
            Me.columnCTD_TOTAL = MyBase.Columns("CTD_TOTAL")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnCTD_MUESTRA = MyBase.Columns("CTD_MUESTRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnCTD_ANALISIS = New Global.System.Data.DataColumn("CTD_ANALISIS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_ANALISIS)
            Me.columnCTD_CANTIDAD = New Global.System.Data.DataColumn("CTD_CANTIDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_CANTIDAD)
            Me.columnCTD_UNITARIO = New Global.System.Data.DataColumn("CTD_UNITARIO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_UNITARIO)
            Me.columnCTD_SUBTOTAL = New Global.System.Data.DataColumn("CTD_SUBTOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_SUBTOTAL)
            Me.columnCTD_DESCUENTO = New Global.System.Data.DataColumn("CTD_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_DESCUENTO)
            Me.columnCTD_TOTAL = New Global.System.Data.DataColumn("CTD_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_TOTAL)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnCTD_MUESTRA = New Global.System.Data.DataColumn("CTD_MUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_MUESTRA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey10", New Global.System.Data.DataColumn() {Me.columnCOT_NUMERO, Me.columnCTD_ANALISIS}, true))
            Me.columnCOT_NUMERO.AllowDBNull = false
            Me.columnCTD_ANALISIS.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_DETALLE1Row() As COTIZA_DETALLE1Row
            Return CType(Me.NewRow,COTIZA_DETALLE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_DETALLE1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_DETALLE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_DETALLE1RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE1RowChanged(Me, New COTIZA_DETALLE1RowChangeEvent(CType(e.Row,COTIZA_DETALLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_DETALLE1RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE1RowChanging(Me, New COTIZA_DETALLE1RowChangeEvent(CType(e.Row,COTIZA_DETALLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_DETALLE1RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE1RowDeleted(Me, New COTIZA_DETALLE1RowChangeEvent(CType(e.Row,COTIZA_DETALLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_DETALLE1RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE1RowDeleting(Me, New COTIZA_DETALLE1RowChangeEvent(CType(e.Row,COTIZA_DETALLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_DETALLE1Row(ByVal row As COTIZA_DETALLE1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_DETALLE1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISISRow
            Get
                Return CType(Me.Rows(index),ANALISISRow)
            End Get
        End Property
        
        Public Event ANALISISRowChanging As ANALISISRowChangeEventHandler
        
        Public Event ANALISISRowChanged As ANALISISRowChangeEventHandler
        
        Public Event ANALISISRowDeleting As ANALISISRowChangeEventHandler
        
        Public Event ANALISISRowDeleted As ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISISRow(ByVal row As ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISISRow(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISISRow
            Dim rowANALISISRow As ANALISISRow = CType(Me.NewRow,ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISISRow)
            Return rowANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISISRow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISISDataTable = CType(MyBase.Clone,ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey26", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISISRow() As ANALISISRow
            Return CType(Me.NewRow,ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISISRowChanged(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISISRowChanging(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISISRowDeleted(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISISRowDeleting(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISISRow(ByVal row As ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SUBMUESTRADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_DESCRIPCION As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SUBMUESTRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SUBMUESTRARow
            Get
                Return CType(Me.Rows(index),SUBMUESTRARow)
            End Get
        End Property
        
        Public Event SUBMUESTRARowChanging As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowChanged As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowDeleting As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowDeleted As SUBMUESTRARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSUBMUESTRARow(ByVal row As SUBMUESTRARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSUBMUESTRARow(ByVal SUB_CODIGO As Integer, ByVal SUB_DESCRIPCION As String, ByVal TMU_CODIGO As Integer) As SUBMUESTRARow
            Dim rowSUBMUESTRARow As SUBMUESTRARow = CType(Me.NewRow,SUBMUESTRARow)
            Dim columnValuesArray() As Object = New Object() {SUB_CODIGO, SUB_DESCRIPCION, TMU_CODIGO}
            rowSUBMUESTRARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSUBMUESTRARow)
            Return rowSUBMUESTRARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySUB_CODIGO(ByVal SUB_CODIGO As Integer) As SUBMUESTRARow
            Return CType(Me.Rows.Find(New Object() {SUB_CODIGO}),SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SUBMUESTRADataTable = CType(MyBase.Clone,SUBMUESTRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SUBMUESTRADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnSUB_DESCRIPCION = MyBase.Columns("SUB_DESCRIPCION")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnSUB_DESCRIPCION = New Global.System.Data.DataColumn("SUB_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_DESCRIPCION)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey27", New Global.System.Data.DataColumn() {Me.columnSUB_CODIGO}, true))
            Me.columnSUB_CODIGO.AllowDBNull = false
            Me.columnSUB_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSUBMUESTRARow() As SUBMUESTRARow
            Return CType(Me.NewRow,SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SUBMUESTRARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SUBMUESTRARowChangedEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowChanged(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SUBMUESTRARowChangingEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowChanging(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SUBMUESTRARowDeletedEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowDeleted(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SUBMUESTRARowDeletingEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowDeleting(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSUBMUESTRARow(ByVal row As SUBMUESTRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SUBMUESTRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MUESTRADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnTMU_MUESTRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MUESTRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_MUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_MUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MUESTRARow
            Get
                Return CType(Me.Rows(index),MUESTRARow)
            End Get
        End Property
        
        Public Event MUESTRARowChanging As MUESTRARowChangeEventHandler
        
        Public Event MUESTRARowChanged As MUESTRARowChangeEventHandler
        
        Public Event MUESTRARowDeleting As MUESTRARowChangeEventHandler
        
        Public Event MUESTRARowDeleted As MUESTRARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMUESTRARow(ByVal row As MUESTRARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMUESTRARow(ByVal TMU_CODIGO As Double, ByVal TMU_MUESTRA As String) As MUESTRARow
            Dim rowMUESTRARow As MUESTRARow = CType(Me.NewRow,MUESTRARow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, TMU_MUESTRA}
            rowMUESTRARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMUESTRARow)
            Return rowMUESTRARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTMU_CODIGO(ByVal TMU_CODIGO As Double) As MUESTRARow
            Return CType(Me.Rows.Find(New Object() {TMU_CODIGO}),MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MUESTRADataTable = CType(MyBase.Clone,MUESTRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MUESTRADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnTMU_MUESTRA = MyBase.Columns("TMU_MUESTRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnTMU_MUESTRA = New Global.System.Data.DataColumn("TMU_MUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_MUESTRA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey22", New Global.System.Data.DataColumn() {Me.columnTMU_CODIGO}, true))
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnTMU_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMUESTRARow() As MUESTRARow
            Return CType(Me.NewRow,MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MUESTRARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MUESTRARowChangedEvent) Is Nothing) Then
                RaiseEvent MUESTRARowChanged(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MUESTRARowChangingEvent) Is Nothing) Then
                RaiseEvent MUESTRARowChanging(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MUESTRARowDeletedEvent) Is Nothing) Then
                RaiseEvent MUESTRARowDeleted(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MUESTRARowDeletingEvent) Is Nothing) Then
                RaiseEvent MUESTRARowDeleting(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMUESTRARow(ByVal row As MUESTRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MUESTRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS14DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS14"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS14Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS14Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS14RowChanging As COTIZA_ANALISIS14RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS14RowChanged As COTIZA_ANALISIS14RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS14RowDeleting As COTIZA_ANALISIS14RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS14RowDeleted As COTIZA_ANALISIS14RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS14Row(ByVal row As COTIZA_ANALISIS14Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS14Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS14Row
            Dim rowCOTIZA_ANALISIS14Row As COTIZA_ANALISIS14Row = CType(Me.NewRow,COTIZA_ANALISIS14Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS14Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS14Row)
            Return rowCOTIZA_ANALISIS14Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS14Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS14Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS14DataTable = CType(MyBase.Clone,COTIZA_ANALISIS14DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS14DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey28", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS14Row() As COTIZA_ANALISIS14Row
            Return CType(Me.NewRow,COTIZA_ANALISIS14Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS14Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS14Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS14RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS14RowChanged(Me, New COTIZA_ANALISIS14RowChangeEvent(CType(e.Row,COTIZA_ANALISIS14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS14RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS14RowChanging(Me, New COTIZA_ANALISIS14RowChangeEvent(CType(e.Row,COTIZA_ANALISIS14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS14RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS14RowDeleted(Me, New COTIZA_ANALISIS14RowChangeEvent(CType(e.Row,COTIZA_ANALISIS14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS14RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS14RowDeleting(Me, New COTIZA_ANALISIS14RowChangeEvent(CType(e.Row,COTIZA_ANALISIS14Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS14Row(ByVal row As COTIZA_ANALISIS14Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS14DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS15DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS15"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS15Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS15Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS15RowChanging As COTIZA_ANALISIS15RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS15RowChanged As COTIZA_ANALISIS15RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS15RowDeleting As COTIZA_ANALISIS15RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS15RowDeleted As COTIZA_ANALISIS15RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS15Row(ByVal row As COTIZA_ANALISIS15Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS15Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS15Row
            Dim rowCOTIZA_ANALISIS15Row As COTIZA_ANALISIS15Row = CType(Me.NewRow,COTIZA_ANALISIS15Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS15Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS15Row)
            Return rowCOTIZA_ANALISIS15Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS15Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS15DataTable = CType(MyBase.Clone,COTIZA_ANALISIS15DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS15DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey29", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS15Row() As COTIZA_ANALISIS15Row
            Return CType(Me.NewRow,COTIZA_ANALISIS15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS15Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS15Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS15RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS15RowChanged(Me, New COTIZA_ANALISIS15RowChangeEvent(CType(e.Row,COTIZA_ANALISIS15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS15RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS15RowChanging(Me, New COTIZA_ANALISIS15RowChangeEvent(CType(e.Row,COTIZA_ANALISIS15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS15RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS15RowDeleted(Me, New COTIZA_ANALISIS15RowChangeEvent(CType(e.Row,COTIZA_ANALISIS15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS15RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS15RowDeleting(Me, New COTIZA_ANALISIS15RowChangeEvent(CType(e.Row,COTIZA_ANALISIS15Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS15Row(ByVal row As COTIZA_ANALISIS15Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS15DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LISTADO_DETALLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LISTADO_DETALLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LISTADO_DETALLERow
            Get
                Return CType(Me.Rows(index),LISTADO_DETALLERow)
            End Get
        End Property
        
        Public Event LISTADO_DETALLERowChanging As LISTADO_DETALLERowChangeEventHandler
        
        Public Event LISTADO_DETALLERowChanged As LISTADO_DETALLERowChangeEventHandler
        
        Public Event LISTADO_DETALLERowDeleting As LISTADO_DETALLERowChangeEventHandler
        
        Public Event LISTADO_DETALLERowDeleted As LISTADO_DETALLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLISTADO_DETALLERow(ByVal row As LISTADO_DETALLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLISTADO_DETALLERow(ByVal ANA_CODIGO As String) As LISTADO_DETALLERow
            Dim rowLISTADO_DETALLERow As LISTADO_DETALLERow = CType(Me.NewRow,LISTADO_DETALLERow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO}
            rowLISTADO_DETALLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLISTADO_DETALLERow)
            Return rowLISTADO_DETALLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As String) As LISTADO_DETALLERow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),LISTADO_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LISTADO_DETALLEDataTable = CType(MyBase.Clone,LISTADO_DETALLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LISTADO_DETALLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey31", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLISTADO_DETALLERow() As LISTADO_DETALLERow
            Return CType(Me.NewRow,LISTADO_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LISTADO_DETALLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LISTADO_DETALLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LISTADO_DETALLERowChangedEvent) Is Nothing) Then
                RaiseEvent LISTADO_DETALLERowChanged(Me, New LISTADO_DETALLERowChangeEvent(CType(e.Row,LISTADO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LISTADO_DETALLERowChangingEvent) Is Nothing) Then
                RaiseEvent LISTADO_DETALLERowChanging(Me, New LISTADO_DETALLERowChangeEvent(CType(e.Row,LISTADO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LISTADO_DETALLERowDeletedEvent) Is Nothing) Then
                RaiseEvent LISTADO_DETALLERowDeleted(Me, New LISTADO_DETALLERowChangeEvent(CType(e.Row,LISTADO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LISTADO_DETALLERowDeletingEvent) Is Nothing) Then
                RaiseEvent LISTADO_DETALLERowDeleting(Me, New LISTADO_DETALLERowChangeEvent(CType(e.Row,LISTADO_DETALLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLISTADO_DETALLERow(ByVal row As LISTADO_DETALLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LISTADO_DETALLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS16DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS16"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS16Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS16Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS16RowChanging As COTIZA_ANALISIS16RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS16RowChanged As COTIZA_ANALISIS16RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS16RowDeleting As COTIZA_ANALISIS16RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS16RowDeleted As COTIZA_ANALISIS16RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS16Row(ByVal row As COTIZA_ANALISIS16Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS16Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS16Row
            Dim rowCOTIZA_ANALISIS16Row As COTIZA_ANALISIS16Row = CType(Me.NewRow,COTIZA_ANALISIS16Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS16Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS16Row)
            Return rowCOTIZA_ANALISIS16Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS16Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS16Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS16DataTable = CType(MyBase.Clone,COTIZA_ANALISIS16DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS16DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey33", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS16Row() As COTIZA_ANALISIS16Row
            Return CType(Me.NewRow,COTIZA_ANALISIS16Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS16Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS16Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS16RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS16RowChanged(Me, New COTIZA_ANALISIS16RowChangeEvent(CType(e.Row,COTIZA_ANALISIS16Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS16RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS16RowChanging(Me, New COTIZA_ANALISIS16RowChangeEvent(CType(e.Row,COTIZA_ANALISIS16Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS16RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS16RowDeleted(Me, New COTIZA_ANALISIS16RowChangeEvent(CType(e.Row,COTIZA_ANALISIS16Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS16RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS16RowDeleting(Me, New COTIZA_ANALISIS16RowChangeEvent(CType(e.Row,COTIZA_ANALISIS16Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS16Row(ByVal row As COTIZA_ANALISIS16Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS16DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COMBO_COTIZADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COMBO_COTIZA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMBO_COTIZARow
            Get
                Return CType(Me.Rows(index),COMBO_COTIZARow)
            End Get
        End Property
        
        Public Event COMBO_COTIZARowChanging As COMBO_COTIZARowChangeEventHandler
        
        Public Event COMBO_COTIZARowChanged As COMBO_COTIZARowChangeEventHandler
        
        Public Event COMBO_COTIZARowDeleting As COMBO_COTIZARowChangeEventHandler
        
        Public Event COMBO_COTIZARowDeleted As COMBO_COTIZARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOMBO_COTIZARow(ByVal row As COMBO_COTIZARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOMBO_COTIZARow(ByVal COB_CODIGO As Double, ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String) As COMBO_COTIZARow
            Dim rowCOMBO_COTIZARow As COMBO_COTIZARow = CType(Me.NewRow,COMBO_COTIZARow)
            Dim columnValuesArray() As Object = New Object() {COB_CODIGO, ANA_CODIGO, ANA_ANALISIS}
            rowCOMBO_COTIZARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOMBO_COTIZARow)
            Return rowCOMBO_COTIZARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOB_CODIGOANA_CODIGO(ByVal COB_CODIGO As Double, ByVal ANA_CODIGO As Double) As COMBO_COTIZARow
            Return CType(Me.Rows.Find(New Object() {COB_CODIGO, ANA_CODIGO}),COMBO_COTIZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COMBO_COTIZADataTable = CType(MyBase.Clone,COMBO_COTIZADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COMBO_COTIZADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOB_CODIGO = MyBase.Columns("COB_CODIGO")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOB_CODIGO = New Global.System.Data.DataColumn("COB_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOB_CODIGO)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey34", New Global.System.Data.DataColumn() {Me.columnCOB_CODIGO, Me.columnANA_CODIGO}, true))
            Me.columnCOB_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOMBO_COTIZARow() As COMBO_COTIZARow
            Return CType(Me.NewRow,COMBO_COTIZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COMBO_COTIZARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COMBO_COTIZARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMBO_COTIZARowChangedEvent) Is Nothing) Then
                RaiseEvent COMBO_COTIZARowChanged(Me, New COMBO_COTIZARowChangeEvent(CType(e.Row,COMBO_COTIZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMBO_COTIZARowChangingEvent) Is Nothing) Then
                RaiseEvent COMBO_COTIZARowChanging(Me, New COMBO_COTIZARowChangeEvent(CType(e.Row,COMBO_COTIZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMBO_COTIZARowDeletedEvent) Is Nothing) Then
                RaiseEvent COMBO_COTIZARowDeleted(Me, New COMBO_COTIZARowChangeEvent(CType(e.Row,COMBO_COTIZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMBO_COTIZARowDeletingEvent) Is Nothing) Then
                RaiseEvent COMBO_COTIZARowDeleting(Me, New COMBO_COTIZARowChangeEvent(CType(e.Row,COMBO_COTIZARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOMBO_COTIZARow(ByVal row As COMBO_COTIZARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COMBO_COTIZADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_COMUNASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_COMUNA As Global.System.Data.DataColumn
        
        Private columnCOD_CIUDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_COMUNAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_COMUNASRow
            Get
                Return CType(Me.Rows(index),COTIZA_COMUNASRow)
            End Get
        End Property
        
        Public Event COTIZA_COMUNASRowChanging As COTIZA_COMUNASRowChangeEventHandler
        
        Public Event COTIZA_COMUNASRowChanged As COTIZA_COMUNASRowChangeEventHandler
        
        Public Event COTIZA_COMUNASRowDeleting As COTIZA_COMUNASRowChangeEventHandler
        
        Public Event COTIZA_COMUNASRowDeleted As COTIZA_COMUNASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_COMUNASRow(ByVal row As COTIZA_COMUNASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_COMUNASRow(ByVal COD_COMUNA As String, ByVal COD_CIUDAD As String) As COTIZA_COMUNASRow
            Dim rowCOTIZA_COMUNASRow As COTIZA_COMUNASRow = CType(Me.NewRow,COTIZA_COMUNASRow)
            Dim columnValuesArray() As Object = New Object() {COD_COMUNA, COD_CIUDAD}
            rowCOTIZA_COMUNASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_COMUNASRow)
            Return rowCOTIZA_COMUNASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_COMUNA(ByVal COD_COMUNA As String) As COTIZA_COMUNASRow
            Return CType(Me.Rows.Find(New Object() {COD_COMUNA}),COTIZA_COMUNASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_COMUNASDataTable = CType(MyBase.Clone,COTIZA_COMUNASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_COMUNASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_COMUNA = MyBase.Columns("COD_COMUNA")
            Me.columnCOD_CIUDAD = MyBase.Columns("COD_CIUDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_COMUNA = New Global.System.Data.DataColumn("COD_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMUNA)
            Me.columnCOD_CIUDAD = New Global.System.Data.DataColumn("COD_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CIUDAD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey20", New Global.System.Data.DataColumn() {Me.columnCOD_COMUNA}, true))
            Me.columnCOD_COMUNA.AllowDBNull = false
            Me.columnCOD_COMUNA.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_COMUNASRow() As COTIZA_COMUNASRow
            Return CType(Me.NewRow,COTIZA_COMUNASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_COMUNASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_COMUNASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_COMUNASRowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNASRowChanged(Me, New COTIZA_COMUNASRowChangeEvent(CType(e.Row,COTIZA_COMUNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_COMUNASRowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNASRowChanging(Me, New COTIZA_COMUNASRowChangeEvent(CType(e.Row,COTIZA_COMUNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_COMUNASRowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNASRowDeleted(Me, New COTIZA_COMUNASRowChangeEvent(CType(e.Row,COTIZA_COMUNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_COMUNASRowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNASRowDeleting(Me, New COTIZA_COMUNASRowChangeEvent(CType(e.Row,COTIZA_COMUNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_COMUNASRow(ByVal row As COTIZA_COMUNASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_COMUNASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_COMUNAS1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_COMUNA As Global.System.Data.DataColumn
        
        Private columnCOD_CIUDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_COMUNAS1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_COMUNAS1Row
            Get
                Return CType(Me.Rows(index),COTIZA_COMUNAS1Row)
            End Get
        End Property
        
        Public Event COTIZA_COMUNAS1RowChanging As COTIZA_COMUNAS1RowChangeEventHandler
        
        Public Event COTIZA_COMUNAS1RowChanged As COTIZA_COMUNAS1RowChangeEventHandler
        
        Public Event COTIZA_COMUNAS1RowDeleting As COTIZA_COMUNAS1RowChangeEventHandler
        
        Public Event COTIZA_COMUNAS1RowDeleted As COTIZA_COMUNAS1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_COMUNAS1Row(ByVal row As COTIZA_COMUNAS1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_COMUNAS1Row(ByVal COD_COMUNA As String, ByVal COD_CIUDAD As String) As COTIZA_COMUNAS1Row
            Dim rowCOTIZA_COMUNAS1Row As COTIZA_COMUNAS1Row = CType(Me.NewRow,COTIZA_COMUNAS1Row)
            Dim columnValuesArray() As Object = New Object() {COD_COMUNA, COD_CIUDAD}
            rowCOTIZA_COMUNAS1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_COMUNAS1Row)
            Return rowCOTIZA_COMUNAS1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_COMUNA(ByVal COD_COMUNA As String) As COTIZA_COMUNAS1Row
            Return CType(Me.Rows.Find(New Object() {COD_COMUNA}),COTIZA_COMUNAS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_COMUNAS1DataTable = CType(MyBase.Clone,COTIZA_COMUNAS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_COMUNAS1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_COMUNA = MyBase.Columns("COD_COMUNA")
            Me.columnCOD_CIUDAD = MyBase.Columns("COD_CIUDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_COMUNA = New Global.System.Data.DataColumn("COD_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMUNA)
            Me.columnCOD_CIUDAD = New Global.System.Data.DataColumn("COD_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CIUDAD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey16", New Global.System.Data.DataColumn() {Me.columnCOD_COMUNA}, true))
            Me.columnCOD_COMUNA.AllowDBNull = false
            Me.columnCOD_COMUNA.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_COMUNAS1Row() As COTIZA_COMUNAS1Row
            Return CType(Me.NewRow,COTIZA_COMUNAS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_COMUNAS1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_COMUNAS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_COMUNAS1RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS1RowChanged(Me, New COTIZA_COMUNAS1RowChangeEvent(CType(e.Row,COTIZA_COMUNAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_COMUNAS1RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS1RowChanging(Me, New COTIZA_COMUNAS1RowChangeEvent(CType(e.Row,COTIZA_COMUNAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_COMUNAS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS1RowDeleted(Me, New COTIZA_COMUNAS1RowChangeEvent(CType(e.Row,COTIZA_COMUNAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_COMUNAS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS1RowDeleting(Me, New COTIZA_COMUNAS1RowChangeEvent(CType(e.Row,COTIZA_COMUNAS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_COMUNAS1Row(ByVal row As COTIZA_COMUNAS1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_COMUNAS1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_COMUNAS2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_COMUNA As Global.System.Data.DataColumn
        
        Private columnCOD_CIUDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_COMUNAS2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_COMUNAS2Row
            Get
                Return CType(Me.Rows(index),COTIZA_COMUNAS2Row)
            End Get
        End Property
        
        Public Event COTIZA_COMUNAS2RowChanging As COTIZA_COMUNAS2RowChangeEventHandler
        
        Public Event COTIZA_COMUNAS2RowChanged As COTIZA_COMUNAS2RowChangeEventHandler
        
        Public Event COTIZA_COMUNAS2RowDeleting As COTIZA_COMUNAS2RowChangeEventHandler
        
        Public Event COTIZA_COMUNAS2RowDeleted As COTIZA_COMUNAS2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_COMUNAS2Row(ByVal row As COTIZA_COMUNAS2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_COMUNAS2Row(ByVal COD_COMUNA As String, ByVal COD_CIUDAD As String) As COTIZA_COMUNAS2Row
            Dim rowCOTIZA_COMUNAS2Row As COTIZA_COMUNAS2Row = CType(Me.NewRow,COTIZA_COMUNAS2Row)
            Dim columnValuesArray() As Object = New Object() {COD_COMUNA, COD_CIUDAD}
            rowCOTIZA_COMUNAS2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_COMUNAS2Row)
            Return rowCOTIZA_COMUNAS2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_COMUNA(ByVal COD_COMUNA As String) As COTIZA_COMUNAS2Row
            Return CType(Me.Rows.Find(New Object() {COD_COMUNA}),COTIZA_COMUNAS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_COMUNAS2DataTable = CType(MyBase.Clone,COTIZA_COMUNAS2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_COMUNAS2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_COMUNA = MyBase.Columns("COD_COMUNA")
            Me.columnCOD_CIUDAD = MyBase.Columns("COD_CIUDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_COMUNA = New Global.System.Data.DataColumn("COD_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMUNA)
            Me.columnCOD_CIUDAD = New Global.System.Data.DataColumn("COD_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CIUDAD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey32", New Global.System.Data.DataColumn() {Me.columnCOD_COMUNA}, true))
            Me.columnCOD_COMUNA.AllowDBNull = false
            Me.columnCOD_COMUNA.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_COMUNAS2Row() As COTIZA_COMUNAS2Row
            Return CType(Me.NewRow,COTIZA_COMUNAS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_COMUNAS2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_COMUNAS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_COMUNAS2RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS2RowChanged(Me, New COTIZA_COMUNAS2RowChangeEvent(CType(e.Row,COTIZA_COMUNAS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_COMUNAS2RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS2RowChanging(Me, New COTIZA_COMUNAS2RowChangeEvent(CType(e.Row,COTIZA_COMUNAS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_COMUNAS2RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS2RowDeleted(Me, New COTIZA_COMUNAS2RowChangeEvent(CType(e.Row,COTIZA_COMUNAS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_COMUNAS2RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_COMUNAS2RowDeleting(Me, New COTIZA_COMUNAS2RowChangeEvent(CType(e.Row,COTIZA_COMUNAS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_COMUNAS2Row(ByVal row As COTIZA_COMUNAS2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_COMUNAS2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_DETALLE_ORDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCTD_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTD_CANTIDAD As Global.System.Data.DataColumn
        
        Private columnCTD_UNITARIO As Global.System.Data.DataColumn
        
        Private columnCTD_SUBTOTAL As Global.System.Data.DataColumn
        
        Private columnCTD_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTD_TOTAL As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnCTD_MUESTRA As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_DETALLE_ORD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_CANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_UNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_SUBTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_SUBTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTD_MUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTD_MUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_DETALLE_ORDRow
            Get
                Return CType(Me.Rows(index),COTIZA_DETALLE_ORDRow)
            End Get
        End Property
        
        Public Event COTIZA_DETALLE_ORDRowChanging As COTIZA_DETALLE_ORDRowChangeEventHandler
        
        Public Event COTIZA_DETALLE_ORDRowChanged As COTIZA_DETALLE_ORDRowChangeEventHandler
        
        Public Event COTIZA_DETALLE_ORDRowDeleting As COTIZA_DETALLE_ORDRowChangeEventHandler
        
        Public Event COTIZA_DETALLE_ORDRowDeleted As COTIZA_DETALLE_ORDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_DETALLE_ORDRow(ByVal row As COTIZA_DETALLE_ORDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_DETALLE_ORDRow(ByVal CTD_ANALISIS As Double, ByVal CTD_CANTIDAD As Integer, ByVal CTD_UNITARIO As Integer, ByVal CTD_SUBTOTAL As Integer, ByVal CTD_DESCUENTO As Double, ByVal CTD_TOTAL As Integer, ByVal ANA_ANALISIS As String, ByVal CTD_MUESTRA As String, ByVal ANA_NIVEL_PRECIO As String) As COTIZA_DETALLE_ORDRow
            Dim rowCOTIZA_DETALLE_ORDRow As COTIZA_DETALLE_ORDRow = CType(Me.NewRow,COTIZA_DETALLE_ORDRow)
            Dim columnValuesArray() As Object = New Object() {CTD_ANALISIS, CTD_CANTIDAD, CTD_UNITARIO, CTD_SUBTOTAL, CTD_DESCUENTO, CTD_TOTAL, ANA_ANALISIS, CTD_MUESTRA, ANA_NIVEL_PRECIO}
            rowCOTIZA_DETALLE_ORDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_DETALLE_ORDRow)
            Return rowCOTIZA_DETALLE_ORDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCTD_ANALISIS(ByVal CTD_ANALISIS As Double) As COTIZA_DETALLE_ORDRow
            Return CType(Me.Rows.Find(New Object() {CTD_ANALISIS}),COTIZA_DETALLE_ORDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_DETALLE_ORDDataTable = CType(MyBase.Clone,COTIZA_DETALLE_ORDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_DETALLE_ORDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCTD_ANALISIS = MyBase.Columns("CTD_ANALISIS")
            Me.columnCTD_CANTIDAD = MyBase.Columns("CTD_CANTIDAD")
            Me.columnCTD_UNITARIO = MyBase.Columns("CTD_UNITARIO")
            Me.columnCTD_SUBTOTAL = MyBase.Columns("CTD_SUBTOTAL")
            Me.columnCTD_DESCUENTO = MyBase.Columns("CTD_DESCUENTO")
            Me.columnCTD_TOTAL = MyBase.Columns("CTD_TOTAL")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnCTD_MUESTRA = MyBase.Columns("CTD_MUESTRA")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCTD_ANALISIS = New Global.System.Data.DataColumn("CTD_ANALISIS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_ANALISIS)
            Me.columnCTD_CANTIDAD = New Global.System.Data.DataColumn("CTD_CANTIDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_CANTIDAD)
            Me.columnCTD_UNITARIO = New Global.System.Data.DataColumn("CTD_UNITARIO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_UNITARIO)
            Me.columnCTD_SUBTOTAL = New Global.System.Data.DataColumn("CTD_SUBTOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_SUBTOTAL)
            Me.columnCTD_DESCUENTO = New Global.System.Data.DataColumn("CTD_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_DESCUENTO)
            Me.columnCTD_TOTAL = New Global.System.Data.DataColumn("CTD_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_TOTAL)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnCTD_MUESTRA = New Global.System.Data.DataColumn("CTD_MUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTD_MUESTRA)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey35", New Global.System.Data.DataColumn() {Me.columnCTD_ANALISIS}, true))
            Me.columnCTD_ANALISIS.AllowDBNull = false
            Me.columnCTD_ANALISIS.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_DETALLE_ORDRow() As COTIZA_DETALLE_ORDRow
            Return CType(Me.NewRow,COTIZA_DETALLE_ORDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_DETALLE_ORDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_DETALLE_ORDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_DETALLE_ORDRowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE_ORDRowChanged(Me, New COTIZA_DETALLE_ORDRowChangeEvent(CType(e.Row,COTIZA_DETALLE_ORDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_DETALLE_ORDRowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE_ORDRowChanging(Me, New COTIZA_DETALLE_ORDRowChangeEvent(CType(e.Row,COTIZA_DETALLE_ORDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_DETALLE_ORDRowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE_ORDRowDeleted(Me, New COTIZA_DETALLE_ORDRowChangeEvent(CType(e.Row,COTIZA_DETALLE_ORDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_DETALLE_ORDRowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_DETALLE_ORDRowDeleting(Me, New COTIZA_DETALLE_ORDRowChangeEvent(CType(e.Row,COTIZA_DETALLE_ORDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_DETALLE_ORDRow(ByVal row As COTIZA_DETALLE_ORDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_DETALLE_ORDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS17DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS17"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS17Row
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS17Row)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS17RowChanging As COTIZA_ANALISIS17RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS17RowChanged As COTIZA_ANALISIS17RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS17RowDeleting As COTIZA_ANALISIS17RowChangeEventHandler
        
        Public Event COTIZA_ANALISIS17RowDeleted As COTIZA_ANALISIS17RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS17Row(ByVal row As COTIZA_ANALISIS17Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS17Row(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS17Row
            Dim rowCOTIZA_ANALISIS17Row As COTIZA_ANALISIS17Row = CType(Me.NewRow,COTIZA_ANALISIS17Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS17Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS17Row)
            Return rowCOTIZA_ANALISIS17Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS17Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS17Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS17DataTable = CType(MyBase.Clone,COTIZA_ANALISIS17DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS17DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey36", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS17Row() As COTIZA_ANALISIS17Row
            Return CType(Me.NewRow,COTIZA_ANALISIS17Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS17Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS17Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS17RowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS17RowChanged(Me, New COTIZA_ANALISIS17RowChangeEvent(CType(e.Row,COTIZA_ANALISIS17Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS17RowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS17RowChanging(Me, New COTIZA_ANALISIS17RowChangeEvent(CType(e.Row,COTIZA_ANALISIS17Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS17RowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS17RowDeleted(Me, New COTIZA_ANALISIS17RowChangeEvent(CType(e.Row,COTIZA_ANALISIS17Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS17RowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS17RowDeleting(Me, New COTIZA_ANALISIS17RowChangeEvent(CType(e.Row,COTIZA_ANALISIS17Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS17Row(ByVal row As COTIZA_ANALISIS17Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS17DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NOTA_PLANILLADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNPL_NOMBRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NOTA_PLANILLA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NPL_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNPL_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NOTA_PLANILLARow
            Get
                Return CType(Me.Rows(index),NOTA_PLANILLARow)
            End Get
        End Property
        
        Public Event NOTA_PLANILLARowChanging As NOTA_PLANILLARowChangeEventHandler
        
        Public Event NOTA_PLANILLARowChanged As NOTA_PLANILLARowChangeEventHandler
        
        Public Event NOTA_PLANILLARowDeleting As NOTA_PLANILLARowChangeEventHandler
        
        Public Event NOTA_PLANILLARowDeleted As NOTA_PLANILLARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNOTA_PLANILLARow(ByVal row As NOTA_PLANILLARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNOTA_PLANILLARow(ByVal NPL_NOMBRE As String) As NOTA_PLANILLARow
            Dim rowNOTA_PLANILLARow As NOTA_PLANILLARow = CType(Me.NewRow,NOTA_PLANILLARow)
            Dim columnValuesArray() As Object = New Object() {NPL_NOMBRE}
            rowNOTA_PLANILLARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNOTA_PLANILLARow)
            Return rowNOTA_PLANILLARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NOTA_PLANILLADataTable = CType(MyBase.Clone,NOTA_PLANILLADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NOTA_PLANILLADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNPL_NOMBRE = MyBase.Columns("NPL_NOMBRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNPL_NOMBRE = New Global.System.Data.DataColumn("NPL_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNPL_NOMBRE)
            Me.columnNPL_NOMBRE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNOTA_PLANILLARow() As NOTA_PLANILLARow
            Return CType(Me.NewRow,NOTA_PLANILLARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NOTA_PLANILLARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NOTA_PLANILLARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NOTA_PLANILLARowChangedEvent) Is Nothing) Then
                RaiseEvent NOTA_PLANILLARowChanged(Me, New NOTA_PLANILLARowChangeEvent(CType(e.Row,NOTA_PLANILLARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NOTA_PLANILLARowChangingEvent) Is Nothing) Then
                RaiseEvent NOTA_PLANILLARowChanging(Me, New NOTA_PLANILLARowChangeEvent(CType(e.Row,NOTA_PLANILLARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NOTA_PLANILLARowDeletedEvent) Is Nothing) Then
                RaiseEvent NOTA_PLANILLARowDeleted(Me, New NOTA_PLANILLARowChangeEvent(CType(e.Row,NOTA_PLANILLARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NOTA_PLANILLARowDeletingEvent) Is Nothing) Then
                RaiseEvent NOTA_PLANILLARowDeleting(Me, New NOTA_PLANILLARowChangeEvent(CType(e.Row,NOTA_PLANILLARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNOTA_PLANILLARow(ByVal row As NOTA_PLANILLARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NOTA_PLANILLADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTIZA_ANALISIS_BASEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnCTA_DESCUENTO As Global.System.Data.DataColumn
        
        Private columnCTA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTIZA_ANALISIS_BASE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_DESCUENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_DESCUENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTIZA_ANALISIS_BASERow
            Get
                Return CType(Me.Rows(index),COTIZA_ANALISIS_BASERow)
            End Get
        End Property
        
        Public Event COTIZA_ANALISIS_BASERowChanging As COTIZA_ANALISIS_BASERowChangeEventHandler
        
        Public Event COTIZA_ANALISIS_BASERowChanged As COTIZA_ANALISIS_BASERowChangeEventHandler
        
        Public Event COTIZA_ANALISIS_BASERowDeleting As COTIZA_ANALISIS_BASERowChangeEventHandler
        
        Public Event COTIZA_ANALISIS_BASERowDeleted As COTIZA_ANALISIS_BASERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTIZA_ANALISIS_BASERow(ByVal row As COTIZA_ANALISIS_BASERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTIZA_ANALISIS_BASERow(ByVal ANA_CODIGO As Double, ByVal ANA_NETO As Integer, ByVal CTA_DESCUENTO As Double, ByVal CTA_NETO As Integer, ByVal ANA_ANALISIS As String, ByVal ANA_NIVEL_PRECIO As String, ByVal CHEQUEO As String, ByVal TIPO_COD As String) As COTIZA_ANALISIS_BASERow
            Dim rowCOTIZA_ANALISIS_BASERow As COTIZA_ANALISIS_BASERow = CType(Me.NewRow,COTIZA_ANALISIS_BASERow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_NETO, CTA_DESCUENTO, CTA_NETO, ANA_ANALISIS, ANA_NIVEL_PRECIO, CHEQUEO, TIPO_COD}
            rowCOTIZA_ANALISIS_BASERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOTIZA_ANALISIS_BASERow)
            Return rowCOTIZA_ANALISIS_BASERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COTIZA_ANALISIS_BASERow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COTIZA_ANALISIS_BASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COTIZA_ANALISIS_BASEDataTable = CType(MyBase.Clone,COTIZA_ANALISIS_BASEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COTIZA_ANALISIS_BASEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnCTA_DESCUENTO = MyBase.Columns("CTA_DESCUENTO")
            Me.columnCTA_NETO = MyBase.Columns("CTA_NETO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnCTA_DESCUENTO = New Global.System.Data.DataColumn("CTA_DESCUENTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_DESCUENTO)
            Me.columnCTA_NETO = New Global.System.Data.DataColumn("CTA_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_NETO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_CotizacionKey38", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTIZA_ANALISIS_BASERow() As COTIZA_ANALISIS_BASERow
            Return CType(Me.NewRow,COTIZA_ANALISIS_BASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COTIZA_ANALISIS_BASERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COTIZA_ANALISIS_BASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTIZA_ANALISIS_BASERowChangedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS_BASERowChanged(Me, New COTIZA_ANALISIS_BASERowChangeEvent(CType(e.Row,COTIZA_ANALISIS_BASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTIZA_ANALISIS_BASERowChangingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS_BASERowChanging(Me, New COTIZA_ANALISIS_BASERowChangeEvent(CType(e.Row,COTIZA_ANALISIS_BASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTIZA_ANALISIS_BASERowDeletedEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS_BASERowDeleted(Me, New COTIZA_ANALISIS_BASERowChangeEvent(CType(e.Row,COTIZA_ANALISIS_BASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTIZA_ANALISIS_BASERowDeletingEvent) Is Nothing) Then
                RaiseEvent COTIZA_ANALISIS_BASERowDeleting(Me, New COTIZA_ANALISIS_BASERowChangeEvent(CType(e.Row,COTIZA_ANALISIS_BASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTIZA_ANALISIS_BASERow(ByVal row As COTIZA_ANALISIS_BASERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Cotizacion = New Cjto_Cotizacion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTIZA_ANALISIS_BASEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRODUCTORRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRODUCTOR As PRODUCTORDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODUCTOR = CType(Me.Table,PRODUCTORDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_RUT() As String
            Get
                Return CType(Me(Me.tablePRODUCTOR.PRO_RUTColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_NOMBRE() As String
            Get
                Return CType(Me(Me.tablePRODUCTOR.PRO_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_DIRECCION' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FONO1' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FONO2' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_CELULAR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_CELULARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_CELULAR' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_CELULARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FAX' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMAIL1' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMAIL2' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_CASILLA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_CASILLAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_CASILLA' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_CASILLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_DESCUENTO' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIU_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.CIU_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIU_NOMBRE' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.CIU_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOC_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.LOC_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOC_LOCALIDAD' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.LOC_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COM_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.COM_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COM_COMUNA' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.COM_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMPRESA' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_ATENCION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR.PRO_ATENCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_ATENCION' de la tabla 'PRODUCTOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR.PRO_ATENCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_DIRECCIONNull()
            Me(Me.tablePRODUCTOR.PRO_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FONO1Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FONO1Null()
            Me(Me.tablePRODUCTOR.PRO_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FONO2Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FONO2Null()
            Me(Me.tablePRODUCTOR.PRO_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_CELULARNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_CELULARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_CELULARNull()
            Me(Me.tablePRODUCTOR.PRO_CELULARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FAXNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FAXNull()
            Me(Me.tablePRODUCTOR.PRO_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMAIL1Null()
            Me(Me.tablePRODUCTOR.PRO_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMAIL2Null()
            Me(Me.tablePRODUCTOR.PRO_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_CASILLANull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_CASILLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_CASILLANull()
            Me(Me.tablePRODUCTOR.PRO_CASILLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_DESCUENTONull()
            Me(Me.tablePRODUCTOR.PRO_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIU_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.CIU_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIU_NOMBRENull()
            Me(Me.tablePRODUCTOR.CIU_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOC_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.LOC_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOC_LOCALIDADNull()
            Me(Me.tablePRODUCTOR.LOC_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOM_COMUNANull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.COM_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOM_COMUNANull()
            Me(Me.tablePRODUCTOR.COM_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMPRESANull()
            Me(Me.tablePRODUCTOR.PRO_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_ATENCIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR.PRO_ATENCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_ATENCIONNull()
            Me(Me.tablePRODUCTOR.PRO_ATENCIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS As COTIZA_ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS = CType(Me.Table,COTIZA_ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_ANALISIS() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS.CTD_ANALISISColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS.CTD_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_UNITARIO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS.CTA_UNITARIOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_UNITARIO' de la tabla 'COTIZA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS.CTA_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_UNITARIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS.CTA_UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_UNITARIONull()
            Me(Me.tableCOTIZA_ANALISIS.CTA_UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS1 As COTIZA_ANALISIS1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS1 = CType(Me.Table,COTIZA_ANALISIS1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS1.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS1.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS1.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS1.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS1.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS1.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS1' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS1.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS1.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS1.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS1.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS1.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS1.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS1.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS1.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS1.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS1.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS1.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS1.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS1.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS1.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS1.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS1.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS1.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_NOTASRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_NOTAS As COTIZA_NOTASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_NOTAS = CType(Me.Table,COTIZA_NOTASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_NOTAS.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CON_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableCOTIZA_NOTAS.CON_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS.CON_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOT_NOTAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_NOTAS.NOT_NOTASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOT_NOTAS' de la tabla 'COTIZA_NOTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS.NOT_NOTASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTA_COT_TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_NOTAS.NOTA_COT_TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTA_COT_TIPO' de la tabla 'COTIZA_NOTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS.NOTA_COT_TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOT_NOTASNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_NOTAS.NOT_NOTASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOT_NOTASNull()
            Me(Me.tableCOTIZA_NOTAS.NOT_NOTASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTA_COT_TIPONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_NOTAS.NOTA_COT_TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTA_COT_TIPONull()
            Me(Me.tableCOTIZA_NOTAS.NOTA_COT_TIPOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRODUCTOR1Row
        Inherits Global.System.Data.DataRow
        
        Private tablePRODUCTOR1 As PRODUCTOR1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODUCTOR1 = CType(Me.Table,PRODUCTOR1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_RUT() As String
            Get
                Return CType(Me(Me.tablePRODUCTOR1.PRO_RUTColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_NOMBRE() As String
            Get
                Return CType(Me(Me.tablePRODUCTOR1.PRO_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_DIRECCION' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FONO1' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FONO2' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_CELULAR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_CELULARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_CELULAR' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_CELULARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FAX' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMAIL1' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMAIL2' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_CASILLA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_CASILLAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_CASILLA' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_CASILLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_DESCUENTO' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIU_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.CIU_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIU_NOMBRE' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.CIU_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOC_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.LOC_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOC_LOCALIDAD' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.LOC_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COM_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.COM_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COM_COMUNA' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.COM_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_ATENCION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTOR1.PRO_ATENCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_ATENCION' de la tabla 'PRODUCTOR1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTOR1.PRO_ATENCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_DIRECCIONNull()
            Me(Me.tablePRODUCTOR1.PRO_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FONO1Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FONO1Null()
            Me(Me.tablePRODUCTOR1.PRO_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FONO2Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FONO2Null()
            Me(Me.tablePRODUCTOR1.PRO_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_CELULARNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_CELULARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_CELULARNull()
            Me(Me.tablePRODUCTOR1.PRO_CELULARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FAXNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FAXNull()
            Me(Me.tablePRODUCTOR1.PRO_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMAIL1Null()
            Me(Me.tablePRODUCTOR1.PRO_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMAIL2Null()
            Me(Me.tablePRODUCTOR1.PRO_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_CASILLANull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_CASILLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_CASILLANull()
            Me(Me.tablePRODUCTOR1.PRO_CASILLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_DESCUENTONull()
            Me(Me.tablePRODUCTOR1.PRO_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIU_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.CIU_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIU_NOMBRENull()
            Me(Me.tablePRODUCTOR1.CIU_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOC_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.LOC_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOC_LOCALIDADNull()
            Me(Me.tablePRODUCTOR1.LOC_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOM_COMUNANull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.COM_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOM_COMUNANull()
            Me(Me.tablePRODUCTOR1.COM_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_ATENCIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTOR1.PRO_ATENCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_ATENCIONNull()
            Me(Me.tablePRODUCTOR1.PRO_ATENCIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZACION1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZACION1 As COTIZACION1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZACION1 = CType(Me.Table,COTIZACION1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZACION1.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_RUT() As String
            Get
                Return CType(Me(Me.tableCOTIZACION1.COT_RUTColumn),String)
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_NOMBRE' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_EMAIL' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_ATENCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_ATENCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_ATENCION' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_ATENCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_DIRECCION' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_COMUNA' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_FONO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_FONOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_FONO' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_FONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_FAX' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_SUBTOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_SUBTOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_SUBTOTAL' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_SUBTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_DESCUENTO' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_NETO' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_IVA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_IVAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_IVA' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_TOTAL' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_FECHA' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_CELULAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_CELULARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_CELULAR' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_CELULARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_CIUDAD' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_EMPRESA' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_MUE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE1' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_MUE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_MUE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE2' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_MUE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_MUE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE3' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_MUE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE4() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_MUE4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE4' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_MUE4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_EMAIL2' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_CARGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION1.COT_CARGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_CARGO' de la tabla 'COTIZACION1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION1.COT_CARGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_NOMBRENull()
            Me(Me.tableCOTIZACION1.COT_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_EMAILNull()
            Me(Me.tableCOTIZACION1.COT_EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_ATENCIONNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_ATENCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_ATENCIONNull()
            Me(Me.tableCOTIZACION1.COT_ATENCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_DIRECCIONNull()
            Me(Me.tableCOTIZACION1.COT_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_COMUNANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_COMUNANull()
            Me(Me.tableCOTIZACION1.COT_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_FONONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_FONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_FONONull()
            Me(Me.tableCOTIZACION1.COT_FONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_FAXNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_FAXNull()
            Me(Me.tableCOTIZACION1.COT_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_SUBTOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_SUBTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_SUBTOTALNull()
            Me(Me.tableCOTIZACION1.COT_SUBTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_DESCUENTONull()
            Me(Me.tableCOTIZACION1.COT_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_NETONull()
            Me(Me.tableCOTIZACION1.COT_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_IVANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_IVANull()
            Me(Me.tableCOTIZACION1.COT_IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_TOTALNull()
            Me(Me.tableCOTIZACION1.COT_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_FECHANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_FECHANull()
            Me(Me.tableCOTIZACION1.COT_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_CELULARNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_CELULARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_CELULARNull()
            Me(Me.tableCOTIZACION1.COT_CELULARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_CIUDADNull()
            Me(Me.tableCOTIZACION1.COT_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_EMPRESANull()
            Me(Me.tableCOTIZACION1.COT_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE1Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_MUE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE1Null()
            Me(Me.tableCOTIZACION1.COT_MUE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE2Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_MUE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE2Null()
            Me(Me.tableCOTIZACION1.COT_MUE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE3Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_MUE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE3Null()
            Me(Me.tableCOTIZACION1.COT_MUE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE4Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_MUE4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE4Null()
            Me(Me.tableCOTIZACION1.COT_MUE4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_EMAIL2Null()
            Me(Me.tableCOTIZACION1.COT_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_CARGONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION1.COT_CARGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_CARGONull()
            Me(Me.tableCOTIZACION1.COT_CARGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COMBO_ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOMBO_ANALISIS As COMBO_ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMBO_ANALISIS = CType(Me.Table,COMBO_ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COB_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOMBO_ANALISIS.COB_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOMBO_ANALISIS.COB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOMBO_ANALISIS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOMBO_ANALISIS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COMBO_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_NOTAS1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_NOTAS1 As COTIZA_NOTAS1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_NOTAS1 = CType(Me.Table,COTIZA_NOTAS1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_NOTAS1.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS1.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CON_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableCOTIZA_NOTAS1.CON_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS1.CON_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOT_NOTAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_NOTAS1.NOT_NOTASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOT_NOTAS' de la tabla 'COTIZA_NOTAS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS1.NOT_NOTASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTA_COT_TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_NOTAS1.NOTA_COT_TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTA_COT_TIPO' de la tabla 'COTIZA_NOTAS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_NOTAS1.NOTA_COT_TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOT_NOTASNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_NOTAS1.NOT_NOTASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOT_NOTASNull()
            Me(Me.tableCOTIZA_NOTAS1.NOT_NOTASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTA_COT_TIPONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_NOTAS1.NOTA_COT_TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTA_COT_TIPONull()
            Me(Me.tableCOTIZA_NOTAS1.NOTA_COT_TIPOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS2Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS2 As COTIZA_ANALISIS2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS2 = CType(Me.Table,COTIZA_ANALISIS2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS2.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS2.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_ANALISIS() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS2.CTD_ANALISISColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS2.CTD_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_UNITARIO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS2.CTA_UNITARIOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_UNITARIO' de la tabla 'COTIZA_ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS2.CTA_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS2.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS2.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS2.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS2.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_UNITARIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS2.CTA_UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_UNITARIONull()
            Me(Me.tableCOTIZA_ANALISIS2.CTA_UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS2.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS2.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS2.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS2.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS11Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS11 As COTIZA_ANALISIS11DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS11 = CType(Me.Table,COTIZA_ANALISIS11DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS11.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS11.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS11' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS11.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS11' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS11.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS11' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS11.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS11' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS11.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS11' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS11.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS11' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS11.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS11' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS11.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS11.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS11.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS11.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS11.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS11.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS11.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS11.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS11.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS11.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS11.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS11.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS11.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS11.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS11.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS12Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS12 As COTIZA_ANALISIS12DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS12 = CType(Me.Table,COTIZA_ANALISIS12DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS12.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS12.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS12' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS12.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS12' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS12.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS12' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS12.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS12' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS12.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS12' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS12.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS12' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS12.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS12' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS12.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS12.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS12.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS12.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS12.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS12.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS12.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS12.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS12.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS12.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS12.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS12.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS12.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS12.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS12.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS13Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS13 As COTIZA_ANALISIS13DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS13 = CType(Me.Table,COTIZA_ANALISIS13DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS13.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS13.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS13' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS13.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS13' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS13.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS13' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS13.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS13' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS13.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS13' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS13.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS13' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS13.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS13' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS13.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS13.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS13.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS13.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS13.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS13.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS13.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS13.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS13.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS13.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS13.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS13.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS13.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS13.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS13.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CODIGO_ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableCODIGO_ANALISIS As CODIGO_ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCODIGO_ANALISIS = CType(Me.Table,CODIGO_ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCODIGO_ANALISIS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCODIGO_ANALISIS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Return CType(Me(Me.tableCODIGO_ANALISIS.ANA_ANALISISColumn),String)
            End Get
            Set
                Me(Me.tableCODIGO_ANALISIS.ANA_ANALISISColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZACIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZACION As COTIZACIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZACION = CType(Me.Table,COTIZACIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZACION.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_RUT() As String
            Get
                Return CType(Me(Me.tableCOTIZACION.COT_RUTColumn),String)
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_NOMBRE' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_EMAIL' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_ATENCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_ATENCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_ATENCION' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_ATENCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_DIRECCION' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_COMUNA' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_FONO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_FONOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_FONO' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_FONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_FAX' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_SUBTOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_SUBTOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_SUBTOTAL' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_SUBTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_DESCUENTO' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_NETO' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_IVA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_IVAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_IVA' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_TOTAL' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_FECHA' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_CELULAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_CELULARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_CELULAR' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_CELULARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_CIUDAD' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_EMPRESA' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_MUE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE1' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_MUE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_MUE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE2' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_MUE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_MUE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE3' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_MUE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_MUE4() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_MUE4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_MUE4' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_MUE4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_EMAIL2' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_CARGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZACION.COT_CARGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_CARGO' de la tabla 'COTIZACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZACION.COT_CARGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_NOMBRENull()
            Me(Me.tableCOTIZACION.COT_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_EMAILNull()
            Me(Me.tableCOTIZACION.COT_EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_ATENCIONNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_ATENCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_ATENCIONNull()
            Me(Me.tableCOTIZACION.COT_ATENCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_DIRECCIONNull()
            Me(Me.tableCOTIZACION.COT_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_COMUNANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_COMUNANull()
            Me(Me.tableCOTIZACION.COT_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_FONONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_FONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_FONONull()
            Me(Me.tableCOTIZACION.COT_FONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_FAXNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_FAXNull()
            Me(Me.tableCOTIZACION.COT_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_SUBTOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_SUBTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_SUBTOTALNull()
            Me(Me.tableCOTIZACION.COT_SUBTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_DESCUENTONull()
            Me(Me.tableCOTIZACION.COT_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_NETONull()
            Me(Me.tableCOTIZACION.COT_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_IVANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_IVANull()
            Me(Me.tableCOTIZACION.COT_IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_TOTALNull()
            Me(Me.tableCOTIZACION.COT_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_FECHANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_FECHANull()
            Me(Me.tableCOTIZACION.COT_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_CELULARNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_CELULARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_CELULARNull()
            Me(Me.tableCOTIZACION.COT_CELULARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_CIUDADNull()
            Me(Me.tableCOTIZACION.COT_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_EMPRESANull()
            Me(Me.tableCOTIZACION.COT_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE1Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_MUE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE1Null()
            Me(Me.tableCOTIZACION.COT_MUE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE2Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_MUE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE2Null()
            Me(Me.tableCOTIZACION.COT_MUE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE3Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_MUE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE3Null()
            Me(Me.tableCOTIZACION.COT_MUE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_MUE4Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_MUE4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_MUE4Null()
            Me(Me.tableCOTIZACION.COT_MUE4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_EMAIL2Null()
            Me(Me.tableCOTIZACION.COT_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_CARGONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZACION.COT_CARGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_CARGONull()
            Me(Me.tableCOTIZACION.COT_CARGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EMPRESARow
        Inherits Global.System.Data.DataRow
        
        Private tableEMPRESA As EMPRESADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEMPRESA = CType(Me.Table,EMPRESADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEMPRESA.PRO_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMPRESA' de la tabla 'EMPRESA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPRESA.PRO_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableEMPRESA.PRO_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMPRESANull()
            Me(Me.tableEMPRESA.PRO_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRO_PASORow
        Inherits Global.System.Data.DataRow
        
        Private tablePRO_PASO As PRO_PASODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRO_PASO = CType(Me.Table,PRO_PASODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_NOMBRE() As String
            Get
                Return CType(Me(Me.tablePRO_PASO.PRO_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_RUT() As String
            Get
                Return CType(Me(Me.tablePRO_PASO.PRO_RUTColumn),String)
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_DIRECCION' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FONO1' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FONO2' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_CELULAR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_CELULARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_CELULAR' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_CELULARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_FAX' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMAIL1' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMAIL2' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_CASILLA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_CASILLAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_CASILLA' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_CASILLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_DESCUENTO' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIU_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.CIU_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIU_NOMBRE' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.CIU_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOC_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.LOC_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LOC_LOCALIDAD' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.LOC_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COM_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.COM_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COM_COMUNA' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.COM_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_ATENCION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_ATENCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_ATENCION' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_ATENCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRO_PASO.PRO_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_EMPRESA' de la tabla 'PRO_PASO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRO_PASO.PRO_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_DIRECCIONNull()
            Me(Me.tablePRO_PASO.PRO_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FONO1Null() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FONO1Null()
            Me(Me.tablePRO_PASO.PRO_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FONO2Null() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FONO2Null()
            Me(Me.tablePRO_PASO.PRO_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_CELULARNull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_CELULARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_CELULARNull()
            Me(Me.tablePRO_PASO.PRO_CELULARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_FAXNull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_FAXNull()
            Me(Me.tablePRO_PASO.PRO_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMAIL1Null()
            Me(Me.tablePRO_PASO.PRO_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMAIL2Null()
            Me(Me.tablePRO_PASO.PRO_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_CASILLANull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_CASILLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_CASILLANull()
            Me(Me.tablePRO_PASO.PRO_CASILLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_DESCUENTONull()
            Me(Me.tablePRO_PASO.PRO_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIU_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.CIU_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIU_NOMBRENull()
            Me(Me.tablePRO_PASO.CIU_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOC_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.LOC_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOC_LOCALIDADNull()
            Me(Me.tablePRO_PASO.LOC_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOM_COMUNANull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.COM_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOM_COMUNANull()
            Me(Me.tablePRO_PASO.COM_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_ATENCIONNull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_ATENCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_ATENCIONNull()
            Me(Me.tablePRO_PASO.PRO_ATENCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tablePRO_PASO.PRO_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_EMPRESANull()
            Me(Me.tablePRO_PASO.PRO_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COMBO_ANALISIS1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOMBO_ANALISIS1 As COMBO_ANALISIS1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMBO_ANALISIS1 = CType(Me.Table,COMBO_ANALISIS1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOMBO_ANALISIS1.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOMBO_ANALISIS1.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOMBO_ANALISIS1.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COMBO_ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMBO_ANALISIS1.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOMBO_ANALISIS1.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOMBO_ANALISIS1.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS1Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS1 As ANALISIS1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS1 = CType(Me.Table,ANALISIS1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS1.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS1.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS1.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS1.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS1.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_DETALLERow
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_DETALLE As COTIZA_DETALLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_DETALLE = CType(Me.Table,COTIZA_DETALLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_DETALLE.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_ANALISIS() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_DETALLE.CTD_ANALISISColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.CTD_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_CANTIDAD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE.CTD_CANTIDADColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_CANTIDAD' de la tabla 'COTIZA_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.CTD_CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_UNITARIO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE.CTD_UNITARIOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_UNITARIO' de la tabla 'COTIZA_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.CTD_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_SUBTOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE.CTD_SUBTOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_SUBTOTAL' de la tabla 'COTIZA_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.CTD_SUBTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE.CTD_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_DESCUENTO' de la tabla 'COTIZA_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.CTD_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE.CTD_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_TOTAL' de la tabla 'COTIZA_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.CTD_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_MUESTRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE.CTD_MUESTRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_MUESTRA' de la tabla 'COTIZA_DETALLE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE.CTD_MUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_CANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE.CTD_CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_CANTIDADNull()
            Me(Me.tableCOTIZA_DETALLE.CTD_CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_UNITARIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE.CTD_UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_UNITARIONull()
            Me(Me.tableCOTIZA_DETALLE.CTD_UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_SUBTOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE.CTD_SUBTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_SUBTOTALNull()
            Me(Me.tableCOTIZA_DETALLE.CTD_SUBTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE.CTD_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_DESCUENTONull()
            Me(Me.tableCOTIZA_DETALLE.CTD_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE.CTD_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_TOTALNull()
            Me(Me.tableCOTIZA_DETALLE.CTD_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_DETALLE.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_MUESTRANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE.CTD_MUESTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_MUESTRANull()
            Me(Me.tableCOTIZA_DETALLE.CTD_MUESTRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_DETALLE1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_DETALLE1 As COTIZA_DETALLE1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_DETALLE1 = CType(Me.Table,COTIZA_DETALLE1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_DETALLE1.COT_NUMEROColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_ANALISIS() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_DETALLE1.CTD_ANALISISColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.CTD_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_CANTIDAD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE1.CTD_CANTIDADColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_CANTIDAD' de la tabla 'COTIZA_DETALLE1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.CTD_CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_UNITARIO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE1.CTD_UNITARIOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_UNITARIO' de la tabla 'COTIZA_DETALLE1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.CTD_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_SUBTOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE1.CTD_SUBTOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_SUBTOTAL' de la tabla 'COTIZA_DETALLE1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.CTD_SUBTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE1.CTD_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_DESCUENTO' de la tabla 'COTIZA_DETALLE1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.CTD_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE1.CTD_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_TOTAL' de la tabla 'COTIZA_DETALLE1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.CTD_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE1.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_DETALLE1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_MUESTRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE1.CTD_MUESTRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_MUESTRA' de la tabla 'COTIZA_DETALLE1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE1.CTD_MUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_CANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE1.CTD_CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_CANTIDADNull()
            Me(Me.tableCOTIZA_DETALLE1.CTD_CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_UNITARIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE1.CTD_UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_UNITARIONull()
            Me(Me.tableCOTIZA_DETALLE1.CTD_UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_SUBTOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE1.CTD_SUBTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_SUBTOTALNull()
            Me(Me.tableCOTIZA_DETALLE1.CTD_SUBTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE1.CTD_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_DESCUENTONull()
            Me(Me.tableCOTIZA_DETALLE1.CTD_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE1.CTD_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_TOTALNull()
            Me(Me.tableCOTIZA_DETALLE1.CTD_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE1.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_DETALLE1.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_MUESTRANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE1.CTD_MUESTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_MUESTRANull()
            Me(Me.tableCOTIZA_DETALLE1.CTD_MUESTRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS As ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS = CType(Me.Table,ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SUBMUESTRARow
        Inherits Global.System.Data.DataRow
        
        Private tableSUBMUESTRA As SUBMUESTRADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSUBMUESTRA = CType(Me.Table,SUBMUESTRADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableSUBMUESTRA.SUB_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableSUBMUESTRA.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_DESCRIPCION' de la tabla 'SUBMUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'SUBMUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_DESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_DESCRIPCIONNull()
            Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableSUBMUESTRA.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MUESTRARow
        Inherits Global.System.Data.DataRow
        
        Private tableMUESTRA As MUESTRADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMUESTRA = CType(Me.Table,MUESTRADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Double
            Get
                Return CType(Me(Me.tableMUESTRA.TMU_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableMUESTRA.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_MUESTRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMUESTRA.TMU_MUESTRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_MUESTRA' de la tabla 'MUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMUESTRA.TMU_MUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_MUESTRANull() As Boolean
            Return Me.IsNull(Me.tableMUESTRA.TMU_MUESTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_MUESTRANull()
            Me(Me.tableMUESTRA.TMU_MUESTRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS14Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS14 As COTIZA_ANALISIS14DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS14 = CType(Me.Table,COTIZA_ANALISIS14DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS14.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS14.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS14' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS14.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS14' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS14.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS14' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS14.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS14' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS14.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS14' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS14.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS14' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS14.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS14' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS14.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS14.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS14.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS14.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS14.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS14.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS14.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS14.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS14.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS14.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS14.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS14.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS14.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS14.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS14.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS15Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS15 As COTIZA_ANALISIS15DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS15 = CType(Me.Table,COTIZA_ANALISIS15DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS15.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS15.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS15' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS15.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS15' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS15.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS15' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS15.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS15' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS15.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS15' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS15.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS15' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS15.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS15' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS15.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS15.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS15.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS15.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS15.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS15.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS15.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS15.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS15.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS15.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS15.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS15.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS15.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS15.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS15.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LISTADO_DETALLERow
        Inherits Global.System.Data.DataRow
        
        Private tableLISTADO_DETALLE As LISTADO_DETALLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLISTADO_DETALLE = CType(Me.Table,LISTADO_DETALLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As String
            Get
                Return CType(Me(Me.tableLISTADO_DETALLE.ANA_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableLISTADO_DETALLE.ANA_CODIGOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS16Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS16 As COTIZA_ANALISIS16DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS16 = CType(Me.Table,COTIZA_ANALISIS16DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS16.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS16.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS16' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS16.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS16' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS16.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS16' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS16.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS16' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS16.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS16' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS16.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS16' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS16.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS16' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS16.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS16.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS16.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS16.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS16.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS16.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS16.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS16.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS16.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS16.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS16.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS16.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS16.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS16.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS16.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COMBO_COTIZARow
        Inherits Global.System.Data.DataRow
        
        Private tableCOMBO_COTIZA As COMBO_COTIZADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMBO_COTIZA = CType(Me.Table,COMBO_COTIZADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COB_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOMBO_COTIZA.COB_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOMBO_COTIZA.COB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOMBO_COTIZA.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOMBO_COTIZA.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOMBO_COTIZA.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COMBO_COTIZA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMBO_COTIZA.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOMBO_COTIZA.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOMBO_COTIZA.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_COMUNASRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_COMUNAS As COTIZA_COMUNASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_COMUNAS = CType(Me.Table,COTIZA_COMUNASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMUNA() As String
            Get
                Return CType(Me(Me.tableCOTIZA_COMUNAS.COD_COMUNAColumn),String)
            End Get
            Set
                Me(Me.tableCOTIZA_COMUNAS.COD_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_COMUNAS.COD_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_CIUDAD' de la tabla 'COTIZA_COMUNAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_COMUNAS.COD_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_COMUNAS.COD_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_CIUDADNull()
            Me(Me.tableCOTIZA_COMUNAS.COD_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_COMUNAS1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_COMUNAS1 As COTIZA_COMUNAS1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_COMUNAS1 = CType(Me.Table,COTIZA_COMUNAS1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMUNA() As String
            Get
                Return CType(Me(Me.tableCOTIZA_COMUNAS1.COD_COMUNAColumn),String)
            End Get
            Set
                Me(Me.tableCOTIZA_COMUNAS1.COD_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_COMUNAS1.COD_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_CIUDAD' de la tabla 'COTIZA_COMUNAS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_COMUNAS1.COD_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_COMUNAS1.COD_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_CIUDADNull()
            Me(Me.tableCOTIZA_COMUNAS1.COD_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_COMUNAS2Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_COMUNAS2 As COTIZA_COMUNAS2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_COMUNAS2 = CType(Me.Table,COTIZA_COMUNAS2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMUNA() As String
            Get
                Return CType(Me(Me.tableCOTIZA_COMUNAS2.COD_COMUNAColumn),String)
            End Get
            Set
                Me(Me.tableCOTIZA_COMUNAS2.COD_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_COMUNAS2.COD_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_CIUDAD' de la tabla 'COTIZA_COMUNAS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_COMUNAS2.COD_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_COMUNAS2.COD_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_CIUDADNull()
            Me(Me.tableCOTIZA_COMUNAS2.COD_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_DETALLE_ORDRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_DETALLE_ORD As COTIZA_DETALLE_ORDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_DETALLE_ORD = CType(Me.Table,COTIZA_DETALLE_ORDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_ANALISIS() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.CTD_ANALISISColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.CTD_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_CANTIDAD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.CTD_CANTIDADColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_CANTIDAD' de la tabla 'COTIZA_DETALLE_ORD' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.CTD_CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_UNITARIO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.CTD_UNITARIOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_UNITARIO' de la tabla 'COTIZA_DETALLE_ORD' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.CTD_UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_SUBTOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.CTD_SUBTOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_SUBTOTAL' de la tabla 'COTIZA_DETALLE_ORD' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.CTD_SUBTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.CTD_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_DESCUENTO' de la tabla 'COTIZA_DETALLE_ORD' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.CTD_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.CTD_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_TOTAL' de la tabla 'COTIZA_DETALLE_ORD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.CTD_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_DETALLE_ORD' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTD_MUESTRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.CTD_MUESTRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTD_MUESTRA' de la tabla 'COTIZA_DETALLE_ORD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.CTD_MUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_DETALLE_ORD.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_DETALLE_ORD' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_DETALLE_ORD.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_CANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.CTD_CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_CANTIDADNull()
            Me(Me.tableCOTIZA_DETALLE_ORD.CTD_CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_UNITARIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.CTD_UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_UNITARIONull()
            Me(Me.tableCOTIZA_DETALLE_ORD.CTD_UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_SUBTOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.CTD_SUBTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_SUBTOTALNull()
            Me(Me.tableCOTIZA_DETALLE_ORD.CTD_SUBTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.CTD_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_DESCUENTONull()
            Me(Me.tableCOTIZA_DETALLE_ORD.CTD_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.CTD_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_TOTALNull()
            Me(Me.tableCOTIZA_DETALLE_ORD.CTD_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_DETALLE_ORD.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTD_MUESTRANull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.CTD_MUESTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTD_MUESTRANull()
            Me(Me.tableCOTIZA_DETALLE_ORD.CTD_MUESTRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_DETALLE_ORD.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_DETALLE_ORD.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS17Row
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS17 As COTIZA_ANALISIS17DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS17 = CType(Me.Table,COTIZA_ANALISIS17DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS17.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS17.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS17' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS17.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS17' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS17.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS17' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS17.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS17' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS17.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS17' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS17.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS17' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS17.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS17' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS17.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS17.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS17.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS17.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS17.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS17.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS17.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS17.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS17.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS17.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS17.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS17.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS17.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS17.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS17.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NOTA_PLANILLARow
        Inherits Global.System.Data.DataRow
        
        Private tableNOTA_PLANILLA As NOTA_PLANILLADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNOTA_PLANILLA = CType(Me.Table,NOTA_PLANILLADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NPL_NOMBRE() As String
            Get
                Return CType(Me(Me.tableNOTA_PLANILLA.NPL_NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableNOTA_PLANILLA.NPL_NOMBREColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTIZA_ANALISIS_BASERow
        Inherits Global.System.Data.DataRow
        
        Private tableCOTIZA_ANALISIS_BASE As COTIZA_ANALISIS_BASEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTIZA_ANALISIS_BASE = CType(Me.Table,COTIZA_ANALISIS_BASEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'COTIZA_ANALISIS_BASE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_DESCUENTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.CTA_DESCUENTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_DESCUENTO' de la tabla 'COTIZA_ANALISIS_BASE' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.CTA_DESCUENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.CTA_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_NETO' de la tabla 'COTIZA_ANALISIS_BASE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.CTA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COTIZA_ANALISIS_BASE' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'COTIZA_ANALISIS_BASE' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'COTIZA_ANALISIS_BASE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTIZA_ANALISIS_BASE.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'COTIZA_ANALISIS_BASE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTIZA_ANALISIS_BASE.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS_BASE.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_DESCUENTONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS_BASE.CTA_DESCUENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_DESCUENTONull()
            Me(Me.tableCOTIZA_ANALISIS_BASE.CTA_DESCUENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS_BASE.CTA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_NETONull()
            Me(Me.tableCOTIZA_ANALISIS_BASE.CTA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS_BASE.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS_BASE.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCOTIZA_ANALISIS_BASE.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS_BASE.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableCOTIZA_ANALISIS_BASE.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCOTIZA_ANALISIS_BASE.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCOTIZA_ANALISIS_BASE.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRODUCTORRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODUCTORRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRODUCTORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRODUCTORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_NOTASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_NOTASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_NOTASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_NOTASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRODUCTOR1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODUCTOR1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRODUCTOR1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRODUCTOR1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZACION1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZACION1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZACION1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZACION1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COMBO_ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COMBO_ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COMBO_ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COMBO_ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_NOTAS1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_NOTAS1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_NOTAS1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_NOTAS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS11RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS11Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS11Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS11Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS12RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS12Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS12Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS12Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS13RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS13Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS13Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS13Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CODIGO_ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CODIGO_ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CODIGO_ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CODIGO_ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZACIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZACIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZACIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZACIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EMPRESARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EMPRESARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EMPRESARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EMPRESARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRO_PASORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRO_PASORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRO_PASORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRO_PASORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COMBO_ANALISIS1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COMBO_ANALISIS1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COMBO_ANALISIS1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COMBO_ANALISIS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_DETALLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_DETALLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_DETALLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_DETALLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_DETALLE1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_DETALLE1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_DETALLE1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_DETALLE1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SUBMUESTRARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SUBMUESTRARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SUBMUESTRARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SUBMUESTRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MUESTRARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MUESTRARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MUESTRARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MUESTRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS14RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS14Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS14Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS14Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS15RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS15Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS15Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS15Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LISTADO_DETALLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LISTADO_DETALLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LISTADO_DETALLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LISTADO_DETALLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS16RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS16Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS16Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS16Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COMBO_COTIZARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COMBO_COTIZARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COMBO_COTIZARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COMBO_COTIZARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_COMUNASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_COMUNASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_COMUNASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_COMUNASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_COMUNAS1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_COMUNAS1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_COMUNAS1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_COMUNAS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_COMUNAS2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_COMUNAS2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_COMUNAS2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_COMUNAS2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_DETALLE_ORDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_DETALLE_ORDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_DETALLE_ORDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_DETALLE_ORDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS17RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS17Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS17Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS17Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NOTA_PLANILLARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NOTA_PLANILLARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NOTA_PLANILLARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NOTA_PLANILLARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTIZA_ANALISIS_BASERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COTIZA_ANALISIS_BASERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTIZA_ANALISIS_BASERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTIZA_ANALISIS_BASERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
