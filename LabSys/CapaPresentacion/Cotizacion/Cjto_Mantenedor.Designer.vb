'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5472
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Cjto_Mantenedor"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Cjto_Mantenedor
    Inherits Global.System.Data.DataSet
    
    Private tableANALISIS As ANALISISDataTable
    
    Private tableANALISIS1 As ANALISIS1DataTable
    
    Private tableANALISIS2 As ANALISIS2DataTable
    
    Private tableANALISIS3 As ANALISIS3DataTable
    
    Private tableANALISIS4 As ANALISIS4DataTable
    
    Private tableANALISIS5 As ANALISIS5DataTable
    
    Private tableANALISIS6 As ANALISIS6DataTable
    
    Private tableCOMBO_ANALISIS As COMBO_ANALISISDataTable
    
    Private tableANALISIS7 As ANALISIS7DataTable
    
    Private tableMUESTRA As MUESTRADataTable
    
    Private tableSUBMUESTRA As SUBMUESTRADataTable
    
    Private tableCODIGO_ANALISIS As CODIGO_ANALISISDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISISDataTable(ds.Tables("ANALISIS")))
            End If
            If (Not (ds.Tables("ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS1DataTable(ds.Tables("ANALISIS1")))
            End If
            If (Not (ds.Tables("ANALISIS2")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS2DataTable(ds.Tables("ANALISIS2")))
            End If
            If (Not (ds.Tables("ANALISIS3")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS3DataTable(ds.Tables("ANALISIS3")))
            End If
            If (Not (ds.Tables("ANALISIS4")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS4DataTable(ds.Tables("ANALISIS4")))
            End If
            If (Not (ds.Tables("ANALISIS5")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS5DataTable(ds.Tables("ANALISIS5")))
            End If
            If (Not (ds.Tables("ANALISIS6")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS6DataTable(ds.Tables("ANALISIS6")))
            End If
            If (Not (ds.Tables("COMBO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_ANALISISDataTable(ds.Tables("COMBO_ANALISIS")))
            End If
            If (Not (ds.Tables("ANALISIS7")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS7DataTable(ds.Tables("ANALISIS7")))
            End If
            If (Not (ds.Tables("MUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New MUESTRADataTable(ds.Tables("MUESTRA")))
            End If
            If (Not (ds.Tables("SUBMUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New SUBMUESTRADataTable(ds.Tables("SUBMUESTRA")))
            End If
            If (Not (ds.Tables("CODIGO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New CODIGO_ANALISISDataTable(ds.Tables("CODIGO_ANALISIS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS() As ANALISISDataTable
        Get
            Return Me.tableANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS1() As ANALISIS1DataTable
        Get
            Return Me.tableANALISIS1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS2() As ANALISIS2DataTable
        Get
            Return Me.tableANALISIS2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS3() As ANALISIS3DataTable
        Get
            Return Me.tableANALISIS3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS4() As ANALISIS4DataTable
        Get
            Return Me.tableANALISIS4
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS5() As ANALISIS5DataTable
        Get
            Return Me.tableANALISIS5
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS6() As ANALISIS6DataTable
        Get
            Return Me.tableANALISIS6
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMBO_ANALISIS() As COMBO_ANALISISDataTable
        Get
            Return Me.tableCOMBO_ANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS7() As ANALISIS7DataTable
        Get
            Return Me.tableANALISIS7
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MUESTRA() As MUESTRADataTable
        Get
            Return Me.tableMUESTRA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SUBMUESTRA() As SUBMUESTRADataTable
        Get
            Return Me.tableSUBMUESTRA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CODIGO_ANALISIS() As CODIGO_ANALISISDataTable
        Get
            Return Me.tableCODIGO_ANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Cjto_Mantenedor = CType(MyBase.Clone,Cjto_Mantenedor)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISISDataTable(ds.Tables("ANALISIS")))
            End If
            If (Not (ds.Tables("ANALISIS1")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS1DataTable(ds.Tables("ANALISIS1")))
            End If
            If (Not (ds.Tables("ANALISIS2")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS2DataTable(ds.Tables("ANALISIS2")))
            End If
            If (Not (ds.Tables("ANALISIS3")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS3DataTable(ds.Tables("ANALISIS3")))
            End If
            If (Not (ds.Tables("ANALISIS4")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS4DataTable(ds.Tables("ANALISIS4")))
            End If
            If (Not (ds.Tables("ANALISIS5")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS5DataTable(ds.Tables("ANALISIS5")))
            End If
            If (Not (ds.Tables("ANALISIS6")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS6DataTable(ds.Tables("ANALISIS6")))
            End If
            If (Not (ds.Tables("COMBO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New COMBO_ANALISISDataTable(ds.Tables("COMBO_ANALISIS")))
            End If
            If (Not (ds.Tables("ANALISIS7")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS7DataTable(ds.Tables("ANALISIS7")))
            End If
            If (Not (ds.Tables("MUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New MUESTRADataTable(ds.Tables("MUESTRA")))
            End If
            If (Not (ds.Tables("SUBMUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New SUBMUESTRADataTable(ds.Tables("SUBMUESTRA")))
            End If
            If (Not (ds.Tables("CODIGO_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New CODIGO_ANALISISDataTable(ds.Tables("CODIGO_ANALISIS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableANALISIS = CType(MyBase.Tables("ANALISIS"),ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS) Is Nothing) Then
                Me.tableANALISIS.InitVars
            End If
        End If
        Me.tableANALISIS1 = CType(MyBase.Tables("ANALISIS1"),ANALISIS1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS1) Is Nothing) Then
                Me.tableANALISIS1.InitVars
            End If
        End If
        Me.tableANALISIS2 = CType(MyBase.Tables("ANALISIS2"),ANALISIS2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS2) Is Nothing) Then
                Me.tableANALISIS2.InitVars
            End If
        End If
        Me.tableANALISIS3 = CType(MyBase.Tables("ANALISIS3"),ANALISIS3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS3) Is Nothing) Then
                Me.tableANALISIS3.InitVars
            End If
        End If
        Me.tableANALISIS4 = CType(MyBase.Tables("ANALISIS4"),ANALISIS4DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS4) Is Nothing) Then
                Me.tableANALISIS4.InitVars
            End If
        End If
        Me.tableANALISIS5 = CType(MyBase.Tables("ANALISIS5"),ANALISIS5DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS5) Is Nothing) Then
                Me.tableANALISIS5.InitVars
            End If
        End If
        Me.tableANALISIS6 = CType(MyBase.Tables("ANALISIS6"),ANALISIS6DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS6) Is Nothing) Then
                Me.tableANALISIS6.InitVars
            End If
        End If
        Me.tableCOMBO_ANALISIS = CType(MyBase.Tables("COMBO_ANALISIS"),COMBO_ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOMBO_ANALISIS) Is Nothing) Then
                Me.tableCOMBO_ANALISIS.InitVars
            End If
        End If
        Me.tableANALISIS7 = CType(MyBase.Tables("ANALISIS7"),ANALISIS7DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS7) Is Nothing) Then
                Me.tableANALISIS7.InitVars
            End If
        End If
        Me.tableMUESTRA = CType(MyBase.Tables("MUESTRA"),MUESTRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableMUESTRA) Is Nothing) Then
                Me.tableMUESTRA.InitVars
            End If
        End If
        Me.tableSUBMUESTRA = CType(MyBase.Tables("SUBMUESTRA"),SUBMUESTRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSUBMUESTRA) Is Nothing) Then
                Me.tableSUBMUESTRA.InitVars
            End If
        End If
        Me.tableCODIGO_ANALISIS = CType(MyBase.Tables("CODIGO_ANALISIS"),CODIGO_ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCODIGO_ANALISIS) Is Nothing) Then
                Me.tableCODIGO_ANALISIS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Cjto_Mantenedor"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/Cjto_Mantenedor.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("es-CL")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableANALISIS = New ANALISISDataTable
        MyBase.Tables.Add(Me.tableANALISIS)
        Me.tableANALISIS1 = New ANALISIS1DataTable
        MyBase.Tables.Add(Me.tableANALISIS1)
        Me.tableANALISIS2 = New ANALISIS2DataTable
        MyBase.Tables.Add(Me.tableANALISIS2)
        Me.tableANALISIS3 = New ANALISIS3DataTable
        MyBase.Tables.Add(Me.tableANALISIS3)
        Me.tableANALISIS4 = New ANALISIS4DataTable
        MyBase.Tables.Add(Me.tableANALISIS4)
        Me.tableANALISIS5 = New ANALISIS5DataTable
        MyBase.Tables.Add(Me.tableANALISIS5)
        Me.tableANALISIS6 = New ANALISIS6DataTable
        MyBase.Tables.Add(Me.tableANALISIS6)
        Me.tableCOMBO_ANALISIS = New COMBO_ANALISISDataTable
        MyBase.Tables.Add(Me.tableCOMBO_ANALISIS)
        Me.tableANALISIS7 = New ANALISIS7DataTable
        MyBase.Tables.Add(Me.tableANALISIS7)
        Me.tableMUESTRA = New MUESTRADataTable
        MyBase.Tables.Add(Me.tableMUESTRA)
        Me.tableSUBMUESTRA = New SUBMUESTRADataTable
        MyBase.Tables.Add(Me.tableSUBMUESTRA)
        Me.tableCODIGO_ANALISIS = New CODIGO_ANALISISDataTable
        MyBase.Tables.Add(Me.tableCODIGO_ANALISIS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS4() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS5() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS6() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOMBO_ANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS7() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMUESTRA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSUBMUESTRA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCODIGO_ANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISISRowChangeEvent)
    
    Public Delegate Sub ANALISIS1RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS1RowChangeEvent)
    
    Public Delegate Sub ANALISIS2RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS2RowChangeEvent)
    
    Public Delegate Sub ANALISIS3RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS3RowChangeEvent)
    
    Public Delegate Sub ANALISIS4RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS4RowChangeEvent)
    
    Public Delegate Sub ANALISIS5RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS5RowChangeEvent)
    
    Public Delegate Sub ANALISIS6RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS6RowChangeEvent)
    
    Public Delegate Sub COMBO_ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As COMBO_ANALISISRowChangeEvent)
    
    Public Delegate Sub ANALISIS7RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS7RowChangeEvent)
    
    Public Delegate Sub MUESTRARowChangeEventHandler(ByVal sender As Object, ByVal e As MUESTRARowChangeEvent)
    
    Public Delegate Sub SUBMUESTRARowChangeEventHandler(ByVal sender As Object, ByVal e As SUBMUESTRARowChangeEvent)
    
    Public Delegate Sub CODIGO_ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As CODIGO_ANALISISRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISISRow
            Get
                Return CType(Me.Rows(index),ANALISISRow)
            End Get
        End Property
        
        Public Event ANALISISRowChanging As ANALISISRowChangeEventHandler
        
        Public Event ANALISISRowChanged As ANALISISRowChangeEventHandler
        
        Public Event ANALISISRowDeleting As ANALISISRowChangeEventHandler
        
        Public Event ANALISISRowDeleted As ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISISRow(ByVal row As ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISISRow(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISISRow
            Dim rowANALISISRow As ANALISISRow = CType(Me.NewRow,ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISISRow)
            Return rowANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISISRow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISISDataTable = CType(MyBase.Clone,ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISISRow() As ANALISISRow
            Return CType(Me.NewRow,ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISISRowChanged(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISISRowChanging(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISISRowDeleted(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISISRowDeleting(Me, New ANALISISRowChangeEvent(CType(e.Row,ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISISRow(ByVal row As ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS1Row
            Get
                Return CType(Me.Rows(index),ANALISIS1Row)
            End Get
        End Property
        
        Public Event ANALISIS1RowChanging As ANALISIS1RowChangeEventHandler
        
        Public Event ANALISIS1RowChanged As ANALISIS1RowChangeEventHandler
        
        Public Event ANALISIS1RowDeleting As ANALISIS1RowChangeEventHandler
        
        Public Event ANALISIS1RowDeleted As ANALISIS1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS1Row(ByVal row As ANALISIS1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS1Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISIS1Row
            Dim rowANALISIS1Row As ANALISIS1Row = CType(Me.NewRow,ANALISIS1Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISIS1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS1Row)
            Return rowANALISIS1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS1Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS1DataTable = CType(MyBase.Clone,ANALISIS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey3", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS1Row() As ANALISIS1Row
            Return CType(Me.NewRow,ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS1RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowChanged(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS1RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowChanging(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowDeleted(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS1RowDeleting(Me, New ANALISIS1RowChangeEvent(CType(e.Row,ANALISIS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS1Row(ByVal row As ANALISIS1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS2Row
            Get
                Return CType(Me.Rows(index),ANALISIS2Row)
            End Get
        End Property
        
        Public Event ANALISIS2RowChanging As ANALISIS2RowChangeEventHandler
        
        Public Event ANALISIS2RowChanged As ANALISIS2RowChangeEventHandler
        
        Public Event ANALISIS2RowDeleting As ANALISIS2RowChangeEventHandler
        
        Public Event ANALISIS2RowDeleted As ANALISIS2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS2Row(ByVal row As ANALISIS2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS2Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISIS2Row
            Dim rowANALISIS2Row As ANALISIS2Row = CType(Me.NewRow,ANALISIS2Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISIS2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS2Row)
            Return rowANALISIS2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS2Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS2DataTable = CType(MyBase.Clone,ANALISIS2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey2", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS2Row() As ANALISIS2Row
            Return CType(Me.NewRow,ANALISIS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS2RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS2RowChanged(Me, New ANALISIS2RowChangeEvent(CType(e.Row,ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS2RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS2RowChanging(Me, New ANALISIS2RowChangeEvent(CType(e.Row,ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS2RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS2RowDeleted(Me, New ANALISIS2RowChangeEvent(CType(e.Row,ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS2RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS2RowDeleting(Me, New ANALISIS2RowChangeEvent(CType(e.Row,ANALISIS2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS2Row(ByVal row As ANALISIS2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS3Row
            Get
                Return CType(Me.Rows(index),ANALISIS3Row)
            End Get
        End Property
        
        Public Event ANALISIS3RowChanging As ANALISIS3RowChangeEventHandler
        
        Public Event ANALISIS3RowChanged As ANALISIS3RowChangeEventHandler
        
        Public Event ANALISIS3RowDeleting As ANALISIS3RowChangeEventHandler
        
        Public Event ANALISIS3RowDeleted As ANALISIS3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS3Row(ByVal row As ANALISIS3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS3Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISIS3Row
            Dim rowANALISIS3Row As ANALISIS3Row = CType(Me.NewRow,ANALISIS3Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISIS3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS3Row)
            Return rowANALISIS3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS3Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS3DataTable = CType(MyBase.Clone,ANALISIS3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey4", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS3Row() As ANALISIS3Row
            Return CType(Me.NewRow,ANALISIS3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS3RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS3RowChanged(Me, New ANALISIS3RowChangeEvent(CType(e.Row,ANALISIS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS3RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS3RowChanging(Me, New ANALISIS3RowChangeEvent(CType(e.Row,ANALISIS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS3RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS3RowDeleted(Me, New ANALISIS3RowChangeEvent(CType(e.Row,ANALISIS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS3RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS3RowDeleting(Me, New ANALISIS3RowChangeEvent(CType(e.Row,ANALISIS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS3Row(ByVal row As ANALISIS3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS4DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS4"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS4Row
            Get
                Return CType(Me.Rows(index),ANALISIS4Row)
            End Get
        End Property
        
        Public Event ANALISIS4RowChanging As ANALISIS4RowChangeEventHandler
        
        Public Event ANALISIS4RowChanged As ANALISIS4RowChangeEventHandler
        
        Public Event ANALISIS4RowDeleting As ANALISIS4RowChangeEventHandler
        
        Public Event ANALISIS4RowDeleted As ANALISIS4RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS4Row(ByVal row As ANALISIS4Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS4Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISIS4Row
            Dim rowANALISIS4Row As ANALISIS4Row = CType(Me.NewRow,ANALISIS4Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISIS4Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS4Row)
            Return rowANALISIS4Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS4Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS4DataTable = CType(MyBase.Clone,ANALISIS4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS4DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey5", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS4Row() As ANALISIS4Row
            Return CType(Me.NewRow,ANALISIS4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS4Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS4Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS4RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS4RowChanged(Me, New ANALISIS4RowChangeEvent(CType(e.Row,ANALISIS4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS4RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS4RowChanging(Me, New ANALISIS4RowChangeEvent(CType(e.Row,ANALISIS4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS4RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS4RowDeleted(Me, New ANALISIS4RowChangeEvent(CType(e.Row,ANALISIS4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS4RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS4RowDeleting(Me, New ANALISIS4RowChangeEvent(CType(e.Row,ANALISIS4Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS4Row(ByVal row As ANALISIS4Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS4DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS5DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS5"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS5Row
            Get
                Return CType(Me.Rows(index),ANALISIS5Row)
            End Get
        End Property
        
        Public Event ANALISIS5RowChanging As ANALISIS5RowChangeEventHandler
        
        Public Event ANALISIS5RowChanged As ANALISIS5RowChangeEventHandler
        
        Public Event ANALISIS5RowDeleting As ANALISIS5RowChangeEventHandler
        
        Public Event ANALISIS5RowDeleted As ANALISIS5RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS5Row(ByVal row As ANALISIS5Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS5Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISIS5Row
            Dim rowANALISIS5Row As ANALISIS5Row = CType(Me.NewRow,ANALISIS5Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISIS5Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS5Row)
            Return rowANALISIS5Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS5Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS5DataTable = CType(MyBase.Clone,ANALISIS5DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS5DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey7", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS5Row() As ANALISIS5Row
            Return CType(Me.NewRow,ANALISIS5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS5Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS5Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS5RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS5RowChanged(Me, New ANALISIS5RowChangeEvent(CType(e.Row,ANALISIS5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS5RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS5RowChanging(Me, New ANALISIS5RowChangeEvent(CType(e.Row,ANALISIS5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS5RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS5RowDeleted(Me, New ANALISIS5RowChangeEvent(CType(e.Row,ANALISIS5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS5RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS5RowDeleting(Me, New ANALISIS5RowChangeEvent(CType(e.Row,ANALISIS5Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS5Row(ByVal row As ANALISIS5Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS5DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS6DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS6"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS6Row
            Get
                Return CType(Me.Rows(index),ANALISIS6Row)
            End Get
        End Property
        
        Public Event ANALISIS6RowChanging As ANALISIS6RowChangeEventHandler
        
        Public Event ANALISIS6RowChanged As ANALISIS6RowChangeEventHandler
        
        Public Event ANALISIS6RowDeleting As ANALISIS6RowChangeEventHandler
        
        Public Event ANALISIS6RowDeleted As ANALISIS6RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS6Row(ByVal row As ANALISIS6Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS6Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISIS6Row
            Dim rowANALISIS6Row As ANALISIS6Row = CType(Me.NewRow,ANALISIS6Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISIS6Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS6Row)
            Return rowANALISIS6Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS6Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS6DataTable = CType(MyBase.Clone,ANALISIS6DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS6DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey6", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS6Row() As ANALISIS6Row
            Return CType(Me.NewRow,ANALISIS6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS6Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS6RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS6RowChanged(Me, New ANALISIS6RowChangeEvent(CType(e.Row,ANALISIS6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS6RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS6RowChanging(Me, New ANALISIS6RowChangeEvent(CType(e.Row,ANALISIS6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS6RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS6RowDeleted(Me, New ANALISIS6RowChangeEvent(CType(e.Row,ANALISIS6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS6RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS6RowDeleting(Me, New ANALISIS6RowChangeEvent(CType(e.Row,ANALISIS6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS6Row(ByVal row As ANALISIS6Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS6DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COMBO_ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COMBO_ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMBO_ANALISISRow
            Get
                Return CType(Me.Rows(index),COMBO_ANALISISRow)
            End Get
        End Property
        
        Public Event COMBO_ANALISISRowChanging As COMBO_ANALISISRowChangeEventHandler
        
        Public Event COMBO_ANALISISRowChanged As COMBO_ANALISISRowChangeEventHandler
        
        Public Event COMBO_ANALISISRowDeleting As COMBO_ANALISISRowChangeEventHandler
        
        Public Event COMBO_ANALISISRowDeleted As COMBO_ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOMBO_ANALISISRow(ByVal row As COMBO_ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOMBO_ANALISISRow(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String) As COMBO_ANALISISRow
            Dim rowCOMBO_ANALISISRow As COMBO_ANALISISRow = CType(Me.NewRow,COMBO_ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS}
            rowCOMBO_ANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOMBO_ANALISISRow)
            Return rowCOMBO_ANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As COMBO_ANALISISRow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),COMBO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COMBO_ANALISISDataTable = CType(MyBase.Clone,COMBO_ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COMBO_ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey1", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOMBO_ANALISISRow() As COMBO_ANALISISRow
            Return CType(Me.NewRow,COMBO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COMBO_ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COMBO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMBO_ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowChanged(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMBO_ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowChanging(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMBO_ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowDeleted(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMBO_ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent COMBO_ANALISISRowDeleting(Me, New COMBO_ANALISISRowChangeEvent(CType(e.Row,COMBO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOMBO_ANALISISRow(ByVal row As COMBO_ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COMBO_ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS7DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS7"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS7Row
            Get
                Return CType(Me.Rows(index),ANALISIS7Row)
            End Get
        End Property
        
        Public Event ANALISIS7RowChanging As ANALISIS7RowChangeEventHandler
        
        Public Event ANALISIS7RowChanged As ANALISIS7RowChangeEventHandler
        
        Public Event ANALISIS7RowDeleting As ANALISIS7RowChangeEventHandler
        
        Public Event ANALISIS7RowDeleted As ANALISIS7RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS7Row(ByVal row As ANALISIS7Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS7Row(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As ANALISIS7Row
            Dim rowANALISIS7Row As ANALISIS7Row = CType(Me.NewRow,ANALISIS7Row)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowANALISIS7Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS7Row)
            Return rowANALISIS7Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS7Row
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS7Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS7DataTable = CType(MyBase.Clone,ANALISIS7DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS7DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey8", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS7Row() As ANALISIS7Row
            Return CType(Me.NewRow,ANALISIS7Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS7Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS7Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS7RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS7RowChanged(Me, New ANALISIS7RowChangeEvent(CType(e.Row,ANALISIS7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS7RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS7RowChanging(Me, New ANALISIS7RowChangeEvent(CType(e.Row,ANALISIS7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS7RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS7RowDeleted(Me, New ANALISIS7RowChangeEvent(CType(e.Row,ANALISIS7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS7RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS7RowDeleting(Me, New ANALISIS7RowChangeEvent(CType(e.Row,ANALISIS7Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS7Row(ByVal row As ANALISIS7Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS7DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MUESTRADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnTMU_MUESTRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MUESTRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_MUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_MUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MUESTRARow
            Get
                Return CType(Me.Rows(index),MUESTRARow)
            End Get
        End Property
        
        Public Event MUESTRARowChanging As MUESTRARowChangeEventHandler
        
        Public Event MUESTRARowChanged As MUESTRARowChangeEventHandler
        
        Public Event MUESTRARowDeleting As MUESTRARowChangeEventHandler
        
        Public Event MUESTRARowDeleted As MUESTRARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMUESTRARow(ByVal row As MUESTRARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMUESTRARow(ByVal TMU_CODIGO As Integer, ByVal TMU_MUESTRA As String) As MUESTRARow
            Dim rowMUESTRARow As MUESTRARow = CType(Me.NewRow,MUESTRARow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, TMU_MUESTRA}
            rowMUESTRARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMUESTRARow)
            Return rowMUESTRARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTMU_CODIGO(ByVal TMU_CODIGO As Integer) As MUESTRARow
            Return CType(Me.Rows.Find(New Object() {TMU_CODIGO}),MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MUESTRADataTable = CType(MyBase.Clone,MUESTRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MUESTRADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnTMU_MUESTRA = MyBase.Columns("TMU_MUESTRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnTMU_MUESTRA = New Global.System.Data.DataColumn("TMU_MUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_MUESTRA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey9", New Global.System.Data.DataColumn() {Me.columnTMU_CODIGO}, true))
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnTMU_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMUESTRARow() As MUESTRARow
            Return CType(Me.NewRow,MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MUESTRARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MUESTRARowChangedEvent) Is Nothing) Then
                RaiseEvent MUESTRARowChanged(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MUESTRARowChangingEvent) Is Nothing) Then
                RaiseEvent MUESTRARowChanging(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MUESTRARowDeletedEvent) Is Nothing) Then
                RaiseEvent MUESTRARowDeleted(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MUESTRARowDeletingEvent) Is Nothing) Then
                RaiseEvent MUESTRARowDeleting(Me, New MUESTRARowChangeEvent(CType(e.Row,MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMUESTRARow(ByVal row As MUESTRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MUESTRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SUBMUESTRADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_DESCRIPCION As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SUBMUESTRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SUBMUESTRARow
            Get
                Return CType(Me.Rows(index),SUBMUESTRARow)
            End Get
        End Property
        
        Public Event SUBMUESTRARowChanging As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowChanged As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowDeleting As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowDeleted As SUBMUESTRARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSUBMUESTRARow(ByVal row As SUBMUESTRARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSUBMUESTRARow(ByVal SUB_CODIGO As Integer, ByVal SUB_DESCRIPCION As String, ByVal TMU_CODIGO As Integer) As SUBMUESTRARow
            Dim rowSUBMUESTRARow As SUBMUESTRARow = CType(Me.NewRow,SUBMUESTRARow)
            Dim columnValuesArray() As Object = New Object() {SUB_CODIGO, SUB_DESCRIPCION, TMU_CODIGO}
            rowSUBMUESTRARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSUBMUESTRARow)
            Return rowSUBMUESTRARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySUB_CODIGO(ByVal SUB_CODIGO As Integer) As SUBMUESTRARow
            Return CType(Me.Rows.Find(New Object() {SUB_CODIGO}),SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SUBMUESTRADataTable = CType(MyBase.Clone,SUBMUESTRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SUBMUESTRADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnSUB_DESCRIPCION = MyBase.Columns("SUB_DESCRIPCION")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnSUB_DESCRIPCION = New Global.System.Data.DataColumn("SUB_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_DESCRIPCION)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_MantenedorKey10", New Global.System.Data.DataColumn() {Me.columnSUB_CODIGO}, true))
            Me.columnSUB_CODIGO.AllowDBNull = false
            Me.columnSUB_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSUBMUESTRARow() As SUBMUESTRARow
            Return CType(Me.NewRow,SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SUBMUESTRARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SUBMUESTRARowChangedEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowChanged(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SUBMUESTRARowChangingEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowChanging(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SUBMUESTRARowDeletedEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowDeleted(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SUBMUESTRARowDeletingEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowDeleting(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSUBMUESTRARow(ByVal row As SUBMUESTRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SUBMUESTRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CODIGO_ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CODIGO_ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CODIGO_ANALISISRow
            Get
                Return CType(Me.Rows(index),CODIGO_ANALISISRow)
            End Get
        End Property
        
        Public Event CODIGO_ANALISISRowChanging As CODIGO_ANALISISRowChangeEventHandler
        
        Public Event CODIGO_ANALISISRowChanged As CODIGO_ANALISISRowChangeEventHandler
        
        Public Event CODIGO_ANALISISRowDeleting As CODIGO_ANALISISRowChangeEventHandler
        
        Public Event CODIGO_ANALISISRowDeleted As CODIGO_ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCODIGO_ANALISISRow(ByVal row As CODIGO_ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCODIGO_ANALISISRow(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String) As CODIGO_ANALISISRow
            Dim rowCODIGO_ANALISISRow As CODIGO_ANALISISRow = CType(Me.NewRow,CODIGO_ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS}
            rowCODIGO_ANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCODIGO_ANALISISRow)
            Return rowCODIGO_ANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CODIGO_ANALISISDataTable = CType(MyBase.Clone,CODIGO_ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CODIGO_ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnANA_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCODIGO_ANALISISRow() As CODIGO_ANALISISRow
            Return CType(Me.NewRow,CODIGO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CODIGO_ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CODIGO_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CODIGO_ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowChanged(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CODIGO_ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowChanging(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CODIGO_ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowDeleted(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CODIGO_ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent CODIGO_ANALISISRowDeleting(Me, New CODIGO_ANALISISRowChangeEvent(CType(e.Row,CODIGO_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCODIGO_ANALISISRow(ByVal row As CODIGO_ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Mantenedor = New Cjto_Mantenedor
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CODIGO_ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS As ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS = CType(Me.Table,ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS1Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS1 As ANALISIS1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS1 = CType(Me.Table,ANALISIS1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS1.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS1.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS1.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS1.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS1.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS1.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS1.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS1.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS1.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS1.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS1.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS1.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS1.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS1.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS2Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS2 As ANALISIS2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS2 = CType(Me.Table,ANALISIS2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS2.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS2.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS2.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS2.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS2.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS2.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS2.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS2.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS2.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS2.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS2.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS2.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS2.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS2.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS2.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS3Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS3 As ANALISIS3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS3 = CType(Me.Table,ANALISIS3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS3.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS3.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS3.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS3.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS3.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS3.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS3.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS3.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS3.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS3.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS3.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS3.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS3.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS3.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS3.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS4Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS4 As ANALISIS4DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS4 = CType(Me.Table,ANALISIS4DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS4.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS4.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS4.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS4' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS4.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS4.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS4.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS4.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS4.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS4.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS4.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS4.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS4.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS4.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS4.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS4.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS5Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS5 As ANALISIS5DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS5 = CType(Me.Table,ANALISIS5DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS5.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS5.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS5.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS5' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS5.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS5.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS5.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS5.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS5.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS5.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS5.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS5.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS5.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS5.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS5.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS5.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS6Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS6 As ANALISIS6DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS6 = CType(Me.Table,ANALISIS6DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS6.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS6.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS6.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS6' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS6.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS6.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS6.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS6.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS6.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS6.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS6.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS6.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS6.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS6.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS6.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS6.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COMBO_ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOMBO_ANALISIS As COMBO_ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMBO_ANALISIS = CType(Me.Table,COMBO_ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCOMBO_ANALISIS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCOMBO_ANALISIS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'COMBO_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCOMBO_ANALISIS.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS7Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS7 As ANALISIS7DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS7 = CType(Me.Table,ANALISIS7DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS7.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS7.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS7.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS7' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS7.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS7.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS7.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS7.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableANALISIS7.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableANALISIS7.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableANALISIS7.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableANALISIS7.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableANALISIS7.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableANALISIS7.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS7.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS7.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MUESTRARow
        Inherits Global.System.Data.DataRow
        
        Private tableMUESTRA As MUESTRADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMUESTRA = CType(Me.Table,MUESTRADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableMUESTRA.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableMUESTRA.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_MUESTRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMUESTRA.TMU_MUESTRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_MUESTRA' de la tabla 'MUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMUESTRA.TMU_MUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_MUESTRANull() As Boolean
            Return Me.IsNull(Me.tableMUESTRA.TMU_MUESTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_MUESTRANull()
            Me(Me.tableMUESTRA.TMU_MUESTRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SUBMUESTRARow
        Inherits Global.System.Data.DataRow
        
        Private tableSUBMUESTRA As SUBMUESTRADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSUBMUESTRA = CType(Me.Table,SUBMUESTRADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableSUBMUESTRA.SUB_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableSUBMUESTRA.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_DESCRIPCION' de la tabla 'SUBMUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'SUBMUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_DESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_DESCRIPCIONNull()
            Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableSUBMUESTRA.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CODIGO_ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableCODIGO_ANALISIS As CODIGO_ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCODIGO_ANALISIS = CType(Me.Table,CODIGO_ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCODIGO_ANALISIS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCODIGO_ANALISIS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCODIGO_ANALISIS.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'CODIGO_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCODIGO_ANALISIS.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCODIGO_ANALISIS.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCODIGO_ANALISIS.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS4RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS4Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS4Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS5RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS5Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS5Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS5Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS6RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS6Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS6Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS6Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COMBO_ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COMBO_ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COMBO_ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COMBO_ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS7RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS7Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS7Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS7Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MUESTRARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MUESTRARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MUESTRARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MUESTRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SUBMUESTRARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SUBMUESTRARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SUBMUESTRARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SUBMUESTRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CODIGO_ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CODIGO_ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CODIGO_ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CODIGO_ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
