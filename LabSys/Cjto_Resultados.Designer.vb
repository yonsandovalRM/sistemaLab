'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Cjto_Resultados"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Cjto_Resultados
    Inherits Global.System.Data.DataSet
    
    Private tableIMPXHOJA1 As IMPXHOJA1DataTable
    
    Private tableNOTA_RESULTADO As NOTA_RESULTADODataTable
    
    Private tableMNEM As MNEMDataTable
    
    Private tableRANGO_MUESTRA As RANGO_MUESTRADataTable
    
    Private tableIMPXHOJA As IMPXHOJADataTable
    
    Private tableHOMOLOGACION_ESPECIE As HOMOLOGACION_ESPECIEDataTable
    
    Private tableDICCIONARIO As DICCIONARIODataTable
    
    Private tableIMPXHOJA2 As IMPXHOJA2DataTable
    
    Private tableRANGO_SUELO As RANGO_SUELODataTable
    
    Private tableIMPXHOJA_SUELO As IMPXHOJA_SUELODataTable
    
    Private tableFORMATO_RESULTADO As FORMATO_RESULTADODataTable
    
    Private tableRANGO_DBF As RANGO_DBFDataTable
    
    Private tableNOTA_AUTO_RESULTADOS As NOTA_AUTO_RESULTADOSDataTable
    
    Private tableIMPXHOJA_AGUA As IMPXHOJA_AGUADataTable
    
    Private tableELEMENTOS As ELEMENTOSDataTable
    
    Private tableCOLUMNAS_FERTILIDAD As COLUMNAS_FERTILIDADDataTable
    
    Private tableRANGO_AGUA_CE As RANGO_AGUA_CEDataTable
    
    Private tableTABLA_DIGRES2 As TABLA_DIGRES2DataTable
    
    Private tableSUBMUESTRA As SUBMUESTRADataTable
    
    Private tableMSUE As MSUEDataTable
    
    Private tableANALISIS_ELEMENTOS As ANALISIS_ELEMENTOSDataTable
    
    Private tableNLAB_COLUMNAS As NLAB_COLUMNASDataTable
    
    Private tableANALISIS_ELE As ANALISIS_ELEDataTable
    
    Private tableFIRMA_NOMBRE As FIRMA_NOMBREDataTable
    
    Private tableFIRMA_CARGO As FIRMA_CARGODataTable
    
    Private tableRANGO_FERTILIDAD As RANGO_FERTILIDADDataTable
    
    Private tableRANGO_FERTORG As RANGO_FERTORGDataTable
    
    Private tableCOLUMNAS_SALINIDAD As COLUMNAS_SALINIDADDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IMPXHOJA1")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA1DataTable(ds.Tables("IMPXHOJA1")))
            End If
            If (Not (ds.Tables("NOTA_RESULTADO")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_RESULTADODataTable(ds.Tables("NOTA_RESULTADO")))
            End If
            If (Not (ds.Tables("MNEM")) Is Nothing) Then
                MyBase.Tables.Add(New MNEMDataTable(ds.Tables("MNEM")))
            End If
            If (Not (ds.Tables("RANGO_MUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_MUESTRADataTable(ds.Tables("RANGO_MUESTRA")))
            End If
            If (Not (ds.Tables("IMPXHOJA")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJADataTable(ds.Tables("IMPXHOJA")))
            End If
            If (Not (ds.Tables("HOMOLOGACION_ESPECIE")) Is Nothing) Then
                MyBase.Tables.Add(New HOMOLOGACION_ESPECIEDataTable(ds.Tables("HOMOLOGACION_ESPECIE")))
            End If
            If (Not (ds.Tables("DICCIONARIO")) Is Nothing) Then
                MyBase.Tables.Add(New DICCIONARIODataTable(ds.Tables("DICCIONARIO")))
            End If
            If (Not (ds.Tables("IMPXHOJA2")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA2DataTable(ds.Tables("IMPXHOJA2")))
            End If
            If (Not (ds.Tables("RANGO_SUELO")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_SUELODataTable(ds.Tables("RANGO_SUELO")))
            End If
            If (Not (ds.Tables("IMPXHOJA_SUELO")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA_SUELODataTable(ds.Tables("IMPXHOJA_SUELO")))
            End If
            If (Not (ds.Tables("FORMATO_RESULTADO")) Is Nothing) Then
                MyBase.Tables.Add(New FORMATO_RESULTADODataTable(ds.Tables("FORMATO_RESULTADO")))
            End If
            If (Not (ds.Tables("RANGO_DBF")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_DBFDataTable(ds.Tables("RANGO_DBF")))
            End If
            If (Not (ds.Tables("NOTA_AUTO_RESULTADOS")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_AUTO_RESULTADOSDataTable(ds.Tables("NOTA_AUTO_RESULTADOS")))
            End If
            If (Not (ds.Tables("IMPXHOJA_AGUA")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA_AGUADataTable(ds.Tables("IMPXHOJA_AGUA")))
            End If
            If (Not (ds.Tables("ELEMENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New ELEMENTOSDataTable(ds.Tables("ELEMENTOS")))
            End If
            If (Not (ds.Tables("COLUMNAS_FERTILIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New COLUMNAS_FERTILIDADDataTable(ds.Tables("COLUMNAS_FERTILIDAD")))
            End If
            If (Not (ds.Tables("RANGO_AGUA_CE")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_AGUA_CEDataTable(ds.Tables("RANGO_AGUA_CE")))
            End If
            If (Not (ds.Tables("TABLA_DIGRES2")) Is Nothing) Then
                MyBase.Tables.Add(New TABLA_DIGRES2DataTable(ds.Tables("TABLA_DIGRES2")))
            End If
            If (Not (ds.Tables("SUBMUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New SUBMUESTRADataTable(ds.Tables("SUBMUESTRA")))
            End If
            If (Not (ds.Tables("MSUE")) Is Nothing) Then
                MyBase.Tables.Add(New MSUEDataTable(ds.Tables("MSUE")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOSDataTable(ds.Tables("ANALISIS_ELEMENTOS")))
            End If
            If (Not (ds.Tables("NLAB_COLUMNAS")) Is Nothing) Then
                MyBase.Tables.Add(New NLAB_COLUMNASDataTable(ds.Tables("NLAB_COLUMNAS")))
            End If
            If (Not (ds.Tables("ANALISIS_ELE")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEDataTable(ds.Tables("ANALISIS_ELE")))
            End If
            If (Not (ds.Tables("FIRMA_NOMBRE")) Is Nothing) Then
                MyBase.Tables.Add(New FIRMA_NOMBREDataTable(ds.Tables("FIRMA_NOMBRE")))
            End If
            If (Not (ds.Tables("FIRMA_CARGO")) Is Nothing) Then
                MyBase.Tables.Add(New FIRMA_CARGODataTable(ds.Tables("FIRMA_CARGO")))
            End If
            If (Not (ds.Tables("RANGO_FERTILIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_FERTILIDADDataTable(ds.Tables("RANGO_FERTILIDAD")))
            End If
            If (Not (ds.Tables("RANGO_FERTORG")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_FERTORGDataTable(ds.Tables("RANGO_FERTORG")))
            End If
            If (Not (ds.Tables("COLUMNAS_SALINIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New COLUMNAS_SALINIDADDataTable(ds.Tables("COLUMNAS_SALINIDAD")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPXHOJA1() As IMPXHOJA1DataTable
        Get
            Return Me.tableIMPXHOJA1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NOTA_RESULTADO() As NOTA_RESULTADODataTable
        Get
            Return Me.tableNOTA_RESULTADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MNEM() As MNEMDataTable
        Get
            Return Me.tableMNEM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RANGO_MUESTRA() As RANGO_MUESTRADataTable
        Get
            Return Me.tableRANGO_MUESTRA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPXHOJA() As IMPXHOJADataTable
        Get
            Return Me.tableIMPXHOJA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HOMOLOGACION_ESPECIE() As HOMOLOGACION_ESPECIEDataTable
        Get
            Return Me.tableHOMOLOGACION_ESPECIE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DICCIONARIO() As DICCIONARIODataTable
        Get
            Return Me.tableDICCIONARIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPXHOJA2() As IMPXHOJA2DataTable
        Get
            Return Me.tableIMPXHOJA2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RANGO_SUELO() As RANGO_SUELODataTable
        Get
            Return Me.tableRANGO_SUELO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPXHOJA_SUELO() As IMPXHOJA_SUELODataTable
        Get
            Return Me.tableIMPXHOJA_SUELO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FORMATO_RESULTADO() As FORMATO_RESULTADODataTable
        Get
            Return Me.tableFORMATO_RESULTADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RANGO_DBF() As RANGO_DBFDataTable
        Get
            Return Me.tableRANGO_DBF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NOTA_AUTO_RESULTADOS() As NOTA_AUTO_RESULTADOSDataTable
        Get
            Return Me.tableNOTA_AUTO_RESULTADOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMPXHOJA_AGUA() As IMPXHOJA_AGUADataTable
        Get
            Return Me.tableIMPXHOJA_AGUA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ELEMENTOS() As ELEMENTOSDataTable
        Get
            Return Me.tableELEMENTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COLUMNAS_FERTILIDAD() As COLUMNAS_FERTILIDADDataTable
        Get
            Return Me.tableCOLUMNAS_FERTILIDAD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RANGO_AGUA_CE() As RANGO_AGUA_CEDataTable
        Get
            Return Me.tableRANGO_AGUA_CE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TABLA_DIGRES2() As TABLA_DIGRES2DataTable
        Get
            Return Me.tableTABLA_DIGRES2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SUBMUESTRA() As SUBMUESTRADataTable
        Get
            Return Me.tableSUBMUESTRA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MSUE() As MSUEDataTable
        Get
            Return Me.tableMSUE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS_ELEMENTOS() As ANALISIS_ELEMENTOSDataTable
        Get
            Return Me.tableANALISIS_ELEMENTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NLAB_COLUMNAS() As NLAB_COLUMNASDataTable
        Get
            Return Me.tableNLAB_COLUMNAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS_ELE() As ANALISIS_ELEDataTable
        Get
            Return Me.tableANALISIS_ELE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FIRMA_NOMBRE() As FIRMA_NOMBREDataTable
        Get
            Return Me.tableFIRMA_NOMBRE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FIRMA_CARGO() As FIRMA_CARGODataTable
        Get
            Return Me.tableFIRMA_CARGO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RANGO_FERTILIDAD() As RANGO_FERTILIDADDataTable
        Get
            Return Me.tableRANGO_FERTILIDAD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RANGO_FERTORG() As RANGO_FERTORGDataTable
        Get
            Return Me.tableRANGO_FERTORG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COLUMNAS_SALINIDAD() As COLUMNAS_SALINIDADDataTable
        Get
            Return Me.tableCOLUMNAS_SALINIDAD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Cjto_Resultados = CType(MyBase.Clone,Cjto_Resultados)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("IMPXHOJA1")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA1DataTable(ds.Tables("IMPXHOJA1")))
            End If
            If (Not (ds.Tables("NOTA_RESULTADO")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_RESULTADODataTable(ds.Tables("NOTA_RESULTADO")))
            End If
            If (Not (ds.Tables("MNEM")) Is Nothing) Then
                MyBase.Tables.Add(New MNEMDataTable(ds.Tables("MNEM")))
            End If
            If (Not (ds.Tables("RANGO_MUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_MUESTRADataTable(ds.Tables("RANGO_MUESTRA")))
            End If
            If (Not (ds.Tables("IMPXHOJA")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJADataTable(ds.Tables("IMPXHOJA")))
            End If
            If (Not (ds.Tables("HOMOLOGACION_ESPECIE")) Is Nothing) Then
                MyBase.Tables.Add(New HOMOLOGACION_ESPECIEDataTable(ds.Tables("HOMOLOGACION_ESPECIE")))
            End If
            If (Not (ds.Tables("DICCIONARIO")) Is Nothing) Then
                MyBase.Tables.Add(New DICCIONARIODataTable(ds.Tables("DICCIONARIO")))
            End If
            If (Not (ds.Tables("IMPXHOJA2")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA2DataTable(ds.Tables("IMPXHOJA2")))
            End If
            If (Not (ds.Tables("RANGO_SUELO")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_SUELODataTable(ds.Tables("RANGO_SUELO")))
            End If
            If (Not (ds.Tables("IMPXHOJA_SUELO")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA_SUELODataTable(ds.Tables("IMPXHOJA_SUELO")))
            End If
            If (Not (ds.Tables("FORMATO_RESULTADO")) Is Nothing) Then
                MyBase.Tables.Add(New FORMATO_RESULTADODataTable(ds.Tables("FORMATO_RESULTADO")))
            End If
            If (Not (ds.Tables("RANGO_DBF")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_DBFDataTable(ds.Tables("RANGO_DBF")))
            End If
            If (Not (ds.Tables("NOTA_AUTO_RESULTADOS")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_AUTO_RESULTADOSDataTable(ds.Tables("NOTA_AUTO_RESULTADOS")))
            End If
            If (Not (ds.Tables("IMPXHOJA_AGUA")) Is Nothing) Then
                MyBase.Tables.Add(New IMPXHOJA_AGUADataTable(ds.Tables("IMPXHOJA_AGUA")))
            End If
            If (Not (ds.Tables("ELEMENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New ELEMENTOSDataTable(ds.Tables("ELEMENTOS")))
            End If
            If (Not (ds.Tables("COLUMNAS_FERTILIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New COLUMNAS_FERTILIDADDataTable(ds.Tables("COLUMNAS_FERTILIDAD")))
            End If
            If (Not (ds.Tables("RANGO_AGUA_CE")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_AGUA_CEDataTable(ds.Tables("RANGO_AGUA_CE")))
            End If
            If (Not (ds.Tables("TABLA_DIGRES2")) Is Nothing) Then
                MyBase.Tables.Add(New TABLA_DIGRES2DataTable(ds.Tables("TABLA_DIGRES2")))
            End If
            If (Not (ds.Tables("SUBMUESTRA")) Is Nothing) Then
                MyBase.Tables.Add(New SUBMUESTRADataTable(ds.Tables("SUBMUESTRA")))
            End If
            If (Not (ds.Tables("MSUE")) Is Nothing) Then
                MyBase.Tables.Add(New MSUEDataTable(ds.Tables("MSUE")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOSDataTable(ds.Tables("ANALISIS_ELEMENTOS")))
            End If
            If (Not (ds.Tables("NLAB_COLUMNAS")) Is Nothing) Then
                MyBase.Tables.Add(New NLAB_COLUMNASDataTable(ds.Tables("NLAB_COLUMNAS")))
            End If
            If (Not (ds.Tables("ANALISIS_ELE")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEDataTable(ds.Tables("ANALISIS_ELE")))
            End If
            If (Not (ds.Tables("FIRMA_NOMBRE")) Is Nothing) Then
                MyBase.Tables.Add(New FIRMA_NOMBREDataTable(ds.Tables("FIRMA_NOMBRE")))
            End If
            If (Not (ds.Tables("FIRMA_CARGO")) Is Nothing) Then
                MyBase.Tables.Add(New FIRMA_CARGODataTable(ds.Tables("FIRMA_CARGO")))
            End If
            If (Not (ds.Tables("RANGO_FERTILIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_FERTILIDADDataTable(ds.Tables("RANGO_FERTILIDAD")))
            End If
            If (Not (ds.Tables("RANGO_FERTORG")) Is Nothing) Then
                MyBase.Tables.Add(New RANGO_FERTORGDataTable(ds.Tables("RANGO_FERTORG")))
            End If
            If (Not (ds.Tables("COLUMNAS_SALINIDAD")) Is Nothing) Then
                MyBase.Tables.Add(New COLUMNAS_SALINIDADDataTable(ds.Tables("COLUMNAS_SALINIDAD")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableIMPXHOJA1 = CType(MyBase.Tables("IMPXHOJA1"),IMPXHOJA1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPXHOJA1) Is Nothing) Then
                Me.tableIMPXHOJA1.InitVars
            End If
        End If
        Me.tableNOTA_RESULTADO = CType(MyBase.Tables("NOTA_RESULTADO"),NOTA_RESULTADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableNOTA_RESULTADO) Is Nothing) Then
                Me.tableNOTA_RESULTADO.InitVars
            End If
        End If
        Me.tableMNEM = CType(MyBase.Tables("MNEM"),MNEMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMNEM) Is Nothing) Then
                Me.tableMNEM.InitVars
            End If
        End If
        Me.tableRANGO_MUESTRA = CType(MyBase.Tables("RANGO_MUESTRA"),RANGO_MUESTRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableRANGO_MUESTRA) Is Nothing) Then
                Me.tableRANGO_MUESTRA.InitVars
            End If
        End If
        Me.tableIMPXHOJA = CType(MyBase.Tables("IMPXHOJA"),IMPXHOJADataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPXHOJA) Is Nothing) Then
                Me.tableIMPXHOJA.InitVars
            End If
        End If
        Me.tableHOMOLOGACION_ESPECIE = CType(MyBase.Tables("HOMOLOGACION_ESPECIE"),HOMOLOGACION_ESPECIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHOMOLOGACION_ESPECIE) Is Nothing) Then
                Me.tableHOMOLOGACION_ESPECIE.InitVars
            End If
        End If
        Me.tableDICCIONARIO = CType(MyBase.Tables("DICCIONARIO"),DICCIONARIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableDICCIONARIO) Is Nothing) Then
                Me.tableDICCIONARIO.InitVars
            End If
        End If
        Me.tableIMPXHOJA2 = CType(MyBase.Tables("IMPXHOJA2"),IMPXHOJA2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPXHOJA2) Is Nothing) Then
                Me.tableIMPXHOJA2.InitVars
            End If
        End If
        Me.tableRANGO_SUELO = CType(MyBase.Tables("RANGO_SUELO"),RANGO_SUELODataTable)
        If (initTable = true) Then
            If (Not (Me.tableRANGO_SUELO) Is Nothing) Then
                Me.tableRANGO_SUELO.InitVars
            End If
        End If
        Me.tableIMPXHOJA_SUELO = CType(MyBase.Tables("IMPXHOJA_SUELO"),IMPXHOJA_SUELODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPXHOJA_SUELO) Is Nothing) Then
                Me.tableIMPXHOJA_SUELO.InitVars
            End If
        End If
        Me.tableFORMATO_RESULTADO = CType(MyBase.Tables("FORMATO_RESULTADO"),FORMATO_RESULTADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableFORMATO_RESULTADO) Is Nothing) Then
                Me.tableFORMATO_RESULTADO.InitVars
            End If
        End If
        Me.tableRANGO_DBF = CType(MyBase.Tables("RANGO_DBF"),RANGO_DBFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRANGO_DBF) Is Nothing) Then
                Me.tableRANGO_DBF.InitVars
            End If
        End If
        Me.tableNOTA_AUTO_RESULTADOS = CType(MyBase.Tables("NOTA_AUTO_RESULTADOS"),NOTA_AUTO_RESULTADOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNOTA_AUTO_RESULTADOS) Is Nothing) Then
                Me.tableNOTA_AUTO_RESULTADOS.InitVars
            End If
        End If
        Me.tableIMPXHOJA_AGUA = CType(MyBase.Tables("IMPXHOJA_AGUA"),IMPXHOJA_AGUADataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMPXHOJA_AGUA) Is Nothing) Then
                Me.tableIMPXHOJA_AGUA.InitVars
            End If
        End If
        Me.tableELEMENTOS = CType(MyBase.Tables("ELEMENTOS"),ELEMENTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableELEMENTOS) Is Nothing) Then
                Me.tableELEMENTOS.InitVars
            End If
        End If
        Me.tableCOLUMNAS_FERTILIDAD = CType(MyBase.Tables("COLUMNAS_FERTILIDAD"),COLUMNAS_FERTILIDADDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOLUMNAS_FERTILIDAD) Is Nothing) Then
                Me.tableCOLUMNAS_FERTILIDAD.InitVars
            End If
        End If
        Me.tableRANGO_AGUA_CE = CType(MyBase.Tables("RANGO_AGUA_CE"),RANGO_AGUA_CEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRANGO_AGUA_CE) Is Nothing) Then
                Me.tableRANGO_AGUA_CE.InitVars
            End If
        End If
        Me.tableTABLA_DIGRES2 = CType(MyBase.Tables("TABLA_DIGRES2"),TABLA_DIGRES2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableTABLA_DIGRES2) Is Nothing) Then
                Me.tableTABLA_DIGRES2.InitVars
            End If
        End If
        Me.tableSUBMUESTRA = CType(MyBase.Tables("SUBMUESTRA"),SUBMUESTRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSUBMUESTRA) Is Nothing) Then
                Me.tableSUBMUESTRA.InitVars
            End If
        End If
        Me.tableMSUE = CType(MyBase.Tables("MSUE"),MSUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMSUE) Is Nothing) Then
                Me.tableMSUE.InitVars
            End If
        End If
        Me.tableANALISIS_ELEMENTOS = CType(MyBase.Tables("ANALISIS_ELEMENTOS"),ANALISIS_ELEMENTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS_ELEMENTOS) Is Nothing) Then
                Me.tableANALISIS_ELEMENTOS.InitVars
            End If
        End If
        Me.tableNLAB_COLUMNAS = CType(MyBase.Tables("NLAB_COLUMNAS"),NLAB_COLUMNASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNLAB_COLUMNAS) Is Nothing) Then
                Me.tableNLAB_COLUMNAS.InitVars
            End If
        End If
        Me.tableANALISIS_ELE = CType(MyBase.Tables("ANALISIS_ELE"),ANALISIS_ELEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS_ELE) Is Nothing) Then
                Me.tableANALISIS_ELE.InitVars
            End If
        End If
        Me.tableFIRMA_NOMBRE = CType(MyBase.Tables("FIRMA_NOMBRE"),FIRMA_NOMBREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFIRMA_NOMBRE) Is Nothing) Then
                Me.tableFIRMA_NOMBRE.InitVars
            End If
        End If
        Me.tableFIRMA_CARGO = CType(MyBase.Tables("FIRMA_CARGO"),FIRMA_CARGODataTable)
        If (initTable = true) Then
            If (Not (Me.tableFIRMA_CARGO) Is Nothing) Then
                Me.tableFIRMA_CARGO.InitVars
            End If
        End If
        Me.tableRANGO_FERTILIDAD = CType(MyBase.Tables("RANGO_FERTILIDAD"),RANGO_FERTILIDADDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRANGO_FERTILIDAD) Is Nothing) Then
                Me.tableRANGO_FERTILIDAD.InitVars
            End If
        End If
        Me.tableRANGO_FERTORG = CType(MyBase.Tables("RANGO_FERTORG"),RANGO_FERTORGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRANGO_FERTORG) Is Nothing) Then
                Me.tableRANGO_FERTORG.InitVars
            End If
        End If
        Me.tableCOLUMNAS_SALINIDAD = CType(MyBase.Tables("COLUMNAS_SALINIDAD"),COLUMNAS_SALINIDADDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOLUMNAS_SALINIDAD) Is Nothing) Then
                Me.tableCOLUMNAS_SALINIDAD.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Cjto_Resultados"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Cjto_Resultados.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableIMPXHOJA1 = New IMPXHOJA1DataTable
        MyBase.Tables.Add(Me.tableIMPXHOJA1)
        Me.tableNOTA_RESULTADO = New NOTA_RESULTADODataTable
        MyBase.Tables.Add(Me.tableNOTA_RESULTADO)
        Me.tableMNEM = New MNEMDataTable
        MyBase.Tables.Add(Me.tableMNEM)
        Me.tableRANGO_MUESTRA = New RANGO_MUESTRADataTable
        MyBase.Tables.Add(Me.tableRANGO_MUESTRA)
        Me.tableIMPXHOJA = New IMPXHOJADataTable
        MyBase.Tables.Add(Me.tableIMPXHOJA)
        Me.tableHOMOLOGACION_ESPECIE = New HOMOLOGACION_ESPECIEDataTable
        MyBase.Tables.Add(Me.tableHOMOLOGACION_ESPECIE)
        Me.tableDICCIONARIO = New DICCIONARIODataTable
        MyBase.Tables.Add(Me.tableDICCIONARIO)
        Me.tableIMPXHOJA2 = New IMPXHOJA2DataTable
        MyBase.Tables.Add(Me.tableIMPXHOJA2)
        Me.tableRANGO_SUELO = New RANGO_SUELODataTable
        MyBase.Tables.Add(Me.tableRANGO_SUELO)
        Me.tableIMPXHOJA_SUELO = New IMPXHOJA_SUELODataTable
        MyBase.Tables.Add(Me.tableIMPXHOJA_SUELO)
        Me.tableFORMATO_RESULTADO = New FORMATO_RESULTADODataTable
        MyBase.Tables.Add(Me.tableFORMATO_RESULTADO)
        Me.tableRANGO_DBF = New RANGO_DBFDataTable
        MyBase.Tables.Add(Me.tableRANGO_DBF)
        Me.tableNOTA_AUTO_RESULTADOS = New NOTA_AUTO_RESULTADOSDataTable
        MyBase.Tables.Add(Me.tableNOTA_AUTO_RESULTADOS)
        Me.tableIMPXHOJA_AGUA = New IMPXHOJA_AGUADataTable
        MyBase.Tables.Add(Me.tableIMPXHOJA_AGUA)
        Me.tableELEMENTOS = New ELEMENTOSDataTable
        MyBase.Tables.Add(Me.tableELEMENTOS)
        Me.tableCOLUMNAS_FERTILIDAD = New COLUMNAS_FERTILIDADDataTable
        MyBase.Tables.Add(Me.tableCOLUMNAS_FERTILIDAD)
        Me.tableRANGO_AGUA_CE = New RANGO_AGUA_CEDataTable
        MyBase.Tables.Add(Me.tableRANGO_AGUA_CE)
        Me.tableTABLA_DIGRES2 = New TABLA_DIGRES2DataTable
        MyBase.Tables.Add(Me.tableTABLA_DIGRES2)
        Me.tableSUBMUESTRA = New SUBMUESTRADataTable
        MyBase.Tables.Add(Me.tableSUBMUESTRA)
        Me.tableMSUE = New MSUEDataTable
        MyBase.Tables.Add(Me.tableMSUE)
        Me.tableANALISIS_ELEMENTOS = New ANALISIS_ELEMENTOSDataTable
        MyBase.Tables.Add(Me.tableANALISIS_ELEMENTOS)
        Me.tableNLAB_COLUMNAS = New NLAB_COLUMNASDataTable
        MyBase.Tables.Add(Me.tableNLAB_COLUMNAS)
        Me.tableANALISIS_ELE = New ANALISIS_ELEDataTable
        MyBase.Tables.Add(Me.tableANALISIS_ELE)
        Me.tableFIRMA_NOMBRE = New FIRMA_NOMBREDataTable
        MyBase.Tables.Add(Me.tableFIRMA_NOMBRE)
        Me.tableFIRMA_CARGO = New FIRMA_CARGODataTable
        MyBase.Tables.Add(Me.tableFIRMA_CARGO)
        Me.tableRANGO_FERTILIDAD = New RANGO_FERTILIDADDataTable
        MyBase.Tables.Add(Me.tableRANGO_FERTILIDAD)
        Me.tableRANGO_FERTORG = New RANGO_FERTORGDataTable
        MyBase.Tables.Add(Me.tableRANGO_FERTORG)
        Me.tableCOLUMNAS_SALINIDAD = New COLUMNAS_SALINIDADDataTable
        MyBase.Tables.Add(Me.tableCOLUMNAS_SALINIDAD)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMPXHOJA1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNOTA_RESULTADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMNEM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRANGO_MUESTRA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMPXHOJA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHOMOLOGACION_ESPECIE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDICCIONARIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMPXHOJA2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRANGO_SUELO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMPXHOJA_SUELO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFORMATO_RESULTADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRANGO_DBF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNOTA_AUTO_RESULTADOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMPXHOJA_AGUA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeELEMENTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOLUMNAS_FERTILIDAD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRANGO_AGUA_CE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTABLA_DIGRES2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSUBMUESTRA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMSUE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS_ELEMENTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNLAB_COLUMNAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS_ELE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFIRMA_NOMBRE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFIRMA_CARGO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRANGO_FERTILIDAD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRANGO_FERTORG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOLUMNAS_SALINIDAD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Cjto_Resultados = New Cjto_Resultados
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub IMPXHOJA1RowChangeEventHandler(ByVal sender As Object, ByVal e As IMPXHOJA1RowChangeEvent)
    
    Public Delegate Sub NOTA_RESULTADORowChangeEventHandler(ByVal sender As Object, ByVal e As NOTA_RESULTADORowChangeEvent)
    
    Public Delegate Sub MNEMRowChangeEventHandler(ByVal sender As Object, ByVal e As MNEMRowChangeEvent)
    
    Public Delegate Sub RANGO_MUESTRARowChangeEventHandler(ByVal sender As Object, ByVal e As RANGO_MUESTRARowChangeEvent)
    
    Public Delegate Sub IMPXHOJARowChangeEventHandler(ByVal sender As Object, ByVal e As IMPXHOJARowChangeEvent)
    
    Public Delegate Sub HOMOLOGACION_ESPECIERowChangeEventHandler(ByVal sender As Object, ByVal e As HOMOLOGACION_ESPECIERowChangeEvent)
    
    Public Delegate Sub DICCIONARIORowChangeEventHandler(ByVal sender As Object, ByVal e As DICCIONARIORowChangeEvent)
    
    Public Delegate Sub IMPXHOJA2RowChangeEventHandler(ByVal sender As Object, ByVal e As IMPXHOJA2RowChangeEvent)
    
    Public Delegate Sub RANGO_SUELORowChangeEventHandler(ByVal sender As Object, ByVal e As RANGO_SUELORowChangeEvent)
    
    Public Delegate Sub IMPXHOJA_SUELORowChangeEventHandler(ByVal sender As Object, ByVal e As IMPXHOJA_SUELORowChangeEvent)
    
    Public Delegate Sub FORMATO_RESULTADORowChangeEventHandler(ByVal sender As Object, ByVal e As FORMATO_RESULTADORowChangeEvent)
    
    Public Delegate Sub RANGO_DBFRowChangeEventHandler(ByVal sender As Object, ByVal e As RANGO_DBFRowChangeEvent)
    
    Public Delegate Sub NOTA_AUTO_RESULTADOSRowChangeEventHandler(ByVal sender As Object, ByVal e As NOTA_AUTO_RESULTADOSRowChangeEvent)
    
    Public Delegate Sub IMPXHOJA_AGUARowChangeEventHandler(ByVal sender As Object, ByVal e As IMPXHOJA_AGUARowChangeEvent)
    
    Public Delegate Sub ELEMENTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As ELEMENTOSRowChangeEvent)
    
    Public Delegate Sub COLUMNAS_FERTILIDADRowChangeEventHandler(ByVal sender As Object, ByVal e As COLUMNAS_FERTILIDADRowChangeEvent)
    
    Public Delegate Sub RANGO_AGUA_CERowChangeEventHandler(ByVal sender As Object, ByVal e As RANGO_AGUA_CERowChangeEvent)
    
    Public Delegate Sub TABLA_DIGRES2RowChangeEventHandler(ByVal sender As Object, ByVal e As TABLA_DIGRES2RowChangeEvent)
    
    Public Delegate Sub SUBMUESTRARowChangeEventHandler(ByVal sender As Object, ByVal e As SUBMUESTRARowChangeEvent)
    
    Public Delegate Sub MSUERowChangeEventHandler(ByVal sender As Object, ByVal e As MSUERowChangeEvent)
    
    Public Delegate Sub ANALISIS_ELEMENTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS_ELEMENTOSRowChangeEvent)
    
    Public Delegate Sub NLAB_COLUMNASRowChangeEventHandler(ByVal sender As Object, ByVal e As NLAB_COLUMNASRowChangeEvent)
    
    Public Delegate Sub ANALISIS_ELERowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS_ELERowChangeEvent)
    
    Public Delegate Sub FIRMA_NOMBRERowChangeEventHandler(ByVal sender As Object, ByVal e As FIRMA_NOMBRERowChangeEvent)
    
    Public Delegate Sub FIRMA_CARGORowChangeEventHandler(ByVal sender As Object, ByVal e As FIRMA_CARGORowChangeEvent)
    
    Public Delegate Sub RANGO_FERTILIDADRowChangeEventHandler(ByVal sender As Object, ByVal e As RANGO_FERTILIDADRowChangeEvent)
    
    Public Delegate Sub RANGO_FERTORGRowChangeEventHandler(ByVal sender As Object, ByVal e As RANGO_FERTORGRowChangeEvent)
    
    Public Delegate Sub COLUMNAS_SALINIDADRowChangeEventHandler(ByVal sender As Object, ByVal e As COLUMNAS_SALINIDADRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPXHOJA1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNLAB As Global.System.Data.DataColumn
        
        Private columnCOLUMNAD As Global.System.Data.DataColumn
        
        Private columnCOLUMNAH As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPXHOJA1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPXHOJA1Row
            Get
                Return CType(Me.Rows(index),IMPXHOJA1Row)
            End Get
        End Property
        
        Public Event IMPXHOJA1RowChanging As IMPXHOJA1RowChangeEventHandler
        
        Public Event IMPXHOJA1RowChanged As IMPXHOJA1RowChangeEventHandler
        
        Public Event IMPXHOJA1RowDeleting As IMPXHOJA1RowChangeEventHandler
        
        Public Event IMPXHOJA1RowDeleted As IMPXHOJA1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMPXHOJA1Row(ByVal row As IMPXHOJA1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMPXHOJA1Row(ByVal NLAB As String, ByVal COLUMNAD As String, ByVal COLUMNAH As String) As IMPXHOJA1Row
            Dim rowIMPXHOJA1Row As IMPXHOJA1Row = CType(Me.NewRow,IMPXHOJA1Row)
            Dim columnValuesArray() As Object = New Object() {NLAB, COLUMNAD, COLUMNAH}
            rowIMPXHOJA1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPXHOJA1Row)
            Return rowIMPXHOJA1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPXHOJA1DataTable = CType(MyBase.Clone,IMPXHOJA1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPXHOJA1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNLAB = MyBase.Columns("NLAB")
            Me.columnCOLUMNAD = MyBase.Columns("COLUMNAD")
            Me.columnCOLUMNAH = MyBase.Columns("COLUMNAH")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNLAB = New Global.System.Data.DataColumn("NLAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB)
            Me.columnCOLUMNAD = New Global.System.Data.DataColumn("COLUMNAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAD)
            Me.columnCOLUMNAH = New Global.System.Data.DataColumn("COLUMNAH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAH)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMPXHOJA1Row() As IMPXHOJA1Row
            Return CType(Me.NewRow,IMPXHOJA1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPXHOJA1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPXHOJA1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPXHOJA1RowChangedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA1RowChanged(Me, New IMPXHOJA1RowChangeEvent(CType(e.Row,IMPXHOJA1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPXHOJA1RowChangingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA1RowChanging(Me, New IMPXHOJA1RowChangeEvent(CType(e.Row,IMPXHOJA1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPXHOJA1RowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA1RowDeleted(Me, New IMPXHOJA1RowChangeEvent(CType(e.Row,IMPXHOJA1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPXHOJA1RowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA1RowDeleting(Me, New IMPXHOJA1RowChangeEvent(CType(e.Row,IMPXHOJA1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMPXHOJA1Row(ByVal row As IMPXHOJA1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPXHOJA1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NOTA_RESULTADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNOTARES_ID As Global.System.Data.DataColumn
        
        Private columnNOTARES_DESCRIPCION As Global.System.Data.DataColumn
        
        Private columnNOTARES_FREC As Global.System.Data.DataColumn
        
        Private columnNOTARES_NIVEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NOTA_RESULTADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTARES_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTARES_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTARES_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTARES_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTARES_FRECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTARES_FREC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTARES_NIVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTARES_NIVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NOTA_RESULTADORow
            Get
                Return CType(Me.Rows(index),NOTA_RESULTADORow)
            End Get
        End Property
        
        Public Event NOTA_RESULTADORowChanging As NOTA_RESULTADORowChangeEventHandler
        
        Public Event NOTA_RESULTADORowChanged As NOTA_RESULTADORowChangeEventHandler
        
        Public Event NOTA_RESULTADORowDeleting As NOTA_RESULTADORowChangeEventHandler
        
        Public Event NOTA_RESULTADORowDeleted As NOTA_RESULTADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNOTA_RESULTADORow(ByVal row As NOTA_RESULTADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNOTA_RESULTADORow(ByVal NOTARES_ID As String, ByVal NOTARES_DESCRIPCION As String, ByVal NOTARES_FREC As String, ByVal NOTARES_NIVEL As String) As NOTA_RESULTADORow
            Dim rowNOTA_RESULTADORow As NOTA_RESULTADORow = CType(Me.NewRow,NOTA_RESULTADORow)
            Dim columnValuesArray() As Object = New Object() {NOTARES_ID, NOTARES_DESCRIPCION, NOTARES_FREC, NOTARES_NIVEL}
            rowNOTA_RESULTADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNOTA_RESULTADORow)
            Return rowNOTA_RESULTADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NOTA_RESULTADODataTable = CType(MyBase.Clone,NOTA_RESULTADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NOTA_RESULTADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNOTARES_ID = MyBase.Columns("NOTARES_ID")
            Me.columnNOTARES_DESCRIPCION = MyBase.Columns("NOTARES_DESCRIPCION")
            Me.columnNOTARES_FREC = MyBase.Columns("NOTARES_FREC")
            Me.columnNOTARES_NIVEL = MyBase.Columns("NOTARES_NIVEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNOTARES_ID = New Global.System.Data.DataColumn("NOTARES_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTARES_ID)
            Me.columnNOTARES_DESCRIPCION = New Global.System.Data.DataColumn("NOTARES_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTARES_DESCRIPCION)
            Me.columnNOTARES_FREC = New Global.System.Data.DataColumn("NOTARES_FREC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTARES_FREC)
            Me.columnNOTARES_NIVEL = New Global.System.Data.DataColumn("NOTARES_NIVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTARES_NIVEL)
            Me.columnNOTARES_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNOTA_RESULTADORow() As NOTA_RESULTADORow
            Return CType(Me.NewRow,NOTA_RESULTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NOTA_RESULTADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NOTA_RESULTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NOTA_RESULTADORowChangedEvent) Is Nothing) Then
                RaiseEvent NOTA_RESULTADORowChanged(Me, New NOTA_RESULTADORowChangeEvent(CType(e.Row,NOTA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NOTA_RESULTADORowChangingEvent) Is Nothing) Then
                RaiseEvent NOTA_RESULTADORowChanging(Me, New NOTA_RESULTADORowChangeEvent(CType(e.Row,NOTA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NOTA_RESULTADORowDeletedEvent) Is Nothing) Then
                RaiseEvent NOTA_RESULTADORowDeleted(Me, New NOTA_RESULTADORowChangeEvent(CType(e.Row,NOTA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NOTA_RESULTADORowDeletingEvent) Is Nothing) Then
                RaiseEvent NOTA_RESULTADORowDeleting(Me, New NOTA_RESULTADORowChangeEvent(CType(e.Row,NOTA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNOTA_RESULTADORow(ByVal row As NOTA_RESULTADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NOTA_RESULTADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MNEMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIORD As Global.System.Data.DataColumn
        
        Private columnINLA As Global.System.Data.DataColumn
        
        Private columnITIP As Global.System.Data.DataColumn
        
        Private columnIPRO As Global.System.Data.DataColumn
        
        Private columnIFEI As Global.System.Data.DataColumn
        
        Private columnIEMP As Global.System.Data.DataColumn
        
        Private columnIREM As Global.System.Data.DataColumn
        
        Private columnICUA As Global.System.Data.DataColumn
        
        Private columnIESP As Global.System.Data.DataColumn
        
        Private columnIVAR As Global.System.Data.DataColumn
        
        Private columnIEDA As Global.System.Data.DataColumn
        
        Private columnIPRE As Global.System.Data.DataColumn
        
        Private columnILOC As Global.System.Data.DataColumn
        
        Private columnIREG As Global.System.Data.DataColumn
        
        Private columnIFEM As Global.System.Data.DataColumn
        
        Private columnIVIG As Global.System.Data.DataColumn
        
        Private columnICU1 As Global.System.Data.DataColumn
        
        Private columnICU2 As Global.System.Data.DataColumn
        
        Private columnIAPH As Global.System.Data.DataColumn
        
        Private columnIAPH2 As Global.System.Data.DataColumn
        
        Private columnICRI As Global.System.Data.DataColumn
        
        Private columnICRI2 As Global.System.Data.DataColumn
        
        Private columnIHEL As Global.System.Data.DataColumn
        
        Private columnIHEL2 As Global.System.Data.DataColumn
        
        Private columnIHEM As Global.System.Data.DataColumn
        
        Private columnIHEM2 As Global.System.Data.DataColumn
        
        Private columnIMEL As Global.System.Data.DataColumn
        
        Private columnIMEL2 As Global.System.Data.DataColumn
        
        Private columnIPAR As Global.System.Data.DataColumn
        
        Private columnIPAR2 As Global.System.Data.DataColumn
        
        Private columnIPRA As Global.System.Data.DataColumn
        
        Private columnIPRA2 As Global.System.Data.DataColumn
        
        Private columnITRI As Global.System.Data.DataColumn
        
        Private columnITRI2 As Global.System.Data.DataColumn
        
        Private columnITY1 As Global.System.Data.DataColumn
        
        Private columnITY12 As Global.System.Data.DataColumn
        
        Private columnITY2 As Global.System.Data.DataColumn
        
        Private columnITY22 As Global.System.Data.DataColumn
        
        Private columnITY3 As Global.System.Data.DataColumn
        
        Private columnITY32 As Global.System.Data.DataColumn
        
        Private columnIXI1 As Global.System.Data.DataColumn
        
        Private columnIXI12 As Global.System.Data.DataColumn
        
        Private columnIDI1 As Global.System.Data.DataColumn
        
        Private columnIDI12 As Global.System.Data.DataColumn
        
        Private columnIXI2 As Global.System.Data.DataColumn
        
        Private columnIXI22 As Global.System.Data.DataColumn
        
        Private columnILON As Global.System.Data.DataColumn
        
        Private columnILON2 As Global.System.Data.DataColumn
        
        Private columnIHET As Global.System.Data.DataColumn
        
        Private columnIHET2 As Global.System.Data.DataColumn
        
        Private columnIDIT As Global.System.Data.DataColumn
        
        Private columnIDIT2 As Global.System.Data.DataColumn
        
        Private columnISAP As Global.System.Data.DataColumn
        
        Private columnISAP2 As Global.System.Data.DataColumn
        
        Private columnIOB1 As Global.System.Data.DataColumn
        
        Private columnILI1 As Global.System.Data.DataColumn
        
        Private columnILI2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MNEM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICUAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICUA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IESPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIESP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVIGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVIG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAPHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IAPH2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIAPH2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICRIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICRI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICRI2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICRI2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IHELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIHEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IHEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIHEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IHEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIHEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IHEM2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIHEM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPAR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPAR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPRA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITRIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITRI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITRI2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnITRI2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITY1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnITY1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITY12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnITY12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITY2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnITY2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITY22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnITY22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITY3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnITY3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITY32Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnITY32
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IXI1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIXI1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IXI12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIXI12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDI1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDI1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDI12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDI12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IXI2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIXI2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IXI22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIXI22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILON2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnILON2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IHETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIHET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IHET2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIHET2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDIT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDIT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISAPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISAP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISAP2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnISAP2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOB1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOB1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILI1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnILI1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILI2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnILI2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MNEMRow
            Get
                Return CType(Me.Rows(index),MNEMRow)
            End Get
        End Property
        
        Public Event MNEMRowChanging As MNEMRowChangeEventHandler
        
        Public Event MNEMRowChanged As MNEMRowChangeEventHandler
        
        Public Event MNEMRowDeleting As MNEMRowChangeEventHandler
        
        Public Event MNEMRowDeleted As MNEMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMNEMRow(ByVal row As MNEMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMNEMRow( _
                    ByVal IORD As String,  _
                    ByVal INLA As String,  _
                    ByVal ITIP As String,  _
                    ByVal IPRO As String,  _
                    ByVal IFEI As Date,  _
                    ByVal IEMP As String,  _
                    ByVal IREM As String,  _
                    ByVal ICUA As String,  _
                    ByVal IESP As String,  _
                    ByVal IVAR As String,  _
                    ByVal IEDA As Double,  _
                    ByVal IPRE As String,  _
                    ByVal ILOC As String,  _
                    ByVal IREG As String,  _
                    ByVal IFEM As Date,  _
                    ByVal IVIG As String,  _
                    ByVal ICU1 As String,  _
                    ByVal ICU2 As String,  _
                    ByVal IAPH As Double,  _
                    ByVal IAPH2 As String,  _
                    ByVal ICRI As Double,  _
                    ByVal ICRI2 As String,  _
                    ByVal IHEL As Double,  _
                    ByVal IHEL2 As String,  _
                    ByVal IHEM As Double,  _
                    ByVal IHEM2 As String,  _
                    ByVal IMEL As Double,  _
                    ByVal IMEL2 As String,  _
                    ByVal IPAR As Double,  _
                    ByVal IPAR2 As String,  _
                    ByVal IPRA As Double,  _
                    ByVal IPRA2 As String,  _
                    ByVal ITRI As Double,  _
                    ByVal ITRI2 As String,  _
                    ByVal ITY1 As Double,  _
                    ByVal ITY12 As String,  _
                    ByVal ITY2 As Double,  _
                    ByVal ITY22 As String,  _
                    ByVal ITY3 As Double,  _
                    ByVal ITY32 As String,  _
                    ByVal IXI1 As Double,  _
                    ByVal IXI12 As String,  _
                    ByVal IDI1 As Double,  _
                    ByVal IDI12 As String,  _
                    ByVal IXI2 As Double,  _
                    ByVal IXI22 As String,  _
                    ByVal ILON As Double,  _
                    ByVal ILON2 As String,  _
                    ByVal IHET As Double,  _
                    ByVal IHET2 As String,  _
                    ByVal IDIT As Double,  _
                    ByVal IDIT2 As String,  _
                    ByVal ISAP As Double,  _
                    ByVal ISAP2 As String,  _
                    ByVal IOB1 As String,  _
                    ByVal ILI1 As String,  _
                    ByVal ILI2 As String) As MNEMRow
            Dim rowMNEMRow As MNEMRow = CType(Me.NewRow,MNEMRow)
            Dim columnValuesArray() As Object = New Object() {IORD, INLA, ITIP, IPRO, IFEI, IEMP, IREM, ICUA, IESP, IVAR, IEDA, IPRE, ILOC, IREG, IFEM, IVIG, ICU1, ICU2, IAPH, IAPH2, ICRI, ICRI2, IHEL, IHEL2, IHEM, IHEM2, IMEL, IMEL2, IPAR, IPAR2, IPRA, IPRA2, ITRI, ITRI2, ITY1, ITY12, ITY2, ITY22, ITY3, ITY32, IXI1, IXI12, IDI1, IDI12, IXI2, IXI22, ILON, ILON2, IHET, IHET2, IDIT, IDIT2, ISAP, ISAP2, IOB1, ILI1, ILI2}
            rowMNEMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMNEMRow)
            Return rowMNEMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MNEMDataTable = CType(MyBase.Clone,MNEMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MNEMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIORD = MyBase.Columns("IORD")
            Me.columnINLA = MyBase.Columns("INLA")
            Me.columnITIP = MyBase.Columns("ITIP")
            Me.columnIPRO = MyBase.Columns("IPRO")
            Me.columnIFEI = MyBase.Columns("IFEI")
            Me.columnIEMP = MyBase.Columns("IEMP")
            Me.columnIREM = MyBase.Columns("IREM")
            Me.columnICUA = MyBase.Columns("ICUA")
            Me.columnIESP = MyBase.Columns("IESP")
            Me.columnIVAR = MyBase.Columns("IVAR")
            Me.columnIEDA = MyBase.Columns("IEDA")
            Me.columnIPRE = MyBase.Columns("IPRE")
            Me.columnILOC = MyBase.Columns("ILOC")
            Me.columnIREG = MyBase.Columns("IREG")
            Me.columnIFEM = MyBase.Columns("IFEM")
            Me.columnIVIG = MyBase.Columns("IVIG")
            Me.columnICU1 = MyBase.Columns("ICU1")
            Me.columnICU2 = MyBase.Columns("ICU2")
            Me.columnIAPH = MyBase.Columns("IAPH")
            Me.columnIAPH2 = MyBase.Columns("IAPH2")
            Me.columnICRI = MyBase.Columns("ICRI")
            Me.columnICRI2 = MyBase.Columns("ICRI2")
            Me.columnIHEL = MyBase.Columns("IHEL")
            Me.columnIHEL2 = MyBase.Columns("IHEL2")
            Me.columnIHEM = MyBase.Columns("IHEM")
            Me.columnIHEM2 = MyBase.Columns("IHEM2")
            Me.columnIMEL = MyBase.Columns("IMEL")
            Me.columnIMEL2 = MyBase.Columns("IMEL2")
            Me.columnIPAR = MyBase.Columns("IPAR")
            Me.columnIPAR2 = MyBase.Columns("IPAR2")
            Me.columnIPRA = MyBase.Columns("IPRA")
            Me.columnIPRA2 = MyBase.Columns("IPRA2")
            Me.columnITRI = MyBase.Columns("ITRI")
            Me.columnITRI2 = MyBase.Columns("ITRI2")
            Me.columnITY1 = MyBase.Columns("ITY1")
            Me.columnITY12 = MyBase.Columns("ITY12")
            Me.columnITY2 = MyBase.Columns("ITY2")
            Me.columnITY22 = MyBase.Columns("ITY22")
            Me.columnITY3 = MyBase.Columns("ITY3")
            Me.columnITY32 = MyBase.Columns("ITY32")
            Me.columnIXI1 = MyBase.Columns("IXI1")
            Me.columnIXI12 = MyBase.Columns("IXI12")
            Me.columnIDI1 = MyBase.Columns("IDI1")
            Me.columnIDI12 = MyBase.Columns("IDI12")
            Me.columnIXI2 = MyBase.Columns("IXI2")
            Me.columnIXI22 = MyBase.Columns("IXI22")
            Me.columnILON = MyBase.Columns("ILON")
            Me.columnILON2 = MyBase.Columns("ILON2")
            Me.columnIHET = MyBase.Columns("IHET")
            Me.columnIHET2 = MyBase.Columns("IHET2")
            Me.columnIDIT = MyBase.Columns("IDIT")
            Me.columnIDIT2 = MyBase.Columns("IDIT2")
            Me.columnISAP = MyBase.Columns("ISAP")
            Me.columnISAP2 = MyBase.Columns("ISAP2")
            Me.columnIOB1 = MyBase.Columns("IOB1")
            Me.columnILI1 = MyBase.Columns("ILI1")
            Me.columnILI2 = MyBase.Columns("ILI2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIORD = New Global.System.Data.DataColumn("IORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIORD)
            Me.columnINLA = New Global.System.Data.DataColumn("INLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINLA)
            Me.columnITIP = New Global.System.Data.DataColumn("ITIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITIP)
            Me.columnIPRO = New Global.System.Data.DataColumn("IPRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRO)
            Me.columnIFEI = New Global.System.Data.DataColumn("IFEI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEI)
            Me.columnIEMP = New Global.System.Data.DataColumn("IEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEMP)
            Me.columnIREM = New Global.System.Data.DataColumn("IREM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREM)
            Me.columnICUA = New Global.System.Data.DataColumn("ICUA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICUA)
            Me.columnIESP = New Global.System.Data.DataColumn("IESP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIESP)
            Me.columnIVAR = New Global.System.Data.DataColumn("IVAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVAR)
            Me.columnIEDA = New Global.System.Data.DataColumn("IEDA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEDA)
            Me.columnIPRE = New Global.System.Data.DataColumn("IPRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRE)
            Me.columnILOC = New Global.System.Data.DataColumn("ILOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILOC)
            Me.columnIREG = New Global.System.Data.DataColumn("IREG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREG)
            Me.columnIFEM = New Global.System.Data.DataColumn("IFEM", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEM)
            Me.columnIVIG = New Global.System.Data.DataColumn("IVIG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVIG)
            Me.columnICU1 = New Global.System.Data.DataColumn("ICU1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICU1)
            Me.columnICU2 = New Global.System.Data.DataColumn("ICU2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICU2)
            Me.columnIAPH = New Global.System.Data.DataColumn("IAPH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAPH)
            Me.columnIAPH2 = New Global.System.Data.DataColumn("IAPH2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIAPH2)
            Me.columnICRI = New Global.System.Data.DataColumn("ICRI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICRI)
            Me.columnICRI2 = New Global.System.Data.DataColumn("ICRI2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICRI2)
            Me.columnIHEL = New Global.System.Data.DataColumn("IHEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIHEL)
            Me.columnIHEL2 = New Global.System.Data.DataColumn("IHEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIHEL2)
            Me.columnIHEM = New Global.System.Data.DataColumn("IHEM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIHEM)
            Me.columnIHEM2 = New Global.System.Data.DataColumn("IHEM2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIHEM2)
            Me.columnIMEL = New Global.System.Data.DataColumn("IMEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMEL)
            Me.columnIMEL2 = New Global.System.Data.DataColumn("IMEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMEL2)
            Me.columnIPAR = New Global.System.Data.DataColumn("IPAR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPAR)
            Me.columnIPAR2 = New Global.System.Data.DataColumn("IPAR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPAR2)
            Me.columnIPRA = New Global.System.Data.DataColumn("IPRA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRA)
            Me.columnIPRA2 = New Global.System.Data.DataColumn("IPRA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRA2)
            Me.columnITRI = New Global.System.Data.DataColumn("ITRI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITRI)
            Me.columnITRI2 = New Global.System.Data.DataColumn("ITRI2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITRI2)
            Me.columnITY1 = New Global.System.Data.DataColumn("ITY1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITY1)
            Me.columnITY12 = New Global.System.Data.DataColumn("ITY12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITY12)
            Me.columnITY2 = New Global.System.Data.DataColumn("ITY2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITY2)
            Me.columnITY22 = New Global.System.Data.DataColumn("ITY22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITY22)
            Me.columnITY3 = New Global.System.Data.DataColumn("ITY3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITY3)
            Me.columnITY32 = New Global.System.Data.DataColumn("ITY32", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITY32)
            Me.columnIXI1 = New Global.System.Data.DataColumn("IXI1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIXI1)
            Me.columnIXI12 = New Global.System.Data.DataColumn("IXI12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIXI12)
            Me.columnIDI1 = New Global.System.Data.DataColumn("IDI1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDI1)
            Me.columnIDI12 = New Global.System.Data.DataColumn("IDI12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDI12)
            Me.columnIXI2 = New Global.System.Data.DataColumn("IXI2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIXI2)
            Me.columnIXI22 = New Global.System.Data.DataColumn("IXI22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIXI22)
            Me.columnILON = New Global.System.Data.DataColumn("ILON", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILON)
            Me.columnILON2 = New Global.System.Data.DataColumn("ILON2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILON2)
            Me.columnIHET = New Global.System.Data.DataColumn("IHET", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIHET)
            Me.columnIHET2 = New Global.System.Data.DataColumn("IHET2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIHET2)
            Me.columnIDIT = New Global.System.Data.DataColumn("IDIT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDIT)
            Me.columnIDIT2 = New Global.System.Data.DataColumn("IDIT2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDIT2)
            Me.columnISAP = New Global.System.Data.DataColumn("ISAP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISAP)
            Me.columnISAP2 = New Global.System.Data.DataColumn("ISAP2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISAP2)
            Me.columnIOB1 = New Global.System.Data.DataColumn("IOB1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOB1)
            Me.columnILI1 = New Global.System.Data.DataColumn("ILI1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILI1)
            Me.columnILI2 = New Global.System.Data.DataColumn("ILI2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILI2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMNEMRow() As MNEMRow
            Return CType(Me.NewRow,MNEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MNEMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MNEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MNEMRowChangedEvent) Is Nothing) Then
                RaiseEvent MNEMRowChanged(Me, New MNEMRowChangeEvent(CType(e.Row,MNEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MNEMRowChangingEvent) Is Nothing) Then
                RaiseEvent MNEMRowChanging(Me, New MNEMRowChangeEvent(CType(e.Row,MNEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MNEMRowDeletedEvent) Is Nothing) Then
                RaiseEvent MNEMRowDeleted(Me, New MNEMRowChangeEvent(CType(e.Row,MNEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MNEMRowDeletingEvent) Is Nothing) Then
                RaiseEvent MNEMRowDeleting(Me, New MNEMRowChangeEvent(CType(e.Row,MNEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMNEMRow(ByVal row As MNEMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MNEMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RANGO_MUESTRADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_UNIDAD As Global.System.Data.DataColumn
        
        Private columnRANGO1 As Global.System.Data.DataColumn
        
        Private columnRANGO2 As Global.System.Data.DataColumn
        
        Private columnRANGO3 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RANGO_MUESTRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_UNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RANGO_MUESTRARow
            Get
                Return CType(Me.Rows(index),RANGO_MUESTRARow)
            End Get
        End Property
        
        Public Event RANGO_MUESTRARowChanging As RANGO_MUESTRARowChangeEventHandler
        
        Public Event RANGO_MUESTRARowChanged As RANGO_MUESTRARowChangeEventHandler
        
        Public Event RANGO_MUESTRARowDeleting As RANGO_MUESTRARowChangeEventHandler
        
        Public Event RANGO_MUESTRARowDeleted As RANGO_MUESTRARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRANGO_MUESTRARow(ByVal row As RANGO_MUESTRARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRANGO_MUESTRARow(ByVal TMU_CODIGO As Integer, ByVal ELE_CODIGO As String, ByVal ELE_UNIDAD As String, ByVal RANGO1 As String, ByVal RANGO2 As String, ByVal RANGO3 As String) As RANGO_MUESTRARow
            Dim rowRANGO_MUESTRARow As RANGO_MUESTRARow = CType(Me.NewRow,RANGO_MUESTRARow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, ELE_CODIGO, ELE_UNIDAD, RANGO1, RANGO2, RANGO3}
            rowRANGO_MUESTRARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRANGO_MUESTRARow)
            Return rowRANGO_MUESTRARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RANGO_MUESTRADataTable = CType(MyBase.Clone,RANGO_MUESTRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RANGO_MUESTRADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnELE_UNIDAD = MyBase.Columns("ELE_UNIDAD")
            Me.columnRANGO1 = MyBase.Columns("RANGO1")
            Me.columnRANGO2 = MyBase.Columns("RANGO2")
            Me.columnRANGO3 = MyBase.Columns("RANGO3")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnELE_UNIDAD = New Global.System.Data.DataColumn("ELE_UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_UNIDAD)
            Me.columnRANGO1 = New Global.System.Data.DataColumn("RANGO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO1)
            Me.columnRANGO2 = New Global.System.Data.DataColumn("RANGO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO2)
            Me.columnRANGO3 = New Global.System.Data.DataColumn("RANGO3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO3)
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
            Me.columnELE_UNIDAD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRANGO_MUESTRARow() As RANGO_MUESTRARow
            Return CType(Me.NewRow,RANGO_MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RANGO_MUESTRARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RANGO_MUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RANGO_MUESTRARowChangedEvent) Is Nothing) Then
                RaiseEvent RANGO_MUESTRARowChanged(Me, New RANGO_MUESTRARowChangeEvent(CType(e.Row,RANGO_MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RANGO_MUESTRARowChangingEvent) Is Nothing) Then
                RaiseEvent RANGO_MUESTRARowChanging(Me, New RANGO_MUESTRARowChangeEvent(CType(e.Row,RANGO_MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RANGO_MUESTRARowDeletedEvent) Is Nothing) Then
                RaiseEvent RANGO_MUESTRARowDeleted(Me, New RANGO_MUESTRARowChangeEvent(CType(e.Row,RANGO_MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RANGO_MUESTRARowDeletingEvent) Is Nothing) Then
                RaiseEvent RANGO_MUESTRARowDeleting(Me, New RANGO_MUESTRARowChangeEvent(CType(e.Row,RANGO_MUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRANGO_MUESTRARow(ByVal row As RANGO_MUESTRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RANGO_MUESTRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPXHOJADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNLAB As Global.System.Data.DataColumn
        
        Private columnCOD_EXT As Global.System.Data.DataColumn
        
        Private columnRESULTADO As Global.System.Data.DataColumn
        
        Private columnRANGO_DESDE As Global.System.Data.DataColumn
        
        Private columnCOLUMNAD As Global.System.Data.DataColumn
        
        Private columnCOLUMNAH As Global.System.Data.DataColumn
        
        Private columnRANGO_HASTA As Global.System.Data.DataColumn
        
        Private columnSIMBOLO As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPXHOJA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_EXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_EXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESULTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SIMBOLOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIMBOLO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPXHOJARow
            Get
                Return CType(Me.Rows(index),IMPXHOJARow)
            End Get
        End Property
        
        Public Event IMPXHOJARowChanging As IMPXHOJARowChangeEventHandler
        
        Public Event IMPXHOJARowChanged As IMPXHOJARowChangeEventHandler
        
        Public Event IMPXHOJARowDeleting As IMPXHOJARowChangeEventHandler
        
        Public Event IMPXHOJARowDeleted As IMPXHOJARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMPXHOJARow(ByVal row As IMPXHOJARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMPXHOJARow(ByVal NLAB As String, ByVal COD_EXT As String, ByVal RESULTADO As String, ByVal RANGO_DESDE As String, ByVal COLUMNAD As String, ByVal COLUMNAH As String, ByVal RANGO_HASTA As String, ByVal SIMBOLO As String, ByVal UNIDAD As String) As IMPXHOJARow
            Dim rowIMPXHOJARow As IMPXHOJARow = CType(Me.NewRow,IMPXHOJARow)
            Dim columnValuesArray() As Object = New Object() {NLAB, COD_EXT, RESULTADO, RANGO_DESDE, COLUMNAD, COLUMNAH, RANGO_HASTA, SIMBOLO, UNIDAD}
            rowIMPXHOJARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPXHOJARow)
            Return rowIMPXHOJARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPXHOJADataTable = CType(MyBase.Clone,IMPXHOJADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPXHOJADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNLAB = MyBase.Columns("NLAB")
            Me.columnCOD_EXT = MyBase.Columns("COD_EXT")
            Me.columnRESULTADO = MyBase.Columns("RESULTADO")
            Me.columnRANGO_DESDE = MyBase.Columns("RANGO_DESDE")
            Me.columnCOLUMNAD = MyBase.Columns("COLUMNAD")
            Me.columnCOLUMNAH = MyBase.Columns("COLUMNAH")
            Me.columnRANGO_HASTA = MyBase.Columns("RANGO_HASTA")
            Me.columnSIMBOLO = MyBase.Columns("SIMBOLO")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNLAB = New Global.System.Data.DataColumn("NLAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB)
            Me.columnCOD_EXT = New Global.System.Data.DataColumn("COD_EXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_EXT)
            Me.columnRESULTADO = New Global.System.Data.DataColumn("RESULTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULTADO)
            Me.columnRANGO_DESDE = New Global.System.Data.DataColumn("RANGO_DESDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_DESDE)
            Me.columnCOLUMNAD = New Global.System.Data.DataColumn("COLUMNAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAD)
            Me.columnCOLUMNAH = New Global.System.Data.DataColumn("COLUMNAH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAH)
            Me.columnRANGO_HASTA = New Global.System.Data.DataColumn("RANGO_HASTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_HASTA)
            Me.columnSIMBOLO = New Global.System.Data.DataColumn("SIMBOLO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIMBOLO)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnCOD_EXT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMPXHOJARow() As IMPXHOJARow
            Return CType(Me.NewRow,IMPXHOJARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPXHOJARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPXHOJARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPXHOJARowChangedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJARowChanged(Me, New IMPXHOJARowChangeEvent(CType(e.Row,IMPXHOJARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPXHOJARowChangingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJARowChanging(Me, New IMPXHOJARowChangeEvent(CType(e.Row,IMPXHOJARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPXHOJARowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJARowDeleted(Me, New IMPXHOJARowChangeEvent(CType(e.Row,IMPXHOJARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPXHOJARowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJARowDeleting(Me, New IMPXHOJARowChangeEvent(CType(e.Row,IMPXHOJARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMPXHOJARow(ByVal row As IMPXHOJARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPXHOJADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HOMOLOGACION_ESPECIEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnESPECIE_DBF As Global.System.Data.DataColumn
        
        Private columnESP_ESPECIE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HOMOLOGACION_ESPECIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESPECIE_DBFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESPECIE_DBF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESP_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HOMOLOGACION_ESPECIERow
            Get
                Return CType(Me.Rows(index),HOMOLOGACION_ESPECIERow)
            End Get
        End Property
        
        Public Event HOMOLOGACION_ESPECIERowChanging As HOMOLOGACION_ESPECIERowChangeEventHandler
        
        Public Event HOMOLOGACION_ESPECIERowChanged As HOMOLOGACION_ESPECIERowChangeEventHandler
        
        Public Event HOMOLOGACION_ESPECIERowDeleting As HOMOLOGACION_ESPECIERowChangeEventHandler
        
        Public Event HOMOLOGACION_ESPECIERowDeleted As HOMOLOGACION_ESPECIERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHOMOLOGACION_ESPECIERow(ByVal row As HOMOLOGACION_ESPECIERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHOMOLOGACION_ESPECIERow(ByVal ESPECIE_DBF As String, ByVal ESP_ESPECIE As String) As HOMOLOGACION_ESPECIERow
            Dim rowHOMOLOGACION_ESPECIERow As HOMOLOGACION_ESPECIERow = CType(Me.NewRow,HOMOLOGACION_ESPECIERow)
            Dim columnValuesArray() As Object = New Object() {ESPECIE_DBF, ESP_ESPECIE}
            rowHOMOLOGACION_ESPECIERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHOMOLOGACION_ESPECIERow)
            Return rowHOMOLOGACION_ESPECIERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HOMOLOGACION_ESPECIEDataTable = CType(MyBase.Clone,HOMOLOGACION_ESPECIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HOMOLOGACION_ESPECIEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnESPECIE_DBF = MyBase.Columns("ESPECIE_DBF")
            Me.columnESP_ESPECIE = MyBase.Columns("ESP_ESPECIE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnESPECIE_DBF = New Global.System.Data.DataColumn("ESPECIE_DBF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESPECIE_DBF)
            Me.columnESP_ESPECIE = New Global.System.Data.DataColumn("ESP_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_ESPECIE)
            Me.columnESPECIE_DBF.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHOMOLOGACION_ESPECIERow() As HOMOLOGACION_ESPECIERow
            Return CType(Me.NewRow,HOMOLOGACION_ESPECIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HOMOLOGACION_ESPECIERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HOMOLOGACION_ESPECIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HOMOLOGACION_ESPECIERowChangedEvent) Is Nothing) Then
                RaiseEvent HOMOLOGACION_ESPECIERowChanged(Me, New HOMOLOGACION_ESPECIERowChangeEvent(CType(e.Row,HOMOLOGACION_ESPECIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HOMOLOGACION_ESPECIERowChangingEvent) Is Nothing) Then
                RaiseEvent HOMOLOGACION_ESPECIERowChanging(Me, New HOMOLOGACION_ESPECIERowChangeEvent(CType(e.Row,HOMOLOGACION_ESPECIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HOMOLOGACION_ESPECIERowDeletedEvent) Is Nothing) Then
                RaiseEvent HOMOLOGACION_ESPECIERowDeleted(Me, New HOMOLOGACION_ESPECIERowChangeEvent(CType(e.Row,HOMOLOGACION_ESPECIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HOMOLOGACION_ESPECIERowDeletingEvent) Is Nothing) Then
                RaiseEvent HOMOLOGACION_ESPECIERowDeleting(Me, New HOMOLOGACION_ESPECIERowChangeEvent(CType(e.Row,HOMOLOGACION_ESPECIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHOMOLOGACION_ESPECIERow(ByVal row As HOMOLOGACION_ESPECIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HOMOLOGACION_ESPECIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DICCIONARIODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPALABRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DICCIONARIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PALABRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPALABRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DICCIONARIORow
            Get
                Return CType(Me.Rows(index),DICCIONARIORow)
            End Get
        End Property
        
        Public Event DICCIONARIORowChanging As DICCIONARIORowChangeEventHandler
        
        Public Event DICCIONARIORowChanged As DICCIONARIORowChangeEventHandler
        
        Public Event DICCIONARIORowDeleting As DICCIONARIORowChangeEventHandler
        
        Public Event DICCIONARIORowDeleted As DICCIONARIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDICCIONARIORow(ByVal row As DICCIONARIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDICCIONARIORow(ByVal PALABRA As String) As DICCIONARIORow
            Dim rowDICCIONARIORow As DICCIONARIORow = CType(Me.NewRow,DICCIONARIORow)
            Dim columnValuesArray() As Object = New Object() {PALABRA}
            rowDICCIONARIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDICCIONARIORow)
            Return rowDICCIONARIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DICCIONARIODataTable = CType(MyBase.Clone,DICCIONARIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DICCIONARIODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPALABRA = MyBase.Columns("PALABRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPALABRA = New Global.System.Data.DataColumn("PALABRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPALABRA)
            Me.columnPALABRA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDICCIONARIORow() As DICCIONARIORow
            Return CType(Me.NewRow,DICCIONARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DICCIONARIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DICCIONARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DICCIONARIORowChangedEvent) Is Nothing) Then
                RaiseEvent DICCIONARIORowChanged(Me, New DICCIONARIORowChangeEvent(CType(e.Row,DICCIONARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DICCIONARIORowChangingEvent) Is Nothing) Then
                RaiseEvent DICCIONARIORowChanging(Me, New DICCIONARIORowChangeEvent(CType(e.Row,DICCIONARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DICCIONARIORowDeletedEvent) Is Nothing) Then
                RaiseEvent DICCIONARIORowDeleted(Me, New DICCIONARIORowChangeEvent(CType(e.Row,DICCIONARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DICCIONARIORowDeletingEvent) Is Nothing) Then
                RaiseEvent DICCIONARIORowDeleting(Me, New DICCIONARIORowChangeEvent(CType(e.Row,DICCIONARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDICCIONARIORow(ByVal row As DICCIONARIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DICCIONARIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPXHOJA2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNLAB As Global.System.Data.DataColumn
        
        Private columnCOLUMNADC As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHC As Global.System.Data.DataColumn
        
        Private columnCOLUMNADR As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHR As Global.System.Data.DataColumn
        
        Private columnCOLUMNADS As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPXHOJA2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPXHOJA2Row
            Get
                Return CType(Me.Rows(index),IMPXHOJA2Row)
            End Get
        End Property
        
        Public Event IMPXHOJA2RowChanging As IMPXHOJA2RowChangeEventHandler
        
        Public Event IMPXHOJA2RowChanged As IMPXHOJA2RowChangeEventHandler
        
        Public Event IMPXHOJA2RowDeleting As IMPXHOJA2RowChangeEventHandler
        
        Public Event IMPXHOJA2RowDeleted As IMPXHOJA2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMPXHOJA2Row(ByVal row As IMPXHOJA2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMPXHOJA2Row(ByVal NLAB As String, ByVal COLUMNADC As String, ByVal COLUMNAHC As String, ByVal COLUMNADR As String, ByVal COLUMNAHR As String, ByVal COLUMNADS As String, ByVal COLUMNAHS As String) As IMPXHOJA2Row
            Dim rowIMPXHOJA2Row As IMPXHOJA2Row = CType(Me.NewRow,IMPXHOJA2Row)
            Dim columnValuesArray() As Object = New Object() {NLAB, COLUMNADC, COLUMNAHC, COLUMNADR, COLUMNAHR, COLUMNADS, COLUMNAHS}
            rowIMPXHOJA2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPXHOJA2Row)
            Return rowIMPXHOJA2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPXHOJA2DataTable = CType(MyBase.Clone,IMPXHOJA2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPXHOJA2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNLAB = MyBase.Columns("NLAB")
            Me.columnCOLUMNADC = MyBase.Columns("COLUMNADC")
            Me.columnCOLUMNAHC = MyBase.Columns("COLUMNAHC")
            Me.columnCOLUMNADR = MyBase.Columns("COLUMNADR")
            Me.columnCOLUMNAHR = MyBase.Columns("COLUMNAHR")
            Me.columnCOLUMNADS = MyBase.Columns("COLUMNADS")
            Me.columnCOLUMNAHS = MyBase.Columns("COLUMNAHS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNLAB = New Global.System.Data.DataColumn("NLAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB)
            Me.columnCOLUMNADC = New Global.System.Data.DataColumn("COLUMNADC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADC)
            Me.columnCOLUMNAHC = New Global.System.Data.DataColumn("COLUMNAHC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHC)
            Me.columnCOLUMNADR = New Global.System.Data.DataColumn("COLUMNADR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADR)
            Me.columnCOLUMNAHR = New Global.System.Data.DataColumn("COLUMNAHR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHR)
            Me.columnCOLUMNADS = New Global.System.Data.DataColumn("COLUMNADS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADS)
            Me.columnCOLUMNAHS = New Global.System.Data.DataColumn("COLUMNAHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHS)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMPXHOJA2Row() As IMPXHOJA2Row
            Return CType(Me.NewRow,IMPXHOJA2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPXHOJA2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPXHOJA2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPXHOJA2RowChangedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA2RowChanged(Me, New IMPXHOJA2RowChangeEvent(CType(e.Row,IMPXHOJA2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPXHOJA2RowChangingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA2RowChanging(Me, New IMPXHOJA2RowChangeEvent(CType(e.Row,IMPXHOJA2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPXHOJA2RowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA2RowDeleted(Me, New IMPXHOJA2RowChangeEvent(CType(e.Row,IMPXHOJA2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPXHOJA2RowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA2RowDeleting(Me, New IMPXHOJA2RowChangeEvent(CType(e.Row,IMPXHOJA2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMPXHOJA2Row(ByVal row As IMPXHOJA2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPXHOJA2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RANGO_SUELODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnRANGO_SP As Global.System.Data.DataColumn
        
        Private columnRANGO_PS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RANGO_SUELO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_SPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_SP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_PSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_PS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RANGO_SUELORow
            Get
                Return CType(Me.Rows(index),RANGO_SUELORow)
            End Get
        End Property
        
        Public Event RANGO_SUELORowChanging As RANGO_SUELORowChangeEventHandler
        
        Public Event RANGO_SUELORowChanged As RANGO_SUELORowChangeEventHandler
        
        Public Event RANGO_SUELORowDeleting As RANGO_SUELORowChangeEventHandler
        
        Public Event RANGO_SUELORowDeleted As RANGO_SUELORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRANGO_SUELORow(ByVal row As RANGO_SUELORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRANGO_SUELORow(ByVal TMU_CODIGO As Integer, ByVal ELE_CODIGO As String, ByVal RANGO_SP As String, ByVal RANGO_PS As String) As RANGO_SUELORow
            Dim rowRANGO_SUELORow As RANGO_SUELORow = CType(Me.NewRow,RANGO_SUELORow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, ELE_CODIGO, RANGO_SP, RANGO_PS}
            rowRANGO_SUELORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRANGO_SUELORow)
            Return rowRANGO_SUELORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTMU_CODIGOELE_CODIGO(ByVal TMU_CODIGO As Integer, ByVal ELE_CODIGO As String) As RANGO_SUELORow
            Return CType(Me.Rows.Find(New Object() {TMU_CODIGO, ELE_CODIGO}),RANGO_SUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RANGO_SUELODataTable = CType(MyBase.Clone,RANGO_SUELODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RANGO_SUELODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnRANGO_SP = MyBase.Columns("RANGO_SP")
            Me.columnRANGO_PS = MyBase.Columns("RANGO_PS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnRANGO_SP = New Global.System.Data.DataColumn("RANGO_SP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_SP)
            Me.columnRANGO_PS = New Global.System.Data.DataColumn("RANGO_PS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_PS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey10", New Global.System.Data.DataColumn() {Me.columnTMU_CODIGO, Me.columnELE_CODIGO}, true))
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRANGO_SUELORow() As RANGO_SUELORow
            Return CType(Me.NewRow,RANGO_SUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RANGO_SUELORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RANGO_SUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RANGO_SUELORowChangedEvent) Is Nothing) Then
                RaiseEvent RANGO_SUELORowChanged(Me, New RANGO_SUELORowChangeEvent(CType(e.Row,RANGO_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RANGO_SUELORowChangingEvent) Is Nothing) Then
                RaiseEvent RANGO_SUELORowChanging(Me, New RANGO_SUELORowChangeEvent(CType(e.Row,RANGO_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RANGO_SUELORowDeletedEvent) Is Nothing) Then
                RaiseEvent RANGO_SUELORowDeleted(Me, New RANGO_SUELORowChangeEvent(CType(e.Row,RANGO_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RANGO_SUELORowDeletingEvent) Is Nothing) Then
                RaiseEvent RANGO_SUELORowDeleting(Me, New RANGO_SUELORowChangeEvent(CType(e.Row,RANGO_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRANGO_SUELORow(ByVal row As RANGO_SUELORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RANGO_SUELODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPXHOJA_SUELODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNLAB As Global.System.Data.DataColumn
        
        Private columnCOD_EXT As Global.System.Data.DataColumn
        
        Private columnRESULTADO As Global.System.Data.DataColumn
        
        Private columnRANGO_SP As Global.System.Data.DataColumn
        
        Private columnCOLUMNAD As Global.System.Data.DataColumn
        
        Private columnCOLUMNAH As Global.System.Data.DataColumn
        
        Private columnRANGO_PS As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPXHOJA_SUELO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_EXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_EXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESULTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_SPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_SP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_PSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_PS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPXHOJA_SUELORow
            Get
                Return CType(Me.Rows(index),IMPXHOJA_SUELORow)
            End Get
        End Property
        
        Public Event IMPXHOJA_SUELORowChanging As IMPXHOJA_SUELORowChangeEventHandler
        
        Public Event IMPXHOJA_SUELORowChanged As IMPXHOJA_SUELORowChangeEventHandler
        
        Public Event IMPXHOJA_SUELORowDeleting As IMPXHOJA_SUELORowChangeEventHandler
        
        Public Event IMPXHOJA_SUELORowDeleted As IMPXHOJA_SUELORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMPXHOJA_SUELORow(ByVal row As IMPXHOJA_SUELORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMPXHOJA_SUELORow(ByVal NLAB As String, ByVal COD_EXT As String, ByVal RESULTADO As String, ByVal RANGO_SP As String, ByVal COLUMNAD As String, ByVal COLUMNAH As String, ByVal RANGO_PS As String, ByVal UNIDAD As String) As IMPXHOJA_SUELORow
            Dim rowIMPXHOJA_SUELORow As IMPXHOJA_SUELORow = CType(Me.NewRow,IMPXHOJA_SUELORow)
            Dim columnValuesArray() As Object = New Object() {NLAB, COD_EXT, RESULTADO, RANGO_SP, COLUMNAD, COLUMNAH, RANGO_PS, UNIDAD}
            rowIMPXHOJA_SUELORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPXHOJA_SUELORow)
            Return rowIMPXHOJA_SUELORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPXHOJA_SUELODataTable = CType(MyBase.Clone,IMPXHOJA_SUELODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPXHOJA_SUELODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNLAB = MyBase.Columns("NLAB")
            Me.columnCOD_EXT = MyBase.Columns("COD_EXT")
            Me.columnRESULTADO = MyBase.Columns("RESULTADO")
            Me.columnRANGO_SP = MyBase.Columns("RANGO_SP")
            Me.columnCOLUMNAD = MyBase.Columns("COLUMNAD")
            Me.columnCOLUMNAH = MyBase.Columns("COLUMNAH")
            Me.columnRANGO_PS = MyBase.Columns("RANGO_PS")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNLAB = New Global.System.Data.DataColumn("NLAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB)
            Me.columnCOD_EXT = New Global.System.Data.DataColumn("COD_EXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_EXT)
            Me.columnRESULTADO = New Global.System.Data.DataColumn("RESULTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULTADO)
            Me.columnRANGO_SP = New Global.System.Data.DataColumn("RANGO_SP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_SP)
            Me.columnCOLUMNAD = New Global.System.Data.DataColumn("COLUMNAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAD)
            Me.columnCOLUMNAH = New Global.System.Data.DataColumn("COLUMNAH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAH)
            Me.columnRANGO_PS = New Global.System.Data.DataColumn("RANGO_PS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_PS)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnCOD_EXT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMPXHOJA_SUELORow() As IMPXHOJA_SUELORow
            Return CType(Me.NewRow,IMPXHOJA_SUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPXHOJA_SUELORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPXHOJA_SUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPXHOJA_SUELORowChangedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_SUELORowChanged(Me, New IMPXHOJA_SUELORowChangeEvent(CType(e.Row,IMPXHOJA_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPXHOJA_SUELORowChangingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_SUELORowChanging(Me, New IMPXHOJA_SUELORowChangeEvent(CType(e.Row,IMPXHOJA_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPXHOJA_SUELORowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_SUELORowDeleted(Me, New IMPXHOJA_SUELORowChangeEvent(CType(e.Row,IMPXHOJA_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPXHOJA_SUELORowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_SUELORowDeleting(Me, New IMPXHOJA_SUELORowChangeEvent(CType(e.Row,IMPXHOJA_SUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMPXHOJA_SUELORow(ByVal row As IMPXHOJA_SUELORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPXHOJA_SUELODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FORMATO_RESULTADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnFOR_REGISTRO As Global.System.Data.DataColumn
        
        Private columnFOR_ELEMENTO As Global.System.Data.DataColumn
        
        Private columnFOR_TITULO As Global.System.Data.DataColumn
        
        Private columnFOR_CEL As Global.System.Data.DataColumn
        
        Private columnFOR_POS As Global.System.Data.DataColumn
        
        Private columnFOR_LET As Global.System.Data.DataColumn
        
        Private columnFOR_PXLS As Global.System.Data.DataColumn
        
        Private columnFOR_SIMBOLO As Global.System.Data.DataColumn
        
        Private columnFOR_TITULO2 As Global.System.Data.DataColumn
        
        Private columnFOR_CEL2 As Global.System.Data.DataColumn
        
        Private columnFOR_POS2 As Global.System.Data.DataColumn
        
        Private columnFOR_LET2 As Global.System.Data.DataColumn
        
        Private columnFOR_PXLS2 As Global.System.Data.DataColumn
        
        Private columnFOR_UNIDAD As Global.System.Data.DataColumn
        
        Private columnFOR_TITULO3 As Global.System.Data.DataColumn
        
        Private columnFOR_CEL3 As Global.System.Data.DataColumn
        
        Private columnFOR_POS3 As Global.System.Data.DataColumn
        
        Private columnFOR_LET3 As Global.System.Data.DataColumn
        
        Private columnFOR_PXLS3 As Global.System.Data.DataColumn
        
        Private columnFOR_RESULTADO As Global.System.Data.DataColumn
        
        Private columnFOR_CEL4 As Global.System.Data.DataColumn
        
        Private columnFOR_POS4 As Global.System.Data.DataColumn
        
        Private columnFOR_LET4 As Global.System.Data.DataColumn
        
        Private columnFOR_ENTERO As Global.System.Data.DataColumn
        
        Private columnFOR_DECIMAL As Global.System.Data.DataColumn
        
        Private columnFOR_FREC As Global.System.Data.DataColumn
        
        Private columnFOR_PXLS4 As Global.System.Data.DataColumn
        
        Private columnFOR_RANGO_DESDE As Global.System.Data.DataColumn
        
        Private columnFOR_CEL5 As Global.System.Data.DataColumn
        
        Private columnFOR_POS5 As Global.System.Data.DataColumn
        
        Private columnFOR_LET5 As Global.System.Data.DataColumn
        
        Private columnFOR_ENTERO2 As Global.System.Data.DataColumn
        
        Private columnFOR_DECIMAL2 As Global.System.Data.DataColumn
        
        Private columnFOR_PXLS5 As Global.System.Data.DataColumn
        
        Private columnFOR_RANGO_SIMBOLO As Global.System.Data.DataColumn
        
        Private columnFOR_CEL6 As Global.System.Data.DataColumn
        
        Private columnFOR_POS6 As Global.System.Data.DataColumn
        
        Private columnFOR_LET6 As Global.System.Data.DataColumn
        
        Private columnFOR_PXLS6 As Global.System.Data.DataColumn
        
        Private columnFOR_RANGO_HASTA As Global.System.Data.DataColumn
        
        Private columnFOR_CEL7 As Global.System.Data.DataColumn
        
        Private columnFOR_POS7 As Global.System.Data.DataColumn
        
        Private columnFOR_LET7 As Global.System.Data.DataColumn
        
        Private columnFOR_ENTERO3 As Global.System.Data.DataColumn
        
        Private columnFOR_DECIMAL3 As Global.System.Data.DataColumn
        
        Private columnFOR_PXLS7 As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FORMATO_RESULTADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_REGISTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_REGISTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_ELEMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_ELEMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_TITULOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_TITULO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_CELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_CEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_POSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_POS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_LETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_LET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_PXLSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_PXLS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_SIMBOLOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_SIMBOLO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_TITULO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_TITULO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_CEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_CEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_POS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_POS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_LET2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_LET2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_PXLS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_PXLS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_UNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_TITULO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_TITULO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_CEL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_CEL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_POS3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_POS3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_LET3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_LET3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_PXLS3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_PXLS3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_RESULTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_RESULTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_CEL4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_CEL4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_POS4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_POS4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_LET4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_LET4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_ENTEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_ENTERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_DECIMALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_DECIMAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_FRECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_FREC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_PXLS4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_PXLS4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_RANGO_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_RANGO_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_CEL5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_CEL5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_POS5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_POS5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_LET5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_LET5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_ENTERO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_ENTERO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_DECIMAL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_DECIMAL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_PXLS5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_PXLS5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_RANGO_SIMBOLOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_RANGO_SIMBOLO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_CEL6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_CEL6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_POS6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_POS6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_LET6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_LET6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_PXLS6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_PXLS6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_RANGO_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_RANGO_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_CEL7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_CEL7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_POS7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_POS7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_LET7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_LET7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_ENTERO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_ENTERO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_DECIMAL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_DECIMAL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOR_PXLS7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOR_PXLS7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FORMATO_RESULTADORow
            Get
                Return CType(Me.Rows(index),FORMATO_RESULTADORow)
            End Get
        End Property
        
        Public Event FORMATO_RESULTADORowChanging As FORMATO_RESULTADORowChangeEventHandler
        
        Public Event FORMATO_RESULTADORowChanged As FORMATO_RESULTADORowChangeEventHandler
        
        Public Event FORMATO_RESULTADORowDeleting As FORMATO_RESULTADORowChangeEventHandler
        
        Public Event FORMATO_RESULTADORowDeleted As FORMATO_RESULTADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFORMATO_RESULTADORow(ByVal row As FORMATO_RESULTADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFORMATO_RESULTADORow( _
                    ByVal TMU_CODIGO As Integer,  _
                    ByVal FOR_REGISTRO As String,  _
                    ByVal FOR_ELEMENTO As String,  _
                    ByVal FOR_TITULO As String,  _
                    ByVal FOR_CEL As String,  _
                    ByVal FOR_POS As String,  _
                    ByVal FOR_LET As String,  _
                    ByVal FOR_PXLS As String,  _
                    ByVal FOR_SIMBOLO As String,  _
                    ByVal FOR_TITULO2 As String,  _
                    ByVal FOR_CEL2 As String,  _
                    ByVal FOR_POS2 As String,  _
                    ByVal FOR_LET2 As String,  _
                    ByVal FOR_PXLS2 As String,  _
                    ByVal FOR_UNIDAD As String,  _
                    ByVal FOR_TITULO3 As String,  _
                    ByVal FOR_CEL3 As String,  _
                    ByVal FOR_POS3 As String,  _
                    ByVal FOR_LET3 As String,  _
                    ByVal FOR_PXLS3 As String,  _
                    ByVal FOR_RESULTADO As String,  _
                    ByVal FOR_CEL4 As String,  _
                    ByVal FOR_POS4 As String,  _
                    ByVal FOR_LET4 As String,  _
                    ByVal FOR_ENTERO As Integer,  _
                    ByVal FOR_DECIMAL As Integer,  _
                    ByVal FOR_FREC As String,  _
                    ByVal FOR_PXLS4 As String,  _
                    ByVal FOR_RANGO_DESDE As String,  _
                    ByVal FOR_CEL5 As String,  _
                    ByVal FOR_POS5 As String,  _
                    ByVal FOR_LET5 As String,  _
                    ByVal FOR_ENTERO2 As Integer,  _
                    ByVal FOR_DECIMAL2 As Integer,  _
                    ByVal FOR_PXLS5 As String,  _
                    ByVal FOR_RANGO_SIMBOLO As String,  _
                    ByVal FOR_CEL6 As String,  _
                    ByVal FOR_POS6 As String,  _
                    ByVal FOR_LET6 As String,  _
                    ByVal FOR_PXLS6 As String,  _
                    ByVal FOR_RANGO_HASTA As String,  _
                    ByVal FOR_CEL7 As String,  _
                    ByVal FOR_POS7 As String,  _
                    ByVal FOR_LET7 As String,  _
                    ByVal FOR_ENTERO3 As Integer,  _
                    ByVal FOR_DECIMAL3 As Integer,  _
                    ByVal FOR_PXLS7 As String,  _
                    ByVal ELE_CODIGO As String) As FORMATO_RESULTADORow
            Dim rowFORMATO_RESULTADORow As FORMATO_RESULTADORow = CType(Me.NewRow,FORMATO_RESULTADORow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, FOR_REGISTRO, FOR_ELEMENTO, FOR_TITULO, FOR_CEL, FOR_POS, FOR_LET, FOR_PXLS, FOR_SIMBOLO, FOR_TITULO2, FOR_CEL2, FOR_POS2, FOR_LET2, FOR_PXLS2, FOR_UNIDAD, FOR_TITULO3, FOR_CEL3, FOR_POS3, FOR_LET3, FOR_PXLS3, FOR_RESULTADO, FOR_CEL4, FOR_POS4, FOR_LET4, FOR_ENTERO, FOR_DECIMAL, FOR_FREC, FOR_PXLS4, FOR_RANGO_DESDE, FOR_CEL5, FOR_POS5, FOR_LET5, FOR_ENTERO2, FOR_DECIMAL2, FOR_PXLS5, FOR_RANGO_SIMBOLO, FOR_CEL6, FOR_POS6, FOR_LET6, FOR_PXLS6, FOR_RANGO_HASTA, FOR_CEL7, FOR_POS7, FOR_LET7, FOR_ENTERO3, FOR_DECIMAL3, FOR_PXLS7, ELE_CODIGO}
            rowFORMATO_RESULTADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFORMATO_RESULTADORow)
            Return rowFORMATO_RESULTADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FORMATO_RESULTADODataTable = CType(MyBase.Clone,FORMATO_RESULTADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FORMATO_RESULTADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnFOR_REGISTRO = MyBase.Columns("FOR_REGISTRO")
            Me.columnFOR_ELEMENTO = MyBase.Columns("FOR_ELEMENTO")
            Me.columnFOR_TITULO = MyBase.Columns("FOR_TITULO")
            Me.columnFOR_CEL = MyBase.Columns("FOR_CEL")
            Me.columnFOR_POS = MyBase.Columns("FOR_POS")
            Me.columnFOR_LET = MyBase.Columns("FOR_LET")
            Me.columnFOR_PXLS = MyBase.Columns("FOR_PXLS")
            Me.columnFOR_SIMBOLO = MyBase.Columns("FOR_SIMBOLO")
            Me.columnFOR_TITULO2 = MyBase.Columns("FOR_TITULO2")
            Me.columnFOR_CEL2 = MyBase.Columns("FOR_CEL2")
            Me.columnFOR_POS2 = MyBase.Columns("FOR_POS2")
            Me.columnFOR_LET2 = MyBase.Columns("FOR_LET2")
            Me.columnFOR_PXLS2 = MyBase.Columns("FOR_PXLS2")
            Me.columnFOR_UNIDAD = MyBase.Columns("FOR_UNIDAD")
            Me.columnFOR_TITULO3 = MyBase.Columns("FOR_TITULO3")
            Me.columnFOR_CEL3 = MyBase.Columns("FOR_CEL3")
            Me.columnFOR_POS3 = MyBase.Columns("FOR_POS3")
            Me.columnFOR_LET3 = MyBase.Columns("FOR_LET3")
            Me.columnFOR_PXLS3 = MyBase.Columns("FOR_PXLS3")
            Me.columnFOR_RESULTADO = MyBase.Columns("FOR_RESULTADO")
            Me.columnFOR_CEL4 = MyBase.Columns("FOR_CEL4")
            Me.columnFOR_POS4 = MyBase.Columns("FOR_POS4")
            Me.columnFOR_LET4 = MyBase.Columns("FOR_LET4")
            Me.columnFOR_ENTERO = MyBase.Columns("FOR_ENTERO")
            Me.columnFOR_DECIMAL = MyBase.Columns("FOR_DECIMAL")
            Me.columnFOR_FREC = MyBase.Columns("FOR_FREC")
            Me.columnFOR_PXLS4 = MyBase.Columns("FOR_PXLS4")
            Me.columnFOR_RANGO_DESDE = MyBase.Columns("FOR_RANGO_DESDE")
            Me.columnFOR_CEL5 = MyBase.Columns("FOR_CEL5")
            Me.columnFOR_POS5 = MyBase.Columns("FOR_POS5")
            Me.columnFOR_LET5 = MyBase.Columns("FOR_LET5")
            Me.columnFOR_ENTERO2 = MyBase.Columns("FOR_ENTERO2")
            Me.columnFOR_DECIMAL2 = MyBase.Columns("FOR_DECIMAL2")
            Me.columnFOR_PXLS5 = MyBase.Columns("FOR_PXLS5")
            Me.columnFOR_RANGO_SIMBOLO = MyBase.Columns("FOR_RANGO_SIMBOLO")
            Me.columnFOR_CEL6 = MyBase.Columns("FOR_CEL6")
            Me.columnFOR_POS6 = MyBase.Columns("FOR_POS6")
            Me.columnFOR_LET6 = MyBase.Columns("FOR_LET6")
            Me.columnFOR_PXLS6 = MyBase.Columns("FOR_PXLS6")
            Me.columnFOR_RANGO_HASTA = MyBase.Columns("FOR_RANGO_HASTA")
            Me.columnFOR_CEL7 = MyBase.Columns("FOR_CEL7")
            Me.columnFOR_POS7 = MyBase.Columns("FOR_POS7")
            Me.columnFOR_LET7 = MyBase.Columns("FOR_LET7")
            Me.columnFOR_ENTERO3 = MyBase.Columns("FOR_ENTERO3")
            Me.columnFOR_DECIMAL3 = MyBase.Columns("FOR_DECIMAL3")
            Me.columnFOR_PXLS7 = MyBase.Columns("FOR_PXLS7")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnFOR_REGISTRO = New Global.System.Data.DataColumn("FOR_REGISTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_REGISTRO)
            Me.columnFOR_ELEMENTO = New Global.System.Data.DataColumn("FOR_ELEMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_ELEMENTO)
            Me.columnFOR_TITULO = New Global.System.Data.DataColumn("FOR_TITULO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_TITULO)
            Me.columnFOR_CEL = New Global.System.Data.DataColumn("FOR_CEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_CEL)
            Me.columnFOR_POS = New Global.System.Data.DataColumn("FOR_POS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_POS)
            Me.columnFOR_LET = New Global.System.Data.DataColumn("FOR_LET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_LET)
            Me.columnFOR_PXLS = New Global.System.Data.DataColumn("FOR_PXLS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_PXLS)
            Me.columnFOR_SIMBOLO = New Global.System.Data.DataColumn("FOR_SIMBOLO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_SIMBOLO)
            Me.columnFOR_TITULO2 = New Global.System.Data.DataColumn("FOR_TITULO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_TITULO2)
            Me.columnFOR_CEL2 = New Global.System.Data.DataColumn("FOR_CEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_CEL2)
            Me.columnFOR_POS2 = New Global.System.Data.DataColumn("FOR_POS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_POS2)
            Me.columnFOR_LET2 = New Global.System.Data.DataColumn("FOR_LET2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_LET2)
            Me.columnFOR_PXLS2 = New Global.System.Data.DataColumn("FOR_PXLS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_PXLS2)
            Me.columnFOR_UNIDAD = New Global.System.Data.DataColumn("FOR_UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_UNIDAD)
            Me.columnFOR_TITULO3 = New Global.System.Data.DataColumn("FOR_TITULO3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_TITULO3)
            Me.columnFOR_CEL3 = New Global.System.Data.DataColumn("FOR_CEL3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_CEL3)
            Me.columnFOR_POS3 = New Global.System.Data.DataColumn("FOR_POS3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_POS3)
            Me.columnFOR_LET3 = New Global.System.Data.DataColumn("FOR_LET3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_LET3)
            Me.columnFOR_PXLS3 = New Global.System.Data.DataColumn("FOR_PXLS3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_PXLS3)
            Me.columnFOR_RESULTADO = New Global.System.Data.DataColumn("FOR_RESULTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_RESULTADO)
            Me.columnFOR_CEL4 = New Global.System.Data.DataColumn("FOR_CEL4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_CEL4)
            Me.columnFOR_POS4 = New Global.System.Data.DataColumn("FOR_POS4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_POS4)
            Me.columnFOR_LET4 = New Global.System.Data.DataColumn("FOR_LET4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_LET4)
            Me.columnFOR_ENTERO = New Global.System.Data.DataColumn("FOR_ENTERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_ENTERO)
            Me.columnFOR_DECIMAL = New Global.System.Data.DataColumn("FOR_DECIMAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_DECIMAL)
            Me.columnFOR_FREC = New Global.System.Data.DataColumn("FOR_FREC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_FREC)
            Me.columnFOR_PXLS4 = New Global.System.Data.DataColumn("FOR_PXLS4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_PXLS4)
            Me.columnFOR_RANGO_DESDE = New Global.System.Data.DataColumn("FOR_RANGO_DESDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_RANGO_DESDE)
            Me.columnFOR_CEL5 = New Global.System.Data.DataColumn("FOR_CEL5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_CEL5)
            Me.columnFOR_POS5 = New Global.System.Data.DataColumn("FOR_POS5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_POS5)
            Me.columnFOR_LET5 = New Global.System.Data.DataColumn("FOR_LET5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_LET5)
            Me.columnFOR_ENTERO2 = New Global.System.Data.DataColumn("FOR_ENTERO2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_ENTERO2)
            Me.columnFOR_DECIMAL2 = New Global.System.Data.DataColumn("FOR_DECIMAL2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_DECIMAL2)
            Me.columnFOR_PXLS5 = New Global.System.Data.DataColumn("FOR_PXLS5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_PXLS5)
            Me.columnFOR_RANGO_SIMBOLO = New Global.System.Data.DataColumn("FOR_RANGO_SIMBOLO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_RANGO_SIMBOLO)
            Me.columnFOR_CEL6 = New Global.System.Data.DataColumn("FOR_CEL6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_CEL6)
            Me.columnFOR_POS6 = New Global.System.Data.DataColumn("FOR_POS6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_POS6)
            Me.columnFOR_LET6 = New Global.System.Data.DataColumn("FOR_LET6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_LET6)
            Me.columnFOR_PXLS6 = New Global.System.Data.DataColumn("FOR_PXLS6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_PXLS6)
            Me.columnFOR_RANGO_HASTA = New Global.System.Data.DataColumn("FOR_RANGO_HASTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_RANGO_HASTA)
            Me.columnFOR_CEL7 = New Global.System.Data.DataColumn("FOR_CEL7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_CEL7)
            Me.columnFOR_POS7 = New Global.System.Data.DataColumn("FOR_POS7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_POS7)
            Me.columnFOR_LET7 = New Global.System.Data.DataColumn("FOR_LET7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_LET7)
            Me.columnFOR_ENTERO3 = New Global.System.Data.DataColumn("FOR_ENTERO3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_ENTERO3)
            Me.columnFOR_DECIMAL3 = New Global.System.Data.DataColumn("FOR_DECIMAL3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_DECIMAL3)
            Me.columnFOR_PXLS7 = New Global.System.Data.DataColumn("FOR_PXLS7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOR_PXLS7)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnFOR_REGISTRO.AllowDBNull = false
            Me.columnFOR_UNIDAD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFORMATO_RESULTADORow() As FORMATO_RESULTADORow
            Return CType(Me.NewRow,FORMATO_RESULTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FORMATO_RESULTADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FORMATO_RESULTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FORMATO_RESULTADORowChangedEvent) Is Nothing) Then
                RaiseEvent FORMATO_RESULTADORowChanged(Me, New FORMATO_RESULTADORowChangeEvent(CType(e.Row,FORMATO_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FORMATO_RESULTADORowChangingEvent) Is Nothing) Then
                RaiseEvent FORMATO_RESULTADORowChanging(Me, New FORMATO_RESULTADORowChangeEvent(CType(e.Row,FORMATO_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FORMATO_RESULTADORowDeletedEvent) Is Nothing) Then
                RaiseEvent FORMATO_RESULTADORowDeleted(Me, New FORMATO_RESULTADORowChangeEvent(CType(e.Row,FORMATO_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FORMATO_RESULTADORowDeletingEvent) Is Nothing) Then
                RaiseEvent FORMATO_RESULTADORowDeleting(Me, New FORMATO_RESULTADORowChangeEvent(CType(e.Row,FORMATO_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFORMATO_RESULTADORow(ByVal row As FORMATO_RESULTADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FORMATO_RESULTADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RANGO_DBFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnCOD_ESP As Global.System.Data.DataColumn
        
        Private columnCOD_ELE_RANGO As Global.System.Data.DataColumn
        
        Private columnRANGO_DESDE As Global.System.Data.DataColumn
        
        Private columnSIMBOLO As Global.System.Data.DataColumn
        
        Private columnRANGO_HASTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RANGO_DBF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_ESPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_ESP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_ELE_RANGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_ELE_RANGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SIMBOLOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIMBOLO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RANGO_DBFRow
            Get
                Return CType(Me.Rows(index),RANGO_DBFRow)
            End Get
        End Property
        
        Public Event RANGO_DBFRowChanging As RANGO_DBFRowChangeEventHandler
        
        Public Event RANGO_DBFRowChanged As RANGO_DBFRowChangeEventHandler
        
        Public Event RANGO_DBFRowDeleting As RANGO_DBFRowChangeEventHandler
        
        Public Event RANGO_DBFRowDeleted As RANGO_DBFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRANGO_DBFRow(ByVal row As RANGO_DBFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRANGO_DBFRow(ByVal TMU_CODIGO As Integer, ByVal COD_ESP As String, ByVal COD_ELE_RANGO As String, ByVal RANGO_DESDE As String, ByVal SIMBOLO As String, ByVal RANGO_HASTA As String) As RANGO_DBFRow
            Dim rowRANGO_DBFRow As RANGO_DBFRow = CType(Me.NewRow,RANGO_DBFRow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, COD_ESP, COD_ELE_RANGO, RANGO_DESDE, SIMBOLO, RANGO_HASTA}
            rowRANGO_DBFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRANGO_DBFRow)
            Return rowRANGO_DBFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RANGO_DBFDataTable = CType(MyBase.Clone,RANGO_DBFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RANGO_DBFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnCOD_ESP = MyBase.Columns("COD_ESP")
            Me.columnCOD_ELE_RANGO = MyBase.Columns("COD_ELE_RANGO")
            Me.columnRANGO_DESDE = MyBase.Columns("RANGO_DESDE")
            Me.columnSIMBOLO = MyBase.Columns("SIMBOLO")
            Me.columnRANGO_HASTA = MyBase.Columns("RANGO_HASTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnCOD_ESP = New Global.System.Data.DataColumn("COD_ESP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_ESP)
            Me.columnCOD_ELE_RANGO = New Global.System.Data.DataColumn("COD_ELE_RANGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_ELE_RANGO)
            Me.columnRANGO_DESDE = New Global.System.Data.DataColumn("RANGO_DESDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_DESDE)
            Me.columnSIMBOLO = New Global.System.Data.DataColumn("SIMBOLO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIMBOLO)
            Me.columnRANGO_HASTA = New Global.System.Data.DataColumn("RANGO_HASTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_HASTA)
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnCOD_ESP.AllowDBNull = false
            Me.columnCOD_ELE_RANGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRANGO_DBFRow() As RANGO_DBFRow
            Return CType(Me.NewRow,RANGO_DBFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RANGO_DBFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RANGO_DBFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RANGO_DBFRowChangedEvent) Is Nothing) Then
                RaiseEvent RANGO_DBFRowChanged(Me, New RANGO_DBFRowChangeEvent(CType(e.Row,RANGO_DBFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RANGO_DBFRowChangingEvent) Is Nothing) Then
                RaiseEvent RANGO_DBFRowChanging(Me, New RANGO_DBFRowChangeEvent(CType(e.Row,RANGO_DBFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RANGO_DBFRowDeletedEvent) Is Nothing) Then
                RaiseEvent RANGO_DBFRowDeleted(Me, New RANGO_DBFRowChangeEvent(CType(e.Row,RANGO_DBFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RANGO_DBFRowDeletingEvent) Is Nothing) Then
                RaiseEvent RANGO_DBFRowDeleting(Me, New RANGO_DBFRowChangeEvent(CType(e.Row,RANGO_DBFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRANGO_DBFRow(ByVal row As RANGO_DBFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RANGO_DBFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NOTA_AUTO_RESULTADOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnESP_ESPECIE As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NOTA_AUTO_RESULTADOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESP_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESP_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NOTA_AUTO_RESULTADOSRow
            Get
                Return CType(Me.Rows(index),NOTA_AUTO_RESULTADOSRow)
            End Get
        End Property
        
        Public Event NOTA_AUTO_RESULTADOSRowChanging As NOTA_AUTO_RESULTADOSRowChangeEventHandler
        
        Public Event NOTA_AUTO_RESULTADOSRowChanged As NOTA_AUTO_RESULTADOSRowChangeEventHandler
        
        Public Event NOTA_AUTO_RESULTADOSRowDeleting As NOTA_AUTO_RESULTADOSRowChangeEventHandler
        
        Public Event NOTA_AUTO_RESULTADOSRowDeleted As NOTA_AUTO_RESULTADOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNOTA_AUTO_RESULTADOSRow(ByVal row As NOTA_AUTO_RESULTADOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNOTA_AUTO_RESULTADOSRow(ByVal ESP_ESPECIE As String, ByVal DESCRIPCION As String) As NOTA_AUTO_RESULTADOSRow
            Dim rowNOTA_AUTO_RESULTADOSRow As NOTA_AUTO_RESULTADOSRow = CType(Me.NewRow,NOTA_AUTO_RESULTADOSRow)
            Dim columnValuesArray() As Object = New Object() {ESP_ESPECIE, DESCRIPCION}
            rowNOTA_AUTO_RESULTADOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNOTA_AUTO_RESULTADOSRow)
            Return rowNOTA_AUTO_RESULTADOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NOTA_AUTO_RESULTADOSDataTable = CType(MyBase.Clone,NOTA_AUTO_RESULTADOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NOTA_AUTO_RESULTADOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnESP_ESPECIE = MyBase.Columns("ESP_ESPECIE")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnESP_ESPECIE = New Global.System.Data.DataColumn("ESP_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESP_ESPECIE)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnESP_ESPECIE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNOTA_AUTO_RESULTADOSRow() As NOTA_AUTO_RESULTADOSRow
            Return CType(Me.NewRow,NOTA_AUTO_RESULTADOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NOTA_AUTO_RESULTADOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NOTA_AUTO_RESULTADOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NOTA_AUTO_RESULTADOSRowChangedEvent) Is Nothing) Then
                RaiseEvent NOTA_AUTO_RESULTADOSRowChanged(Me, New NOTA_AUTO_RESULTADOSRowChangeEvent(CType(e.Row,NOTA_AUTO_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NOTA_AUTO_RESULTADOSRowChangingEvent) Is Nothing) Then
                RaiseEvent NOTA_AUTO_RESULTADOSRowChanging(Me, New NOTA_AUTO_RESULTADOSRowChangeEvent(CType(e.Row,NOTA_AUTO_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NOTA_AUTO_RESULTADOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent NOTA_AUTO_RESULTADOSRowDeleted(Me, New NOTA_AUTO_RESULTADOSRowChangeEvent(CType(e.Row,NOTA_AUTO_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NOTA_AUTO_RESULTADOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent NOTA_AUTO_RESULTADOSRowDeleting(Me, New NOTA_AUTO_RESULTADOSRowChangeEvent(CType(e.Row,NOTA_AUTO_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNOTA_AUTO_RESULTADOSRow(ByVal row As NOTA_AUTO_RESULTADOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NOTA_AUTO_RESULTADOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMPXHOJA_AGUADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNLAB As Global.System.Data.DataColumn
        
        Private columnCOD_EXT As Global.System.Data.DataColumn
        
        Private columnRESULTADO As Global.System.Data.DataColumn
        
        Private columnRANGO1 As Global.System.Data.DataColumn
        
        Private columnRANGO2 As Global.System.Data.DataColumn
        
        Private columnRANGO3 As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMPXHOJA_AGUA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_EXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_EXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESULTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMPXHOJA_AGUARow
            Get
                Return CType(Me.Rows(index),IMPXHOJA_AGUARow)
            End Get
        End Property
        
        Public Event IMPXHOJA_AGUARowChanging As IMPXHOJA_AGUARowChangeEventHandler
        
        Public Event IMPXHOJA_AGUARowChanged As IMPXHOJA_AGUARowChangeEventHandler
        
        Public Event IMPXHOJA_AGUARowDeleting As IMPXHOJA_AGUARowChangeEventHandler
        
        Public Event IMPXHOJA_AGUARowDeleted As IMPXHOJA_AGUARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMPXHOJA_AGUARow(ByVal row As IMPXHOJA_AGUARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMPXHOJA_AGUARow(ByVal NLAB As String, ByVal COD_EXT As String, ByVal RESULTADO As String, ByVal RANGO1 As String, ByVal RANGO2 As String, ByVal RANGO3 As String, ByVal UNIDAD As String) As IMPXHOJA_AGUARow
            Dim rowIMPXHOJA_AGUARow As IMPXHOJA_AGUARow = CType(Me.NewRow,IMPXHOJA_AGUARow)
            Dim columnValuesArray() As Object = New Object() {NLAB, COD_EXT, RESULTADO, RANGO1, RANGO2, RANGO3, UNIDAD}
            rowIMPXHOJA_AGUARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMPXHOJA_AGUARow)
            Return rowIMPXHOJA_AGUARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMPXHOJA_AGUADataTable = CType(MyBase.Clone,IMPXHOJA_AGUADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMPXHOJA_AGUADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNLAB = MyBase.Columns("NLAB")
            Me.columnCOD_EXT = MyBase.Columns("COD_EXT")
            Me.columnRESULTADO = MyBase.Columns("RESULTADO")
            Me.columnRANGO1 = MyBase.Columns("RANGO1")
            Me.columnRANGO2 = MyBase.Columns("RANGO2")
            Me.columnRANGO3 = MyBase.Columns("RANGO3")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNLAB = New Global.System.Data.DataColumn("NLAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB)
            Me.columnCOD_EXT = New Global.System.Data.DataColumn("COD_EXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_EXT)
            Me.columnRESULTADO = New Global.System.Data.DataColumn("RESULTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULTADO)
            Me.columnRANGO1 = New Global.System.Data.DataColumn("RANGO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO1)
            Me.columnRANGO2 = New Global.System.Data.DataColumn("RANGO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO2)
            Me.columnRANGO3 = New Global.System.Data.DataColumn("RANGO3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO3)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnCOD_EXT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMPXHOJA_AGUARow() As IMPXHOJA_AGUARow
            Return CType(Me.NewRow,IMPXHOJA_AGUARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMPXHOJA_AGUARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMPXHOJA_AGUARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMPXHOJA_AGUARowChangedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_AGUARowChanged(Me, New IMPXHOJA_AGUARowChangeEvent(CType(e.Row,IMPXHOJA_AGUARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMPXHOJA_AGUARowChangingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_AGUARowChanging(Me, New IMPXHOJA_AGUARowChangeEvent(CType(e.Row,IMPXHOJA_AGUARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMPXHOJA_AGUARowDeletedEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_AGUARowDeleted(Me, New IMPXHOJA_AGUARowChangeEvent(CType(e.Row,IMPXHOJA_AGUARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMPXHOJA_AGUARowDeletingEvent) Is Nothing) Then
                RaiseEvent IMPXHOJA_AGUARowDeleting(Me, New IMPXHOJA_AGUARowChangeEvent(CType(e.Row,IMPXHOJA_AGUARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMPXHOJA_AGUARow(ByVal row As IMPXHOJA_AGUARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMPXHOJA_AGUADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ELEMENTOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_EXT As Global.System.Data.DataColumn
        
        Private columnCOD_INT As Global.System.Data.DataColumn
        
        Private columnSIMBOLO As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        Private columnFILA As Global.System.Data.DataColumn
        
        Private columnCHEQUEO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ELEMENTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_EXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_EXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_INTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_INT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SIMBOLOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIMBOLO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FILAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFILA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHEQUEOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEQUEO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ELEMENTOSRow
            Get
                Return CType(Me.Rows(index),ELEMENTOSRow)
            End Get
        End Property
        
        Public Event ELEMENTOSRowChanging As ELEMENTOSRowChangeEventHandler
        
        Public Event ELEMENTOSRowChanged As ELEMENTOSRowChangeEventHandler
        
        Public Event ELEMENTOSRowDeleting As ELEMENTOSRowChangeEventHandler
        
        Public Event ELEMENTOSRowDeleted As ELEMENTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddELEMENTOSRow(ByVal row As ELEMENTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddELEMENTOSRow(ByVal COD_EXT As String, ByVal COD_INT As String, ByVal SIMBOLO As String, ByVal UNIDAD As String, ByVal FILA As Integer, ByVal CHEQUEO As String, ByVal ELE_CODIGO As String) As ELEMENTOSRow
            Dim rowELEMENTOSRow As ELEMENTOSRow = CType(Me.NewRow,ELEMENTOSRow)
            Dim columnValuesArray() As Object = New Object() {COD_EXT, COD_INT, SIMBOLO, UNIDAD, FILA, CHEQUEO, ELE_CODIGO}
            rowELEMENTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowELEMENTOSRow)
            Return rowELEMENTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ELEMENTOSDataTable = CType(MyBase.Clone,ELEMENTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ELEMENTOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_EXT = MyBase.Columns("COD_EXT")
            Me.columnCOD_INT = MyBase.Columns("COD_INT")
            Me.columnSIMBOLO = MyBase.Columns("SIMBOLO")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
            Me.columnFILA = MyBase.Columns("FILA")
            Me.columnCHEQUEO = MyBase.Columns("CHEQUEO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_EXT = New Global.System.Data.DataColumn("COD_EXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_EXT)
            Me.columnCOD_INT = New Global.System.Data.DataColumn("COD_INT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_INT)
            Me.columnSIMBOLO = New Global.System.Data.DataColumn("SIMBOLO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIMBOLO)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnFILA = New Global.System.Data.DataColumn("FILA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFILA)
            Me.columnCHEQUEO = New Global.System.Data.DataColumn("CHEQUEO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEQUEO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewELEMENTOSRow() As ELEMENTOSRow
            Return CType(Me.NewRow,ELEMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ELEMENTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ELEMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ELEMENTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent ELEMENTOSRowChanged(Me, New ELEMENTOSRowChangeEvent(CType(e.Row,ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ELEMENTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent ELEMENTOSRowChanging(Me, New ELEMENTOSRowChangeEvent(CType(e.Row,ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ELEMENTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ELEMENTOSRowDeleted(Me, New ELEMENTOSRowChangeEvent(CType(e.Row,ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ELEMENTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ELEMENTOSRowDeleting(Me, New ELEMENTOSRowChangeEvent(CType(e.Row,ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveELEMENTOSRow(ByVal row As ELEMENTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ELEMENTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COLUMNAS_FERTILIDADDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnCOLUMNADC As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHC As Global.System.Data.DataColumn
        
        Private columnCOLUMNADR As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHR As Global.System.Data.DataColumn
        
        Private columnCOLUMNADS As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COLUMNAS_FERTILIDAD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COLUMNAS_FERTILIDADRow
            Get
                Return CType(Me.Rows(index),COLUMNAS_FERTILIDADRow)
            End Get
        End Property
        
        Public Event COLUMNAS_FERTILIDADRowChanging As COLUMNAS_FERTILIDADRowChangeEventHandler
        
        Public Event COLUMNAS_FERTILIDADRowChanged As COLUMNAS_FERTILIDADRowChangeEventHandler
        
        Public Event COLUMNAS_FERTILIDADRowDeleting As COLUMNAS_FERTILIDADRowChangeEventHandler
        
        Public Event COLUMNAS_FERTILIDADRowDeleted As COLUMNAS_FERTILIDADRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOLUMNAS_FERTILIDADRow(ByVal row As COLUMNAS_FERTILIDADRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOLUMNAS_FERTILIDADRow(ByVal OT_NLAB As String, ByVal COLUMNADC As String, ByVal COLUMNAHC As String, ByVal COLUMNADR As String, ByVal COLUMNAHR As String, ByVal COLUMNADS As String, ByVal COLUMNAHS As String) As COLUMNAS_FERTILIDADRow
            Dim rowCOLUMNAS_FERTILIDADRow As COLUMNAS_FERTILIDADRow = CType(Me.NewRow,COLUMNAS_FERTILIDADRow)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB, COLUMNADC, COLUMNAHC, COLUMNADR, COLUMNAHR, COLUMNADS, COLUMNAHS}
            rowCOLUMNAS_FERTILIDADRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOLUMNAS_FERTILIDADRow)
            Return rowCOLUMNAS_FERTILIDADRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NLAB(ByVal OT_NLAB As String) As COLUMNAS_FERTILIDADRow
            Return CType(Me.Rows.Find(New Object() {OT_NLAB}),COLUMNAS_FERTILIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COLUMNAS_FERTILIDADDataTable = CType(MyBase.Clone,COLUMNAS_FERTILIDADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COLUMNAS_FERTILIDADDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnCOLUMNADC = MyBase.Columns("COLUMNADC")
            Me.columnCOLUMNAHC = MyBase.Columns("COLUMNAHC")
            Me.columnCOLUMNADR = MyBase.Columns("COLUMNADR")
            Me.columnCOLUMNAHR = MyBase.Columns("COLUMNAHR")
            Me.columnCOLUMNADS = MyBase.Columns("COLUMNADS")
            Me.columnCOLUMNAHS = MyBase.Columns("COLUMNAHS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnCOLUMNADC = New Global.System.Data.DataColumn("COLUMNADC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADC)
            Me.columnCOLUMNAHC = New Global.System.Data.DataColumn("COLUMNAHC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHC)
            Me.columnCOLUMNADR = New Global.System.Data.DataColumn("COLUMNADR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADR)
            Me.columnCOLUMNAHR = New Global.System.Data.DataColumn("COLUMNAHR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHR)
            Me.columnCOLUMNADS = New Global.System.Data.DataColumn("COLUMNADS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADS)
            Me.columnCOLUMNAHS = New Global.System.Data.DataColumn("COLUMNAHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey8", New Global.System.Data.DataColumn() {Me.columnOT_NLAB}, true))
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnOT_NLAB.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOLUMNAS_FERTILIDADRow() As COLUMNAS_FERTILIDADRow
            Return CType(Me.NewRow,COLUMNAS_FERTILIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COLUMNAS_FERTILIDADRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COLUMNAS_FERTILIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COLUMNAS_FERTILIDADRowChangedEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_FERTILIDADRowChanged(Me, New COLUMNAS_FERTILIDADRowChangeEvent(CType(e.Row,COLUMNAS_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COLUMNAS_FERTILIDADRowChangingEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_FERTILIDADRowChanging(Me, New COLUMNAS_FERTILIDADRowChangeEvent(CType(e.Row,COLUMNAS_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COLUMNAS_FERTILIDADRowDeletedEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_FERTILIDADRowDeleted(Me, New COLUMNAS_FERTILIDADRowChangeEvent(CType(e.Row,COLUMNAS_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COLUMNAS_FERTILIDADRowDeletingEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_FERTILIDADRowDeleting(Me, New COLUMNAS_FERTILIDADRowChangeEvent(CType(e.Row,COLUMNAS_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOLUMNAS_FERTILIDADRow(ByVal row As COLUMNAS_FERTILIDADRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COLUMNAS_FERTILIDADDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RANGO_AGUA_CEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLINEA_INTER As Global.System.Data.DataColumn
        
        Private columnRANGO_DESDE As Global.System.Data.DataColumn
        
        Private columnRANGO_HASTA As Global.System.Data.DataColumn
        
        Private columnNOTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RANGO_AGUA_CE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LINEA_INTERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINEA_INTER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RANGO_AGUA_CERow
            Get
                Return CType(Me.Rows(index),RANGO_AGUA_CERow)
            End Get
        End Property
        
        Public Event RANGO_AGUA_CERowChanging As RANGO_AGUA_CERowChangeEventHandler
        
        Public Event RANGO_AGUA_CERowChanged As RANGO_AGUA_CERowChangeEventHandler
        
        Public Event RANGO_AGUA_CERowDeleting As RANGO_AGUA_CERowChangeEventHandler
        
        Public Event RANGO_AGUA_CERowDeleted As RANGO_AGUA_CERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRANGO_AGUA_CERow(ByVal row As RANGO_AGUA_CERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRANGO_AGUA_CERow(ByVal LINEA_INTER As Integer, ByVal RANGO_DESDE As Double, ByVal RANGO_HASTA As Double, ByVal NOTA As String) As RANGO_AGUA_CERow
            Dim rowRANGO_AGUA_CERow As RANGO_AGUA_CERow = CType(Me.NewRow,RANGO_AGUA_CERow)
            Dim columnValuesArray() As Object = New Object() {LINEA_INTER, RANGO_DESDE, RANGO_HASTA, NOTA}
            rowRANGO_AGUA_CERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRANGO_AGUA_CERow)
            Return rowRANGO_AGUA_CERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLINEA_INTER(ByVal LINEA_INTER As Integer) As RANGO_AGUA_CERow
            Return CType(Me.Rows.Find(New Object() {LINEA_INTER}),RANGO_AGUA_CERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RANGO_AGUA_CEDataTable = CType(MyBase.Clone,RANGO_AGUA_CEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RANGO_AGUA_CEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLINEA_INTER = MyBase.Columns("LINEA_INTER")
            Me.columnRANGO_DESDE = MyBase.Columns("RANGO_DESDE")
            Me.columnRANGO_HASTA = MyBase.Columns("RANGO_HASTA")
            Me.columnNOTA = MyBase.Columns("NOTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLINEA_INTER = New Global.System.Data.DataColumn("LINEA_INTER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINEA_INTER)
            Me.columnRANGO_DESDE = New Global.System.Data.DataColumn("RANGO_DESDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_DESDE)
            Me.columnRANGO_HASTA = New Global.System.Data.DataColumn("RANGO_HASTA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_HASTA)
            Me.columnNOTA = New Global.System.Data.DataColumn("NOTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey7", New Global.System.Data.DataColumn() {Me.columnLINEA_INTER}, true))
            Me.columnLINEA_INTER.AllowDBNull = false
            Me.columnLINEA_INTER.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRANGO_AGUA_CERow() As RANGO_AGUA_CERow
            Return CType(Me.NewRow,RANGO_AGUA_CERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RANGO_AGUA_CERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RANGO_AGUA_CERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RANGO_AGUA_CERowChangedEvent) Is Nothing) Then
                RaiseEvent RANGO_AGUA_CERowChanged(Me, New RANGO_AGUA_CERowChangeEvent(CType(e.Row,RANGO_AGUA_CERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RANGO_AGUA_CERowChangingEvent) Is Nothing) Then
                RaiseEvent RANGO_AGUA_CERowChanging(Me, New RANGO_AGUA_CERowChangeEvent(CType(e.Row,RANGO_AGUA_CERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RANGO_AGUA_CERowDeletedEvent) Is Nothing) Then
                RaiseEvent RANGO_AGUA_CERowDeleted(Me, New RANGO_AGUA_CERowChangeEvent(CType(e.Row,RANGO_AGUA_CERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RANGO_AGUA_CERowDeletingEvent) Is Nothing) Then
                RaiseEvent RANGO_AGUA_CERowDeleting(Me, New RANGO_AGUA_CERowChangeEvent(CType(e.Row,RANGO_AGUA_CERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRANGO_AGUA_CERow(ByVal row As RANGO_AGUA_CERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RANGO_AGUA_CEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TABLA_DIGRES2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_ESTADO As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TABLA_DIGRES2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TABLA_DIGRES2Row
            Get
                Return CType(Me.Rows(index),TABLA_DIGRES2Row)
            End Get
        End Property
        
        Public Event TABLA_DIGRES2RowChanging As TABLA_DIGRES2RowChangeEventHandler
        
        Public Event TABLA_DIGRES2RowChanged As TABLA_DIGRES2RowChangeEventHandler
        
        Public Event TABLA_DIGRES2RowDeleting As TABLA_DIGRES2RowChangeEventHandler
        
        Public Event TABLA_DIGRES2RowDeleted As TABLA_DIGRES2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTABLA_DIGRES2Row(ByVal row As TABLA_DIGRES2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTABLA_DIGRES2Row(ByVal OT_NLAB As Integer, ByVal ELE_CODIGO As String, ByVal ELE_ESTADO As String, ByVal ANA_CODIGO As Single, ByVal TMU_CODIGO As Integer) As TABLA_DIGRES2Row
            Dim rowTABLA_DIGRES2Row As TABLA_DIGRES2Row = CType(Me.NewRow,TABLA_DIGRES2Row)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB, ELE_CODIGO, ELE_ESTADO, ANA_CODIGO, TMU_CODIGO}
            rowTABLA_DIGRES2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowTABLA_DIGRES2Row)
            Return rowTABLA_DIGRES2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NLABELE_CODIGO(ByVal OT_NLAB As Integer, ByVal ELE_CODIGO As String) As TABLA_DIGRES2Row
            Return CType(Me.Rows.Find(New Object() {OT_NLAB, ELE_CODIGO}),TABLA_DIGRES2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TABLA_DIGRES2DataTable = CType(MyBase.Clone,TABLA_DIGRES2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TABLA_DIGRES2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnELE_ESTADO = MyBase.Columns("ELE_ESTADO")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnELE_ESTADO = New Global.System.Data.DataColumn("ELE_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_ESTADO)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey2", New Global.System.Data.DataColumn() {Me.columnOT_NLAB, Me.columnELE_CODIGO}, true))
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTABLA_DIGRES2Row() As TABLA_DIGRES2Row
            Return CType(Me.NewRow,TABLA_DIGRES2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TABLA_DIGRES2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TABLA_DIGRES2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TABLA_DIGRES2RowChangedEvent) Is Nothing) Then
                RaiseEvent TABLA_DIGRES2RowChanged(Me, New TABLA_DIGRES2RowChangeEvent(CType(e.Row,TABLA_DIGRES2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TABLA_DIGRES2RowChangingEvent) Is Nothing) Then
                RaiseEvent TABLA_DIGRES2RowChanging(Me, New TABLA_DIGRES2RowChangeEvent(CType(e.Row,TABLA_DIGRES2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TABLA_DIGRES2RowDeletedEvent) Is Nothing) Then
                RaiseEvent TABLA_DIGRES2RowDeleted(Me, New TABLA_DIGRES2RowChangeEvent(CType(e.Row,TABLA_DIGRES2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TABLA_DIGRES2RowDeletingEvent) Is Nothing) Then
                RaiseEvent TABLA_DIGRES2RowDeleting(Me, New TABLA_DIGRES2RowChangeEvent(CType(e.Row,TABLA_DIGRES2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTABLA_DIGRES2Row(ByVal row As TABLA_DIGRES2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TABLA_DIGRES2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SUBMUESTRADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_DESCRIPCION As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SUBMUESTRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SUBMUESTRARow
            Get
                Return CType(Me.Rows(index),SUBMUESTRARow)
            End Get
        End Property
        
        Public Event SUBMUESTRARowChanging As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowChanged As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowDeleting As SUBMUESTRARowChangeEventHandler
        
        Public Event SUBMUESTRARowDeleted As SUBMUESTRARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSUBMUESTRARow(ByVal row As SUBMUESTRARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSUBMUESTRARow(ByVal SUB_CODIGO As Integer, ByVal SUB_DESCRIPCION As String, ByVal TMU_CODIGO As Integer) As SUBMUESTRARow
            Dim rowSUBMUESTRARow As SUBMUESTRARow = CType(Me.NewRow,SUBMUESTRARow)
            Dim columnValuesArray() As Object = New Object() {SUB_CODIGO, SUB_DESCRIPCION, TMU_CODIGO}
            rowSUBMUESTRARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSUBMUESTRARow)
            Return rowSUBMUESTRARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySUB_CODIGO(ByVal SUB_CODIGO As Integer) As SUBMUESTRARow
            Return CType(Me.Rows.Find(New Object() {SUB_CODIGO}),SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SUBMUESTRADataTable = CType(MyBase.Clone,SUBMUESTRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SUBMUESTRADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnSUB_DESCRIPCION = MyBase.Columns("SUB_DESCRIPCION")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnSUB_DESCRIPCION = New Global.System.Data.DataColumn("SUB_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_DESCRIPCION)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey1", New Global.System.Data.DataColumn() {Me.columnSUB_CODIGO}, true))
            Me.columnSUB_CODIGO.AllowDBNull = false
            Me.columnSUB_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSUBMUESTRARow() As SUBMUESTRARow
            Return CType(Me.NewRow,SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SUBMUESTRARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SUBMUESTRARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SUBMUESTRARowChangedEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowChanged(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SUBMUESTRARowChangingEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowChanging(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SUBMUESTRARowDeletedEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowDeleted(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SUBMUESTRARowDeletingEvent) Is Nothing) Then
                RaiseEvent SUBMUESTRARowDeleting(Me, New SUBMUESTRARowChangeEvent(CType(e.Row,SUBMUESTRARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSUBMUESTRARow(ByVal row As SUBMUESTRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SUBMUESTRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MSUEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIORD As Global.System.Data.DataColumn
        
        Private columnINLA As Global.System.Data.DataColumn
        
        Private columnIFEI As Global.System.Data.DataColumn
        
        Private columnIPRO As Global.System.Data.DataColumn
        
        Private columnIEMP As Global.System.Data.DataColumn
        
        Private columnIREM As Global.System.Data.DataColumn
        
        Private columnICUA As Global.System.Data.DataColumn
        
        Private columnICU1 As Global.System.Data.DataColumn
        
        Private columnICU2 As Global.System.Data.DataColumn
        
        Private columnIPRE As Global.System.Data.DataColumn
        
        Private columnILOC As Global.System.Data.DataColumn
        
        Private columnIREG As Global.System.Data.DataColumn
        
        Private columnIFEM As Global.System.Data.DataColumn
        
        Private columnIREA As Global.System.Data.DataColumn
        
        Private columnICAA As Global.System.Data.DataColumn
        
        Private columnIREE As Global.System.Data.DataColumn
        
        Private columnICAE As Global.System.Data.DataColumn
        
        Private columnITEX As Global.System.Data.DataColumn
        
        Private columnIROS As Global.System.Data.DataColumn
        
        Private columnIPRF As Global.System.Data.DataColumn
        
        Private columnIDRE As Global.System.Data.DataColumn
        
        Private column_IN As Global.System.Data.DataColumn
        
        Private columnICT1 As Global.System.Data.DataColumn
        
        Private columnIP As Global.System.Data.DataColumn
        
        Private columnICT2 As Global.System.Data.DataColumn
        
        Private columnIK As Global.System.Data.DataColumn
        
        Private columnICT3 As Global.System.Data.DataColumn
        
        Private columnIPH As Global.System.Data.DataColumn
        
        Private columnICT4 As Global.System.Data.DataColumn
        
        Private columnICE As Global.System.Data.DataColumn
        
        Private columnICT5 As Global.System.Data.DataColumn
        
        Private columnIMO As Global.System.Data.DataColumn
        
        Private columnICT6 As Global.System.Data.DataColumn
        
        Private columnCARBONO_O As Global.System.Data.DataColumn
        
        Private columnNITRO_TOT As Global.System.Data.DataColumn
        
        Private columnRELACION As Global.System.Data.DataColumn
        
        Private columnPOTASI_SO As Global.System.Data.DataColumn
        
        Private columnAZUFRE_EX As Global.System.Data.DataColumn
        
        Private columnALUMIN_EX As Global.System.Data.DataColumn
        
        Private columnCALCIO As Global.System.Data.DataColumn
        
        Private columnCALCIO2 As Global.System.Data.DataColumn
        
        Private columnMAGNESIO As Global.System.Data.DataColumn
        
        Private columnMAGNESIO2 As Global.System.Data.DataColumn
        
        Private columnSODIO As Global.System.Data.DataColumn
        
        Private columnSODIO2 As Global.System.Data.DataColumn
        
        Private columnPOTASIO As Global.System.Data.DataColumn
        
        Private columnPOTASIO2 As Global.System.Data.DataColumn
        
        Private columnSUMABASES As Global.System.Data.DataColumn
        
        Private columnCIC As Global.System.Data.DataColumn
        
        Private columnALUMINIO As Global.System.Data.DataColumn
        
        Private columnSATURA As Global.System.Data.DataColumn
        
        Private columnCICE As Global.System.Data.DataColumn
        
        Private columnZINC As Global.System.Data.DataColumn
        
        Private columnMANGANESO As Global.System.Data.DataColumn
        
        Private columnFIERRO As Global.System.Data.DataColumn
        
        Private columnCOBRE As Global.System.Data.DataColumn
        
        Private columnBORO As Global.System.Data.DataColumn
        
        Private columnARCILLA As Global.System.Data.DataColumn
        
        Private columnLIMO As Global.System.Data.DataColumn
        
        Private columnARENA As Global.System.Data.DataColumn
        
        Private columnTEXTURA As Global.System.Data.DataColumn
        
        Private columnDENSIDAD As Global.System.Data.DataColumn
        
        Private columnHUMEDAD03 As Global.System.Data.DataColumn
        
        Private columnHUMEDAD15 As Global.System.Data.DataColumn
        
        Private columnHUMEDAD As Global.System.Data.DataColumn
        
        Private columnPIEDRAS As Global.System.Data.DataColumn
        
        Private columnIEL1 As Global.System.Data.DataColumn
        
        Private columnIUN1 As Global.System.Data.DataColumn
        
        Private columnICO1 As Global.System.Data.DataColumn
        
        Private columnICA1 As Global.System.Data.DataColumn
        
        Private columnIEL2 As Global.System.Data.DataColumn
        
        Private columnIUN2 As Global.System.Data.DataColumn
        
        Private columnICO2 As Global.System.Data.DataColumn
        
        Private columnICA2 As Global.System.Data.DataColumn
        
        Private columnIEL3 As Global.System.Data.DataColumn
        
        Private columnIUN3 As Global.System.Data.DataColumn
        
        Private columnICO3 As Global.System.Data.DataColumn
        
        Private columnICA3 As Global.System.Data.DataColumn
        
        Private columnIEL4 As Global.System.Data.DataColumn
        
        Private columnIUN4 As Global.System.Data.DataColumn
        
        Private columnICO4 As Global.System.Data.DataColumn
        
        Private columnICA4 As Global.System.Data.DataColumn
        
        Private columnIEL5 As Global.System.Data.DataColumn
        
        Private columnIUN5 As Global.System.Data.DataColumn
        
        Private columnICO5 As Global.System.Data.DataColumn
        
        Private columnICA5 As Global.System.Data.DataColumn
        
        Private columnIEL6 As Global.System.Data.DataColumn
        
        Private columnIUN6 As Global.System.Data.DataColumn
        
        Private columnICO6 As Global.System.Data.DataColumn
        
        Private columnICA6 As Global.System.Data.DataColumn
        
        Private columnIOB1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MSUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICUAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICUA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICU1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICU1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICU2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICU2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICAAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICAA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICAEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICAE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IROSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIROS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPRFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _INColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_IN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICT4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICT4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICT5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICT5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICT6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICT6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARBONO_OColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARBONO_O
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NITRO_TOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNITRO_TOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RELACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRELACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POTASI_SOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOTASI_SO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AZUFRE_EXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAZUFRE_EX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALUMIN_EXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALUMIN_EX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CALCIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCALCIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CALCIO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCALCIO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAGNESIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAGNESIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAGNESIO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAGNESIO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SODIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSODIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SODIO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSODIO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POTASIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOTASIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POTASIO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOTASIO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUMABASESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUMABASES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALUMINIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALUMINIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SATURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSATURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZINCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZINC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MANGANESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMANGANESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIERROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIERRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BOROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBORO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ARCILLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARCILLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ARENAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnARENA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DENSIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDENSIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HUMEDAD03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHUMEDAD03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HUMEDAD15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHUMEDAD15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HUMEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHUMEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PIEDRASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPIEDRAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IUN1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIUN1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IUN2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIUN2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IUN3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIUN3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICA3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICA3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEL4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEL4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IUN4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIUN4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICO4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICO4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICA4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICA4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEL5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEL5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IUN5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIUN5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICO5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICO5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICA5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICA5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEL6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEL6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IUN6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIUN6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICO6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICO6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICA6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICA6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOB1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOB1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MSUERow
            Get
                Return CType(Me.Rows(index),MSUERow)
            End Get
        End Property
        
        Public Event MSUERowChanging As MSUERowChangeEventHandler
        
        Public Event MSUERowChanged As MSUERowChangeEventHandler
        
        Public Event MSUERowDeleting As MSUERowChangeEventHandler
        
        Public Event MSUERowDeleted As MSUERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMSUERow(ByVal row As MSUERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMSUERow( _
                    ByVal IORD As String,  _
                    ByVal INLA As String,  _
                    ByVal IFEI As Date,  _
                    ByVal IPRO As String,  _
                    ByVal IEMP As String,  _
                    ByVal IREM As String,  _
                    ByVal ICUA As String,  _
                    ByVal ICU1 As String,  _
                    ByVal ICU2 As String,  _
                    ByVal IPRE As String,  _
                    ByVal ILOC As String,  _
                    ByVal IREG As String,  _
                    ByVal IFEM As Date,  _
                    ByVal IREA As String,  _
                    ByVal ICAA As Double,  _
                    ByVal IREE As String,  _
                    ByVal ICAE As Double,  _
                    ByVal ITEX As String,  _
                    ByVal IROS As String,  _
                    ByVal IPRF As String,  _
                    ByVal IDRE As String,  _
                    ByVal _IN As Double,  _
                    ByVal ICT1 As String,  _
                    ByVal IP As Double,  _
                    ByVal ICT2 As String,  _
                    ByVal IK As Double,  _
                    ByVal ICT3 As String,  _
                    ByVal IPH As Double,  _
                    ByVal ICT4 As String,  _
                    ByVal ICE As Double,  _
                    ByVal ICT5 As String,  _
                    ByVal IMO As Double,  _
                    ByVal ICT6 As String,  _
                    ByVal CARBONO_O As Double,  _
                    ByVal NITRO_TOT As Double,  _
                    ByVal RELACION As Double,  _
                    ByVal POTASI_SO As Double,  _
                    ByVal AZUFRE_EX As Double,  _
                    ByVal ALUMIN_EX As Double,  _
                    ByVal CALCIO As Double,  _
                    ByVal CALCIO2 As Double,  _
                    ByVal MAGNESIO As Double,  _
                    ByVal MAGNESIO2 As Double,  _
                    ByVal SODIO As Double,  _
                    ByVal SODIO2 As Double,  _
                    ByVal POTASIO As Double,  _
                    ByVal POTASIO2 As Double,  _
                    ByVal SUMABASES As Double,  _
                    ByVal CIC As Double,  _
                    ByVal ALUMINIO As Double,  _
                    ByVal SATURA As Double,  _
                    ByVal CICE As Double,  _
                    ByVal ZINC As Double,  _
                    ByVal MANGANESO As Double,  _
                    ByVal FIERRO As Double,  _
                    ByVal COBRE As Double,  _
                    ByVal BORO As Double,  _
                    ByVal ARCILLA As Double,  _
                    ByVal LIMO As Double,  _
                    ByVal ARENA As Double,  _
                    ByVal TEXTURA As String,  _
                    ByVal DENSIDAD As Double,  _
                    ByVal HUMEDAD03 As Double,  _
                    ByVal HUMEDAD15 As Double,  _
                    ByVal HUMEDAD As Double,  _
                    ByVal PIEDRAS As Double,  _
                    ByVal IEL1 As String,  _
                    ByVal IUN1 As String,  _
                    ByVal ICO1 As String,  _
                    ByVal ICA1 As String,  _
                    ByVal IEL2 As String,  _
                    ByVal IUN2 As String,  _
                    ByVal ICO2 As String,  _
                    ByVal ICA2 As String,  _
                    ByVal IEL3 As String,  _
                    ByVal IUN3 As String,  _
                    ByVal ICO3 As String,  _
                    ByVal ICA3 As String,  _
                    ByVal IEL4 As String,  _
                    ByVal IUN4 As String,  _
                    ByVal ICO4 As String,  _
                    ByVal ICA4 As String,  _
                    ByVal IEL5 As String,  _
                    ByVal IUN5 As String,  _
                    ByVal ICO5 As String,  _
                    ByVal ICA5 As String,  _
                    ByVal IEL6 As String,  _
                    ByVal IUN6 As String,  _
                    ByVal ICO6 As String,  _
                    ByVal ICA6 As String,  _
                    ByVal IOB1 As String) As MSUERow
            Dim rowMSUERow As MSUERow = CType(Me.NewRow,MSUERow)
            Dim columnValuesArray() As Object = New Object() {IORD, INLA, IFEI, IPRO, IEMP, IREM, ICUA, ICU1, ICU2, IPRE, ILOC, IREG, IFEM, IREA, ICAA, IREE, ICAE, ITEX, IROS, IPRF, IDRE, _IN, ICT1, IP, ICT2, IK, ICT3, IPH, ICT4, ICE, ICT5, IMO, ICT6, CARBONO_O, NITRO_TOT, RELACION, POTASI_SO, AZUFRE_EX, ALUMIN_EX, CALCIO, CALCIO2, MAGNESIO, MAGNESIO2, SODIO, SODIO2, POTASIO, POTASIO2, SUMABASES, CIC, ALUMINIO, SATURA, CICE, ZINC, MANGANESO, FIERRO, COBRE, BORO, ARCILLA, LIMO, ARENA, TEXTURA, DENSIDAD, HUMEDAD03, HUMEDAD15, HUMEDAD, PIEDRAS, IEL1, IUN1, ICO1, ICA1, IEL2, IUN2, ICO2, ICA2, IEL3, IUN3, ICO3, ICA3, IEL4, IUN4, ICO4, ICA4, IEL5, IUN5, ICO5, ICA5, IEL6, IUN6, ICO6, ICA6, IOB1}
            rowMSUERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMSUERow)
            Return rowMSUERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MSUEDataTable = CType(MyBase.Clone,MSUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MSUEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIORD = MyBase.Columns("IORD")
            Me.columnINLA = MyBase.Columns("INLA")
            Me.columnIFEI = MyBase.Columns("IFEI")
            Me.columnIPRO = MyBase.Columns("IPRO")
            Me.columnIEMP = MyBase.Columns("IEMP")
            Me.columnIREM = MyBase.Columns("IREM")
            Me.columnICUA = MyBase.Columns("ICUA")
            Me.columnICU1 = MyBase.Columns("ICU1")
            Me.columnICU2 = MyBase.Columns("ICU2")
            Me.columnIPRE = MyBase.Columns("IPRE")
            Me.columnILOC = MyBase.Columns("ILOC")
            Me.columnIREG = MyBase.Columns("IREG")
            Me.columnIFEM = MyBase.Columns("IFEM")
            Me.columnIREA = MyBase.Columns("IREA")
            Me.columnICAA = MyBase.Columns("ICAA")
            Me.columnIREE = MyBase.Columns("IREE")
            Me.columnICAE = MyBase.Columns("ICAE")
            Me.columnITEX = MyBase.Columns("ITEX")
            Me.columnIROS = MyBase.Columns("IROS")
            Me.columnIPRF = MyBase.Columns("IPRF")
            Me.columnIDRE = MyBase.Columns("IDRE")
            Me.column_IN = MyBase.Columns("IN")
            Me.columnICT1 = MyBase.Columns("ICT1")
            Me.columnIP = MyBase.Columns("IP")
            Me.columnICT2 = MyBase.Columns("ICT2")
            Me.columnIK = MyBase.Columns("IK")
            Me.columnICT3 = MyBase.Columns("ICT3")
            Me.columnIPH = MyBase.Columns("IPH")
            Me.columnICT4 = MyBase.Columns("ICT4")
            Me.columnICE = MyBase.Columns("ICE")
            Me.columnICT5 = MyBase.Columns("ICT5")
            Me.columnIMO = MyBase.Columns("IMO")
            Me.columnICT6 = MyBase.Columns("ICT6")
            Me.columnCARBONO_O = MyBase.Columns("CARBONO_O")
            Me.columnNITRO_TOT = MyBase.Columns("NITRO_TOT")
            Me.columnRELACION = MyBase.Columns("RELACION")
            Me.columnPOTASI_SO = MyBase.Columns("POTASI_SO")
            Me.columnAZUFRE_EX = MyBase.Columns("AZUFRE_EX")
            Me.columnALUMIN_EX = MyBase.Columns("ALUMIN_EX")
            Me.columnCALCIO = MyBase.Columns("CALCIO")
            Me.columnCALCIO2 = MyBase.Columns("CALCIO2")
            Me.columnMAGNESIO = MyBase.Columns("MAGNESIO")
            Me.columnMAGNESIO2 = MyBase.Columns("MAGNESIO2")
            Me.columnSODIO = MyBase.Columns("SODIO")
            Me.columnSODIO2 = MyBase.Columns("SODIO2")
            Me.columnPOTASIO = MyBase.Columns("POTASIO")
            Me.columnPOTASIO2 = MyBase.Columns("POTASIO2")
            Me.columnSUMABASES = MyBase.Columns("SUMABASES")
            Me.columnCIC = MyBase.Columns("CIC")
            Me.columnALUMINIO = MyBase.Columns("ALUMINIO")
            Me.columnSATURA = MyBase.Columns("SATURA")
            Me.columnCICE = MyBase.Columns("CICE")
            Me.columnZINC = MyBase.Columns("ZINC")
            Me.columnMANGANESO = MyBase.Columns("MANGANESO")
            Me.columnFIERRO = MyBase.Columns("FIERRO")
            Me.columnCOBRE = MyBase.Columns("COBRE")
            Me.columnBORO = MyBase.Columns("BORO")
            Me.columnARCILLA = MyBase.Columns("ARCILLA")
            Me.columnLIMO = MyBase.Columns("LIMO")
            Me.columnARENA = MyBase.Columns("ARENA")
            Me.columnTEXTURA = MyBase.Columns("TEXTURA")
            Me.columnDENSIDAD = MyBase.Columns("DENSIDAD")
            Me.columnHUMEDAD03 = MyBase.Columns("HUMEDAD03")
            Me.columnHUMEDAD15 = MyBase.Columns("HUMEDAD15")
            Me.columnHUMEDAD = MyBase.Columns("HUMEDAD")
            Me.columnPIEDRAS = MyBase.Columns("PIEDRAS")
            Me.columnIEL1 = MyBase.Columns("IEL1")
            Me.columnIUN1 = MyBase.Columns("IUN1")
            Me.columnICO1 = MyBase.Columns("ICO1")
            Me.columnICA1 = MyBase.Columns("ICA1")
            Me.columnIEL2 = MyBase.Columns("IEL2")
            Me.columnIUN2 = MyBase.Columns("IUN2")
            Me.columnICO2 = MyBase.Columns("ICO2")
            Me.columnICA2 = MyBase.Columns("ICA2")
            Me.columnIEL3 = MyBase.Columns("IEL3")
            Me.columnIUN3 = MyBase.Columns("IUN3")
            Me.columnICO3 = MyBase.Columns("ICO3")
            Me.columnICA3 = MyBase.Columns("ICA3")
            Me.columnIEL4 = MyBase.Columns("IEL4")
            Me.columnIUN4 = MyBase.Columns("IUN4")
            Me.columnICO4 = MyBase.Columns("ICO4")
            Me.columnICA4 = MyBase.Columns("ICA4")
            Me.columnIEL5 = MyBase.Columns("IEL5")
            Me.columnIUN5 = MyBase.Columns("IUN5")
            Me.columnICO5 = MyBase.Columns("ICO5")
            Me.columnICA5 = MyBase.Columns("ICA5")
            Me.columnIEL6 = MyBase.Columns("IEL6")
            Me.columnIUN6 = MyBase.Columns("IUN6")
            Me.columnICO6 = MyBase.Columns("ICO6")
            Me.columnICA6 = MyBase.Columns("ICA6")
            Me.columnIOB1 = MyBase.Columns("IOB1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIORD = New Global.System.Data.DataColumn("IORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIORD)
            Me.columnINLA = New Global.System.Data.DataColumn("INLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINLA)
            Me.columnIFEI = New Global.System.Data.DataColumn("IFEI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEI)
            Me.columnIPRO = New Global.System.Data.DataColumn("IPRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRO)
            Me.columnIEMP = New Global.System.Data.DataColumn("IEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEMP)
            Me.columnIREM = New Global.System.Data.DataColumn("IREM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREM)
            Me.columnICUA = New Global.System.Data.DataColumn("ICUA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICUA)
            Me.columnICU1 = New Global.System.Data.DataColumn("ICU1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICU1)
            Me.columnICU2 = New Global.System.Data.DataColumn("ICU2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICU2)
            Me.columnIPRE = New Global.System.Data.DataColumn("IPRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRE)
            Me.columnILOC = New Global.System.Data.DataColumn("ILOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILOC)
            Me.columnIREG = New Global.System.Data.DataColumn("IREG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREG)
            Me.columnIFEM = New Global.System.Data.DataColumn("IFEM", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEM)
            Me.columnIREA = New Global.System.Data.DataColumn("IREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREA)
            Me.columnICAA = New Global.System.Data.DataColumn("ICAA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICAA)
            Me.columnIREE = New Global.System.Data.DataColumn("IREE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREE)
            Me.columnICAE = New Global.System.Data.DataColumn("ICAE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICAE)
            Me.columnITEX = New Global.System.Data.DataColumn("ITEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEX)
            Me.columnIROS = New Global.System.Data.DataColumn("IROS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIROS)
            Me.columnIPRF = New Global.System.Data.DataColumn("IPRF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRF)
            Me.columnIDRE = New Global.System.Data.DataColumn("IDRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDRE)
            Me.column_IN = New Global.System.Data.DataColumn("IN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_IN)
            Me.columnICT1 = New Global.System.Data.DataColumn("ICT1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICT1)
            Me.columnIP = New Global.System.Data.DataColumn("IP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIP)
            Me.columnICT2 = New Global.System.Data.DataColumn("ICT2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICT2)
            Me.columnIK = New Global.System.Data.DataColumn("IK", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIK)
            Me.columnICT3 = New Global.System.Data.DataColumn("ICT3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICT3)
            Me.columnIPH = New Global.System.Data.DataColumn("IPH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPH)
            Me.columnICT4 = New Global.System.Data.DataColumn("ICT4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICT4)
            Me.columnICE = New Global.System.Data.DataColumn("ICE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICE)
            Me.columnICT5 = New Global.System.Data.DataColumn("ICT5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICT5)
            Me.columnIMO = New Global.System.Data.DataColumn("IMO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMO)
            Me.columnICT6 = New Global.System.Data.DataColumn("ICT6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICT6)
            Me.columnCARBONO_O = New Global.System.Data.DataColumn("CARBONO_O", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARBONO_O)
            Me.columnNITRO_TOT = New Global.System.Data.DataColumn("NITRO_TOT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNITRO_TOT)
            Me.columnRELACION = New Global.System.Data.DataColumn("RELACION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRELACION)
            Me.columnPOTASI_SO = New Global.System.Data.DataColumn("POTASI_SO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOTASI_SO)
            Me.columnAZUFRE_EX = New Global.System.Data.DataColumn("AZUFRE_EX", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAZUFRE_EX)
            Me.columnALUMIN_EX = New Global.System.Data.DataColumn("ALUMIN_EX", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALUMIN_EX)
            Me.columnCALCIO = New Global.System.Data.DataColumn("CALCIO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCALCIO)
            Me.columnCALCIO2 = New Global.System.Data.DataColumn("CALCIO2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCALCIO2)
            Me.columnMAGNESIO = New Global.System.Data.DataColumn("MAGNESIO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAGNESIO)
            Me.columnMAGNESIO2 = New Global.System.Data.DataColumn("MAGNESIO2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAGNESIO2)
            Me.columnSODIO = New Global.System.Data.DataColumn("SODIO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSODIO)
            Me.columnSODIO2 = New Global.System.Data.DataColumn("SODIO2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSODIO2)
            Me.columnPOTASIO = New Global.System.Data.DataColumn("POTASIO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOTASIO)
            Me.columnPOTASIO2 = New Global.System.Data.DataColumn("POTASIO2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOTASIO2)
            Me.columnSUMABASES = New Global.System.Data.DataColumn("SUMABASES", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUMABASES)
            Me.columnCIC = New Global.System.Data.DataColumn("CIC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIC)
            Me.columnALUMINIO = New Global.System.Data.DataColumn("ALUMINIO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALUMINIO)
            Me.columnSATURA = New Global.System.Data.DataColumn("SATURA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSATURA)
            Me.columnCICE = New Global.System.Data.DataColumn("CICE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCICE)
            Me.columnZINC = New Global.System.Data.DataColumn("ZINC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZINC)
            Me.columnMANGANESO = New Global.System.Data.DataColumn("MANGANESO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMANGANESO)
            Me.columnFIERRO = New Global.System.Data.DataColumn("FIERRO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIERRO)
            Me.columnCOBRE = New Global.System.Data.DataColumn("COBRE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOBRE)
            Me.columnBORO = New Global.System.Data.DataColumn("BORO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBORO)
            Me.columnARCILLA = New Global.System.Data.DataColumn("ARCILLA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARCILLA)
            Me.columnLIMO = New Global.System.Data.DataColumn("LIMO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIMO)
            Me.columnARENA = New Global.System.Data.DataColumn("ARENA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnARENA)
            Me.columnTEXTURA = New Global.System.Data.DataColumn("TEXTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTURA)
            Me.columnDENSIDAD = New Global.System.Data.DataColumn("DENSIDAD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDENSIDAD)
            Me.columnHUMEDAD03 = New Global.System.Data.DataColumn("HUMEDAD03", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHUMEDAD03)
            Me.columnHUMEDAD15 = New Global.System.Data.DataColumn("HUMEDAD15", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHUMEDAD15)
            Me.columnHUMEDAD = New Global.System.Data.DataColumn("HUMEDAD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHUMEDAD)
            Me.columnPIEDRAS = New Global.System.Data.DataColumn("PIEDRAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPIEDRAS)
            Me.columnIEL1 = New Global.System.Data.DataColumn("IEL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEL1)
            Me.columnIUN1 = New Global.System.Data.DataColumn("IUN1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIUN1)
            Me.columnICO1 = New Global.System.Data.DataColumn("ICO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICO1)
            Me.columnICA1 = New Global.System.Data.DataColumn("ICA1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICA1)
            Me.columnIEL2 = New Global.System.Data.DataColumn("IEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEL2)
            Me.columnIUN2 = New Global.System.Data.DataColumn("IUN2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIUN2)
            Me.columnICO2 = New Global.System.Data.DataColumn("ICO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICO2)
            Me.columnICA2 = New Global.System.Data.DataColumn("ICA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICA2)
            Me.columnIEL3 = New Global.System.Data.DataColumn("IEL3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEL3)
            Me.columnIUN3 = New Global.System.Data.DataColumn("IUN3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIUN3)
            Me.columnICO3 = New Global.System.Data.DataColumn("ICO3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICO3)
            Me.columnICA3 = New Global.System.Data.DataColumn("ICA3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICA3)
            Me.columnIEL4 = New Global.System.Data.DataColumn("IEL4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEL4)
            Me.columnIUN4 = New Global.System.Data.DataColumn("IUN4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIUN4)
            Me.columnICO4 = New Global.System.Data.DataColumn("ICO4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICO4)
            Me.columnICA4 = New Global.System.Data.DataColumn("ICA4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICA4)
            Me.columnIEL5 = New Global.System.Data.DataColumn("IEL5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEL5)
            Me.columnIUN5 = New Global.System.Data.DataColumn("IUN5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIUN5)
            Me.columnICO5 = New Global.System.Data.DataColumn("ICO5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICO5)
            Me.columnICA5 = New Global.System.Data.DataColumn("ICA5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICA5)
            Me.columnIEL6 = New Global.System.Data.DataColumn("IEL6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEL6)
            Me.columnIUN6 = New Global.System.Data.DataColumn("IUN6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIUN6)
            Me.columnICO6 = New Global.System.Data.DataColumn("ICO6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICO6)
            Me.columnICA6 = New Global.System.Data.DataColumn("ICA6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICA6)
            Me.columnIOB1 = New Global.System.Data.DataColumn("IOB1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOB1)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMSUERow() As MSUERow
            Return CType(Me.NewRow,MSUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MSUERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MSUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MSUERowChangedEvent) Is Nothing) Then
                RaiseEvent MSUERowChanged(Me, New MSUERowChangeEvent(CType(e.Row,MSUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MSUERowChangingEvent) Is Nothing) Then
                RaiseEvent MSUERowChanging(Me, New MSUERowChangeEvent(CType(e.Row,MSUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MSUERowDeletedEvent) Is Nothing) Then
                RaiseEvent MSUERowDeleted(Me, New MSUERowChangeEvent(CType(e.Row,MSUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MSUERowDeletingEvent) Is Nothing) Then
                RaiseEvent MSUERowDeleting(Me, New MSUERowChangeEvent(CType(e.Row,MSUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMSUERow(ByVal row As MSUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MSUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS_ELEMENTOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_PRIORIDAD As Global.System.Data.DataColumn
        
        Private columnTITULO_FILA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS_ELEMENTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_PRIORIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_PRIORIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TITULO_FILAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTITULO_FILA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS_ELEMENTOSRow
            Get
                Return CType(Me.Rows(index),ANALISIS_ELEMENTOSRow)
            End Get
        End Property
        
        Public Event ANALISIS_ELEMENTOSRowChanging As ANALISIS_ELEMENTOSRowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOSRowChanged As ANALISIS_ELEMENTOSRowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOSRowDeleting As ANALISIS_ELEMENTOSRowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOSRowDeleted As ANALISIS_ELEMENTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS_ELEMENTOSRow(ByVal row As ANALISIS_ELEMENTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS_ELEMENTOSRow(ByVal TMU_CODIGO As Integer, ByVal ANA_CODIGO As Double, ByVal ELE_CODIGO As String, ByVal ELE_PRIORIDAD As Integer, ByVal TITULO_FILA As String) As ANALISIS_ELEMENTOSRow
            Dim rowANALISIS_ELEMENTOSRow As ANALISIS_ELEMENTOSRow = CType(Me.NewRow,ANALISIS_ELEMENTOSRow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, ANA_CODIGO, ELE_CODIGO, ELE_PRIORIDAD, TITULO_FILA}
            rowANALISIS_ELEMENTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS_ELEMENTOSRow)
            Return rowANALISIS_ELEMENTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTMU_CODIGOANA_CODIGOELE_CODIGO(ByVal TMU_CODIGO As Integer, ByVal ANA_CODIGO As Double, ByVal ELE_CODIGO As String) As ANALISIS_ELEMENTOSRow
            Return CType(Me.Rows.Find(New Object() {TMU_CODIGO, ANA_CODIGO, ELE_CODIGO}),ANALISIS_ELEMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS_ELEMENTOSDataTable = CType(MyBase.Clone,ANALISIS_ELEMENTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS_ELEMENTOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnELE_PRIORIDAD = MyBase.Columns("ELE_PRIORIDAD")
            Me.columnTITULO_FILA = MyBase.Columns("TITULO_FILA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnELE_PRIORIDAD = New Global.System.Data.DataColumn("ELE_PRIORIDAD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_PRIORIDAD)
            Me.columnTITULO_FILA = New Global.System.Data.DataColumn("TITULO_FILA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTITULO_FILA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey3", New Global.System.Data.DataColumn() {Me.columnTMU_CODIGO, Me.columnANA_CODIGO, Me.columnELE_CODIGO}, true))
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS_ELEMENTOSRow() As ANALISIS_ELEMENTOSRow
            Return CType(Me.NewRow,ANALISIS_ELEMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS_ELEMENTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS_ELEMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS_ELEMENTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOSRowChanged(Me, New ANALISIS_ELEMENTOSRowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS_ELEMENTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOSRowChanging(Me, New ANALISIS_ELEMENTOSRowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS_ELEMENTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOSRowDeleted(Me, New ANALISIS_ELEMENTOSRowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS_ELEMENTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOSRowDeleting(Me, New ANALISIS_ELEMENTOSRowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS_ELEMENTOSRow(ByVal row As ANALISIS_ELEMENTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS_ELEMENTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NLAB_COLUMNASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnCOLUMNAD_ENT As Global.System.Data.DataColumn
        
        Private columnCOLUMNAH_ENT As Global.System.Data.DataColumn
        
        Private columnCOLUMNA_COMA As Global.System.Data.DataColumn
        
        Private columnCOLUMNAD_DEC As Global.System.Data.DataColumn
        
        Private columnCOLUMNAH_DEC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NLAB_COLUMNAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAD_ENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAD_ENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAH_ENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAH_ENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNA_COMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNA_COMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAD_DECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAD_DEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAH_DECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAH_DEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NLAB_COLUMNASRow
            Get
                Return CType(Me.Rows(index),NLAB_COLUMNASRow)
            End Get
        End Property
        
        Public Event NLAB_COLUMNASRowChanging As NLAB_COLUMNASRowChangeEventHandler
        
        Public Event NLAB_COLUMNASRowChanged As NLAB_COLUMNASRowChangeEventHandler
        
        Public Event NLAB_COLUMNASRowDeleting As NLAB_COLUMNASRowChangeEventHandler
        
        Public Event NLAB_COLUMNASRowDeleted As NLAB_COLUMNASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNLAB_COLUMNASRow(ByVal row As NLAB_COLUMNASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNLAB_COLUMNASRow(ByVal OT_NLAB As Integer, ByVal COLUMNAD_ENT As String, ByVal COLUMNAH_ENT As String, ByVal COLUMNA_COMA As String, ByVal COLUMNAD_DEC As String, ByVal COLUMNAH_DEC As String) As NLAB_COLUMNASRow
            Dim rowNLAB_COLUMNASRow As NLAB_COLUMNASRow = CType(Me.NewRow,NLAB_COLUMNASRow)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB, COLUMNAD_ENT, COLUMNAH_ENT, COLUMNA_COMA, COLUMNAD_DEC, COLUMNAH_DEC}
            rowNLAB_COLUMNASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNLAB_COLUMNASRow)
            Return rowNLAB_COLUMNASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NLAB_COLUMNASDataTable = CType(MyBase.Clone,NLAB_COLUMNASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NLAB_COLUMNASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnCOLUMNAD_ENT = MyBase.Columns("COLUMNAD_ENT")
            Me.columnCOLUMNAH_ENT = MyBase.Columns("COLUMNAH_ENT")
            Me.columnCOLUMNA_COMA = MyBase.Columns("COLUMNA_COMA")
            Me.columnCOLUMNAD_DEC = MyBase.Columns("COLUMNAD_DEC")
            Me.columnCOLUMNAH_DEC = MyBase.Columns("COLUMNAH_DEC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnCOLUMNAD_ENT = New Global.System.Data.DataColumn("COLUMNAD_ENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAD_ENT)
            Me.columnCOLUMNAH_ENT = New Global.System.Data.DataColumn("COLUMNAH_ENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAH_ENT)
            Me.columnCOLUMNA_COMA = New Global.System.Data.DataColumn("COLUMNA_COMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNA_COMA)
            Me.columnCOLUMNAD_DEC = New Global.System.Data.DataColumn("COLUMNAD_DEC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAD_DEC)
            Me.columnCOLUMNAH_DEC = New Global.System.Data.DataColumn("COLUMNAH_DEC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAH_DEC)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNLAB_COLUMNASRow() As NLAB_COLUMNASRow
            Return CType(Me.NewRow,NLAB_COLUMNASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NLAB_COLUMNASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NLAB_COLUMNASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NLAB_COLUMNASRowChangedEvent) Is Nothing) Then
                RaiseEvent NLAB_COLUMNASRowChanged(Me, New NLAB_COLUMNASRowChangeEvent(CType(e.Row,NLAB_COLUMNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NLAB_COLUMNASRowChangingEvent) Is Nothing) Then
                RaiseEvent NLAB_COLUMNASRowChanging(Me, New NLAB_COLUMNASRowChangeEvent(CType(e.Row,NLAB_COLUMNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NLAB_COLUMNASRowDeletedEvent) Is Nothing) Then
                RaiseEvent NLAB_COLUMNASRowDeleted(Me, New NLAB_COLUMNASRowChangeEvent(CType(e.Row,NLAB_COLUMNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NLAB_COLUMNASRowDeletingEvent) Is Nothing) Then
                RaiseEvent NLAB_COLUMNASRowDeleting(Me, New NLAB_COLUMNASRowChangeEvent(CType(e.Row,NLAB_COLUMNASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNLAB_COLUMNASRow(ByVal row As NLAB_COLUMNASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NLAB_COLUMNASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS_ELEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS_ELE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS_ELERow
            Get
                Return CType(Me.Rows(index),ANALISIS_ELERow)
            End Get
        End Property
        
        Public Event ANALISIS_ELERowChanging As ANALISIS_ELERowChangeEventHandler
        
        Public Event ANALISIS_ELERowChanged As ANALISIS_ELERowChangeEventHandler
        
        Public Event ANALISIS_ELERowDeleting As ANALISIS_ELERowChangeEventHandler
        
        Public Event ANALISIS_ELERowDeleted As ANALISIS_ELERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS_ELERow(ByVal row As ANALISIS_ELERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS_ELERow(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal TIPO_COD As String) As ANALISIS_ELERow
            Dim rowANALISIS_ELERow As ANALISIS_ELERow = CType(Me.NewRow,ANALISIS_ELERow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, TIPO_COD}
            rowANALISIS_ELERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS_ELERow)
            Return rowANALISIS_ELERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As ANALISIS_ELERow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),ANALISIS_ELERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS_ELEDataTable = CType(MyBase.Clone,ANALISIS_ELEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS_ELEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey4", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS_ELERow() As ANALISIS_ELERow
            Return CType(Me.NewRow,ANALISIS_ELERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS_ELERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS_ELERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS_ELERowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELERowChanged(Me, New ANALISIS_ELERowChangeEvent(CType(e.Row,ANALISIS_ELERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS_ELERowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELERowChanging(Me, New ANALISIS_ELERowChangeEvent(CType(e.Row,ANALISIS_ELERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS_ELERowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELERowDeleted(Me, New ANALISIS_ELERowChangeEvent(CType(e.Row,ANALISIS_ELERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS_ELERowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELERowDeleting(Me, New ANALISIS_ELERowChangeEvent(CType(e.Row,ANALISIS_ELERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS_ELERow(ByVal row As ANALISIS_ELERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS_ELEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FIRMA_NOMBREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FIRMA_NOMBRE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FIRMA_NOMBRERow
            Get
                Return CType(Me.Rows(index),FIRMA_NOMBRERow)
            End Get
        End Property
        
        Public Event FIRMA_NOMBRERowChanging As FIRMA_NOMBRERowChangeEventHandler
        
        Public Event FIRMA_NOMBRERowChanged As FIRMA_NOMBRERowChangeEventHandler
        
        Public Event FIRMA_NOMBRERowDeleting As FIRMA_NOMBRERowChangeEventHandler
        
        Public Event FIRMA_NOMBRERowDeleted As FIRMA_NOMBRERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFIRMA_NOMBRERow(ByVal row As FIRMA_NOMBRERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFIRMA_NOMBRERow(ByVal NOMBRE As String) As FIRMA_NOMBRERow
            Dim rowFIRMA_NOMBRERow As FIRMA_NOMBRERow = CType(Me.NewRow,FIRMA_NOMBRERow)
            Dim columnValuesArray() As Object = New Object() {NOMBRE}
            rowFIRMA_NOMBRERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFIRMA_NOMBRERow)
            Return rowFIRMA_NOMBRERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNOMBRE(ByVal NOMBRE As String) As FIRMA_NOMBRERow
            Return CType(Me.Rows.Find(New Object() {NOMBRE}),FIRMA_NOMBRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FIRMA_NOMBREDataTable = CType(MyBase.Clone,FIRMA_NOMBREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FIRMA_NOMBREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey6", New Global.System.Data.DataColumn() {Me.columnNOMBRE}, true))
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFIRMA_NOMBRERow() As FIRMA_NOMBRERow
            Return CType(Me.NewRow,FIRMA_NOMBRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FIRMA_NOMBRERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FIRMA_NOMBRERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FIRMA_NOMBRERowChangedEvent) Is Nothing) Then
                RaiseEvent FIRMA_NOMBRERowChanged(Me, New FIRMA_NOMBRERowChangeEvent(CType(e.Row,FIRMA_NOMBRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FIRMA_NOMBRERowChangingEvent) Is Nothing) Then
                RaiseEvent FIRMA_NOMBRERowChanging(Me, New FIRMA_NOMBRERowChangeEvent(CType(e.Row,FIRMA_NOMBRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FIRMA_NOMBRERowDeletedEvent) Is Nothing) Then
                RaiseEvent FIRMA_NOMBRERowDeleted(Me, New FIRMA_NOMBRERowChangeEvent(CType(e.Row,FIRMA_NOMBRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FIRMA_NOMBRERowDeletingEvent) Is Nothing) Then
                RaiseEvent FIRMA_NOMBRERowDeleting(Me, New FIRMA_NOMBRERowChangeEvent(CType(e.Row,FIRMA_NOMBRERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFIRMA_NOMBRERow(ByVal row As FIRMA_NOMBRERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FIRMA_NOMBREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FIRMA_CARGODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCARGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FIRMA_CARGO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FIRMA_CARGORow
            Get
                Return CType(Me.Rows(index),FIRMA_CARGORow)
            End Get
        End Property
        
        Public Event FIRMA_CARGORowChanging As FIRMA_CARGORowChangeEventHandler
        
        Public Event FIRMA_CARGORowChanged As FIRMA_CARGORowChangeEventHandler
        
        Public Event FIRMA_CARGORowDeleting As FIRMA_CARGORowChangeEventHandler
        
        Public Event FIRMA_CARGORowDeleted As FIRMA_CARGORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFIRMA_CARGORow(ByVal row As FIRMA_CARGORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFIRMA_CARGORow(ByVal CARGO As String) As FIRMA_CARGORow
            Dim rowFIRMA_CARGORow As FIRMA_CARGORow = CType(Me.NewRow,FIRMA_CARGORow)
            Dim columnValuesArray() As Object = New Object() {CARGO}
            rowFIRMA_CARGORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFIRMA_CARGORow)
            Return rowFIRMA_CARGORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCARGO(ByVal CARGO As String) As FIRMA_CARGORow
            Return CType(Me.Rows.Find(New Object() {CARGO}),FIRMA_CARGORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FIRMA_CARGODataTable = CType(MyBase.Clone,FIRMA_CARGODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FIRMA_CARGODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCARGO = MyBase.Columns("CARGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCARGO = New Global.System.Data.DataColumn("CARGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey5", New Global.System.Data.DataColumn() {Me.columnCARGO}, true))
            Me.columnCARGO.AllowDBNull = false
            Me.columnCARGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFIRMA_CARGORow() As FIRMA_CARGORow
            Return CType(Me.NewRow,FIRMA_CARGORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FIRMA_CARGORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FIRMA_CARGORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FIRMA_CARGORowChangedEvent) Is Nothing) Then
                RaiseEvent FIRMA_CARGORowChanged(Me, New FIRMA_CARGORowChangeEvent(CType(e.Row,FIRMA_CARGORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FIRMA_CARGORowChangingEvent) Is Nothing) Then
                RaiseEvent FIRMA_CARGORowChanging(Me, New FIRMA_CARGORowChangeEvent(CType(e.Row,FIRMA_CARGORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FIRMA_CARGORowDeletedEvent) Is Nothing) Then
                RaiseEvent FIRMA_CARGORowDeleted(Me, New FIRMA_CARGORowChangeEvent(CType(e.Row,FIRMA_CARGORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FIRMA_CARGORowDeletingEvent) Is Nothing) Then
                RaiseEvent FIRMA_CARGORowDeleting(Me, New FIRMA_CARGORowChangeEvent(CType(e.Row,FIRMA_CARGORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFIRMA_CARGORow(ByVal row As FIRMA_CARGORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FIRMA_CARGODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RANGO_FERTILIDADDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnLINEA As Global.System.Data.DataColumn
        
        Private columnRANGO_DESDE As Global.System.Data.DataColumn
        
        Private columnRANGO_HASTA As Global.System.Data.DataColumn
        
        Private columnCATEGORIA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RANGO_FERTILIDAD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LINEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATEGORIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATEGORIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RANGO_FERTILIDADRow
            Get
                Return CType(Me.Rows(index),RANGO_FERTILIDADRow)
            End Get
        End Property
        
        Public Event RANGO_FERTILIDADRowChanging As RANGO_FERTILIDADRowChangeEventHandler
        
        Public Event RANGO_FERTILIDADRowChanged As RANGO_FERTILIDADRowChangeEventHandler
        
        Public Event RANGO_FERTILIDADRowDeleting As RANGO_FERTILIDADRowChangeEventHandler
        
        Public Event RANGO_FERTILIDADRowDeleted As RANGO_FERTILIDADRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRANGO_FERTILIDADRow(ByVal row As RANGO_FERTILIDADRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRANGO_FERTILIDADRow(ByVal TMU_CODIGO As Integer, ByVal ELE_CODIGO As String, ByVal LINEA As Integer, ByVal RANGO_DESDE As Double, ByVal RANGO_HASTA As Double, ByVal CATEGORIA As String) As RANGO_FERTILIDADRow
            Dim rowRANGO_FERTILIDADRow As RANGO_FERTILIDADRow = CType(Me.NewRow,RANGO_FERTILIDADRow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, ELE_CODIGO, LINEA, RANGO_DESDE, RANGO_HASTA, CATEGORIA}
            rowRANGO_FERTILIDADRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRANGO_FERTILIDADRow)
            Return rowRANGO_FERTILIDADRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTMU_CODIGOELE_CODIGOLINEA(ByVal TMU_CODIGO As Integer, ByVal ELE_CODIGO As String, ByVal LINEA As Integer) As RANGO_FERTILIDADRow
            Return CType(Me.Rows.Find(New Object() {TMU_CODIGO, ELE_CODIGO, LINEA}),RANGO_FERTILIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RANGO_FERTILIDADDataTable = CType(MyBase.Clone,RANGO_FERTILIDADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RANGO_FERTILIDADDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnLINEA = MyBase.Columns("LINEA")
            Me.columnRANGO_DESDE = MyBase.Columns("RANGO_DESDE")
            Me.columnRANGO_HASTA = MyBase.Columns("RANGO_HASTA")
            Me.columnCATEGORIA = MyBase.Columns("CATEGORIA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnLINEA = New Global.System.Data.DataColumn("LINEA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINEA)
            Me.columnRANGO_DESDE = New Global.System.Data.DataColumn("RANGO_DESDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_DESDE)
            Me.columnRANGO_HASTA = New Global.System.Data.DataColumn("RANGO_HASTA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_HASTA)
            Me.columnCATEGORIA = New Global.System.Data.DataColumn("CATEGORIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATEGORIA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey9", New Global.System.Data.DataColumn() {Me.columnTMU_CODIGO, Me.columnELE_CODIGO, Me.columnLINEA}, true))
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
            Me.columnLINEA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRANGO_FERTILIDADRow() As RANGO_FERTILIDADRow
            Return CType(Me.NewRow,RANGO_FERTILIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RANGO_FERTILIDADRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RANGO_FERTILIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RANGO_FERTILIDADRowChangedEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTILIDADRowChanged(Me, New RANGO_FERTILIDADRowChangeEvent(CType(e.Row,RANGO_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RANGO_FERTILIDADRowChangingEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTILIDADRowChanging(Me, New RANGO_FERTILIDADRowChangeEvent(CType(e.Row,RANGO_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RANGO_FERTILIDADRowDeletedEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTILIDADRowDeleted(Me, New RANGO_FERTILIDADRowChangeEvent(CType(e.Row,RANGO_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RANGO_FERTILIDADRowDeletingEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTILIDADRowDeleting(Me, New RANGO_FERTILIDADRowChangeEvent(CType(e.Row,RANGO_FERTILIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRANGO_FERTILIDADRow(ByVal row As RANGO_FERTILIDADRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RANGO_FERTILIDADDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RANGO_FERTORGDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnRANGO_DESDE As Global.System.Data.DataColumn
        
        Private columnRANGO_HASTA As Global.System.Data.DataColumn
        
        Private columnRANGO As Global.System.Data.DataColumn
        
        Private columnMETODO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RANGO_FERTORG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGO_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RANGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property METODOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMETODO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RANGO_FERTORGRow
            Get
                Return CType(Me.Rows(index),RANGO_FERTORGRow)
            End Get
        End Property
        
        Public Event RANGO_FERTORGRowChanging As RANGO_FERTORGRowChangeEventHandler
        
        Public Event RANGO_FERTORGRowChanged As RANGO_FERTORGRowChangeEventHandler
        
        Public Event RANGO_FERTORGRowDeleting As RANGO_FERTORGRowChangeEventHandler
        
        Public Event RANGO_FERTORGRowDeleted As RANGO_FERTORGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRANGO_FERTORGRow(ByVal row As RANGO_FERTORGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRANGO_FERTORGRow(ByVal TMU_CODIGO As Integer, ByVal ELE_CODIGO As String, ByVal RANGO_DESDE As String, ByVal RANGO_HASTA As String, ByVal RANGO As String, ByVal METODO As String) As RANGO_FERTORGRow
            Dim rowRANGO_FERTORGRow As RANGO_FERTORGRow = CType(Me.NewRow,RANGO_FERTORGRow)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, ELE_CODIGO, RANGO_DESDE, RANGO_HASTA, RANGO, METODO}
            rowRANGO_FERTORGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRANGO_FERTORGRow)
            Return rowRANGO_FERTORGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTMU_CODIGOELE_CODIGO(ByVal TMU_CODIGO As Integer, ByVal ELE_CODIGO As String) As RANGO_FERTORGRow
            Return CType(Me.Rows.Find(New Object() {TMU_CODIGO, ELE_CODIGO}),RANGO_FERTORGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RANGO_FERTORGDataTable = CType(MyBase.Clone,RANGO_FERTORGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RANGO_FERTORGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnRANGO_DESDE = MyBase.Columns("RANGO_DESDE")
            Me.columnRANGO_HASTA = MyBase.Columns("RANGO_HASTA")
            Me.columnRANGO = MyBase.Columns("RANGO")
            Me.columnMETODO = MyBase.Columns("METODO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnRANGO_DESDE = New Global.System.Data.DataColumn("RANGO_DESDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_DESDE)
            Me.columnRANGO_HASTA = New Global.System.Data.DataColumn("RANGO_HASTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO_HASTA)
            Me.columnRANGO = New Global.System.Data.DataColumn("RANGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGO)
            Me.columnMETODO = New Global.System.Data.DataColumn("METODO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMETODO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey11", New Global.System.Data.DataColumn() {Me.columnTMU_CODIGO, Me.columnELE_CODIGO}, true))
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRANGO_FERTORGRow() As RANGO_FERTORGRow
            Return CType(Me.NewRow,RANGO_FERTORGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RANGO_FERTORGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RANGO_FERTORGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RANGO_FERTORGRowChangedEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTORGRowChanged(Me, New RANGO_FERTORGRowChangeEvent(CType(e.Row,RANGO_FERTORGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RANGO_FERTORGRowChangingEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTORGRowChanging(Me, New RANGO_FERTORGRowChangeEvent(CType(e.Row,RANGO_FERTORGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RANGO_FERTORGRowDeletedEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTORGRowDeleted(Me, New RANGO_FERTORGRowChangeEvent(CType(e.Row,RANGO_FERTORGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RANGO_FERTORGRowDeletingEvent) Is Nothing) Then
                RaiseEvent RANGO_FERTORGRowDeleting(Me, New RANGO_FERTORGRowChangeEvent(CType(e.Row,RANGO_FERTORGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRANGO_FERTORGRow(ByVal row As RANGO_FERTORGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RANGO_FERTORGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COLUMNAS_SALINIDADDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnCOLUMNADC As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHC As Global.System.Data.DataColumn
        
        Private columnCOLUMNADR As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHR As Global.System.Data.DataColumn
        
        Private columnCOLUMNADS As Global.System.Data.DataColumn
        
        Private columnCOLUMNAHS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COLUMNAS_SALINIDAD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNADSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNADS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLUMNAHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLUMNAHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COLUMNAS_SALINIDADRow
            Get
                Return CType(Me.Rows(index),COLUMNAS_SALINIDADRow)
            End Get
        End Property
        
        Public Event COLUMNAS_SALINIDADRowChanging As COLUMNAS_SALINIDADRowChangeEventHandler
        
        Public Event COLUMNAS_SALINIDADRowChanged As COLUMNAS_SALINIDADRowChangeEventHandler
        
        Public Event COLUMNAS_SALINIDADRowDeleting As COLUMNAS_SALINIDADRowChangeEventHandler
        
        Public Event COLUMNAS_SALINIDADRowDeleted As COLUMNAS_SALINIDADRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOLUMNAS_SALINIDADRow(ByVal row As COLUMNAS_SALINIDADRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOLUMNAS_SALINIDADRow(ByVal OT_NLAB As String, ByVal COLUMNADC As String, ByVal COLUMNAHC As String, ByVal COLUMNADR As String, ByVal COLUMNAHR As String, ByVal COLUMNADS As String, ByVal COLUMNAHS As String) As COLUMNAS_SALINIDADRow
            Dim rowCOLUMNAS_SALINIDADRow As COLUMNAS_SALINIDADRow = CType(Me.NewRow,COLUMNAS_SALINIDADRow)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB, COLUMNADC, COLUMNAHC, COLUMNADR, COLUMNAHR, COLUMNADS, COLUMNAHS}
            rowCOLUMNAS_SALINIDADRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOLUMNAS_SALINIDADRow)
            Return rowCOLUMNAS_SALINIDADRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NLAB(ByVal OT_NLAB As String) As COLUMNAS_SALINIDADRow
            Return CType(Me.Rows.Find(New Object() {OT_NLAB}),COLUMNAS_SALINIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COLUMNAS_SALINIDADDataTable = CType(MyBase.Clone,COLUMNAS_SALINIDADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COLUMNAS_SALINIDADDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnCOLUMNADC = MyBase.Columns("COLUMNADC")
            Me.columnCOLUMNAHC = MyBase.Columns("COLUMNAHC")
            Me.columnCOLUMNADR = MyBase.Columns("COLUMNADR")
            Me.columnCOLUMNAHR = MyBase.Columns("COLUMNAHR")
            Me.columnCOLUMNADS = MyBase.Columns("COLUMNADS")
            Me.columnCOLUMNAHS = MyBase.Columns("COLUMNAHS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnCOLUMNADC = New Global.System.Data.DataColumn("COLUMNADC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADC)
            Me.columnCOLUMNAHC = New Global.System.Data.DataColumn("COLUMNAHC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHC)
            Me.columnCOLUMNADR = New Global.System.Data.DataColumn("COLUMNADR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADR)
            Me.columnCOLUMNAHR = New Global.System.Data.DataColumn("COLUMNAHR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHR)
            Me.columnCOLUMNADS = New Global.System.Data.DataColumn("COLUMNADS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNADS)
            Me.columnCOLUMNAHS = New Global.System.Data.DataColumn("COLUMNAHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLUMNAHS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_ResultadosKey12", New Global.System.Data.DataColumn() {Me.columnOT_NLAB}, true))
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnOT_NLAB.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOLUMNAS_SALINIDADRow() As COLUMNAS_SALINIDADRow
            Return CType(Me.NewRow,COLUMNAS_SALINIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COLUMNAS_SALINIDADRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COLUMNAS_SALINIDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COLUMNAS_SALINIDADRowChangedEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_SALINIDADRowChanged(Me, New COLUMNAS_SALINIDADRowChangeEvent(CType(e.Row,COLUMNAS_SALINIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COLUMNAS_SALINIDADRowChangingEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_SALINIDADRowChanging(Me, New COLUMNAS_SALINIDADRowChangeEvent(CType(e.Row,COLUMNAS_SALINIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COLUMNAS_SALINIDADRowDeletedEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_SALINIDADRowDeleted(Me, New COLUMNAS_SALINIDADRowChangeEvent(CType(e.Row,COLUMNAS_SALINIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COLUMNAS_SALINIDADRowDeletingEvent) Is Nothing) Then
                RaiseEvent COLUMNAS_SALINIDADRowDeleting(Me, New COLUMNAS_SALINIDADRowChangeEvent(CType(e.Row,COLUMNAS_SALINIDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOLUMNAS_SALINIDADRow(ByVal row As COLUMNAS_SALINIDADRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Resultados = New Cjto_Resultados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COLUMNAS_SALINIDADDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMPXHOJA1Row
        Inherits Global.System.Data.DataRow
        
        Private tableIMPXHOJA1 As IMPXHOJA1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPXHOJA1 = CType(Me.Table,IMPXHOJA1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA1.NLABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB' de la tabla 'IMPXHOJA1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA1.NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA1.COLUMNADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAD' de la tabla 'IMPXHOJA1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA1.COLUMNADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAH() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA1.COLUMNAHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAH' de la tabla 'IMPXHOJA1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA1.COLUMNAHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLABNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA1.NLABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLABNull()
            Me(Me.tableIMPXHOJA1.NLABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA1.COLUMNADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADNull()
            Me(Me.tableIMPXHOJA1.COLUMNADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA1.COLUMNAHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHNull()
            Me(Me.tableIMPXHOJA1.COLUMNAHColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NOTA_RESULTADORow
        Inherits Global.System.Data.DataRow
        
        Private tableNOTA_RESULTADO As NOTA_RESULTADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNOTA_RESULTADO = CType(Me.Table,NOTA_RESULTADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTARES_ID() As String
            Get
                Return CType(Me(Me.tableNOTA_RESULTADO.NOTARES_IDColumn),String)
            End Get
            Set
                Me(Me.tableNOTA_RESULTADO.NOTARES_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTARES_DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_RESULTADO.NOTARES_DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTARES_DESCRIPCION' de la tabla 'NOTA_RESULTADO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_RESULTADO.NOTARES_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTARES_FREC() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_RESULTADO.NOTARES_FRECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTARES_FREC' de la tabla 'NOTA_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_RESULTADO.NOTARES_FRECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTARES_NIVEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_RESULTADO.NOTARES_NIVELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTARES_NIVEL' de la tabla 'NOTA_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_RESULTADO.NOTARES_NIVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTARES_DESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_RESULTADO.NOTARES_DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTARES_DESCRIPCIONNull()
            Me(Me.tableNOTA_RESULTADO.NOTARES_DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTARES_FRECNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_RESULTADO.NOTARES_FRECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTARES_FRECNull()
            Me(Me.tableNOTA_RESULTADO.NOTARES_FRECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTARES_NIVELNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_RESULTADO.NOTARES_NIVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTARES_NIVELNull()
            Me(Me.tableNOTA_RESULTADO.NOTARES_NIVELColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MNEMRow
        Inherits Global.System.Data.DataRow
        
        Private tableMNEM As MNEMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMNEM = CType(Me.Table,MNEMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IORD() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IORDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IORD' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INLA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.INLAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INLA' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.INLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITIP' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IPROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRO' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IPROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IFEIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEI' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IFEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEMP' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IREMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREM' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IREMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICUA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ICUAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICUA' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ICUAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IESP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IESPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IESP' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IESPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IVARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVAR' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IVARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEDA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IEDAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEDA' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IPREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRE' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IPREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ILOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILOC' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ILOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IREGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREG' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IREGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEM() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IFEMColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEM' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IFEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVIG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IVIGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVIG' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IVIGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICU1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ICU1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICU1' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ICU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICU2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ICU2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICU2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ICU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAPH() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IAPHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IAPH' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IAPHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IAPH2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IAPH2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IAPH2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IAPH2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICRI() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ICRIColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICRI' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ICRIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICRI2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ICRI2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICRI2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ICRI2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IHEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IHELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IHEL' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IHELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IHEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IHEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IHEL2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IHEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IHEM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IHEMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IHEM' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IHEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IHEM2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IHEM2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IHEM2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IHEM2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IMELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMEL' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IMELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IMEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMEL2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IMEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPAR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IPARColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPAR' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IPARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPAR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IPAR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPAR2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IPAR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IPRAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRA' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRA2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IPRA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRA2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IPRA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITRI() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITRIColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITRI' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITRIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITRI2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITRI2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITRI2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITRI2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITY1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITY1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITY1' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITY1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITY12() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITY12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITY12' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITY12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITY2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITY2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITY2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITY2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITY22() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITY22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITY22' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITY22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITY3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITY3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITY3' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITY3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITY32() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ITY32Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITY32' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ITY32Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IXI1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IXI1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IXI1' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IXI1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IXI12() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IXI12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IXI12' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IXI12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDI1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IDI1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDI1' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IDI1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDI12() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IDI12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDI12' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IDI12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IXI2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IXI2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IXI2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IXI2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IXI22() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IXI22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IXI22' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IXI22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILON() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ILONColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILON' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ILONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILON2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ILON2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILON2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ILON2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IHET() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IHETColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IHET' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IHETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IHET2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IHET2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IHET2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IHET2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDIT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IDITColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDIT' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDIT2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IDIT2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDIT2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IDIT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISAP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ISAPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ISAP' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ISAPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISAP2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ISAP2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ISAP2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ISAP2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOB1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.IOB1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IOB1' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.IOB1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILI1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ILI1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILI1' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ILI1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILI2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMNEM.ILI2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILI2' de la tabla 'MNEM' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMNEM.ILI2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIORDNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIORDNull()
            Me(Me.tableMNEM.IORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINLANull() As Boolean
            Return Me.IsNull(Me.tableMNEM.INLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINLANull()
            Me(Me.tableMNEM.INLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITIPNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITIPNull()
            Me(Me.tableMNEM.ITIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRONull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IPROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRONull()
            Me(Me.tableMNEM.IPROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEINull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IFEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEINull()
            Me(Me.tableMNEM.IFEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEMPNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEMPNull()
            Me(Me.tableMNEM.IEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREMNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IREMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREMNull()
            Me(Me.tableMNEM.IREMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICUANull() As Boolean
            Return Me.IsNull(Me.tableMNEM.ICUAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICUANull()
            Me(Me.tableMNEM.ICUAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIESPNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IESPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIESPNull()
            Me(Me.tableMNEM.IESPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVARNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IVARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVARNull()
            Me(Me.tableMNEM.IVARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEDANull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEDANull()
            Me(Me.tableMNEM.IEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRENull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IPREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRENull()
            Me(Me.tableMNEM.IPREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILOCNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.ILOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILOCNull()
            Me(Me.tableMNEM.ILOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREGNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IREGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREGNull()
            Me(Me.tableMNEM.IREGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEMNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IFEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEMNull()
            Me(Me.tableMNEM.IFEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVIGNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IVIGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVIGNull()
            Me(Me.tableMNEM.IVIGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICU1Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ICU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICU1Null()
            Me(Me.tableMNEM.ICU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICU2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ICU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICU2Null()
            Me(Me.tableMNEM.ICU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAPHNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IAPHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAPHNull()
            Me(Me.tableMNEM.IAPHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIAPH2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IAPH2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIAPH2Null()
            Me(Me.tableMNEM.IAPH2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICRINull() As Boolean
            Return Me.IsNull(Me.tableMNEM.ICRIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICRINull()
            Me(Me.tableMNEM.ICRIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICRI2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ICRI2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICRI2Null()
            Me(Me.tableMNEM.ICRI2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIHELNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IHELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIHELNull()
            Me(Me.tableMNEM.IHELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIHEL2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IHEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIHEL2Null()
            Me(Me.tableMNEM.IHEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIHEMNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IHEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIHEMNull()
            Me(Me.tableMNEM.IHEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIHEM2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IHEM2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIHEM2Null()
            Me(Me.tableMNEM.IHEM2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMELNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IMELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMELNull()
            Me(Me.tableMNEM.IMELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMEL2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IMEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMEL2Null()
            Me(Me.tableMNEM.IMEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPARNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IPARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPARNull()
            Me(Me.tableMNEM.IPARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPAR2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IPAR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPAR2Null()
            Me(Me.tableMNEM.IPAR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRANull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRANull()
            Me(Me.tableMNEM.IPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRA2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IPRA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRA2Null()
            Me(Me.tableMNEM.IPRA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITRINull() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITRIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITRINull()
            Me(Me.tableMNEM.ITRIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITRI2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITRI2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITRI2Null()
            Me(Me.tableMNEM.ITRI2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITY1Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITY1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITY1Null()
            Me(Me.tableMNEM.ITY1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITY12Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITY12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITY12Null()
            Me(Me.tableMNEM.ITY12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITY2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITY2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITY2Null()
            Me(Me.tableMNEM.ITY2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITY22Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITY22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITY22Null()
            Me(Me.tableMNEM.ITY22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITY3Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITY3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITY3Null()
            Me(Me.tableMNEM.ITY3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITY32Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ITY32Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITY32Null()
            Me(Me.tableMNEM.ITY32Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIXI1Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IXI1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIXI1Null()
            Me(Me.tableMNEM.IXI1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIXI12Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IXI12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIXI12Null()
            Me(Me.tableMNEM.IXI12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDI1Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IDI1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDI1Null()
            Me(Me.tableMNEM.IDI1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDI12Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IDI12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDI12Null()
            Me(Me.tableMNEM.IDI12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIXI2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IXI2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIXI2Null()
            Me(Me.tableMNEM.IXI2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIXI22Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IXI22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIXI22Null()
            Me(Me.tableMNEM.IXI22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILONNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.ILONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILONNull()
            Me(Me.tableMNEM.ILONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILON2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ILON2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILON2Null()
            Me(Me.tableMNEM.ILON2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIHETNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IHETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIHETNull()
            Me(Me.tableMNEM.IHETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIHET2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IHET2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIHET2Null()
            Me(Me.tableMNEM.IHET2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDITNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.IDITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDITNull()
            Me(Me.tableMNEM.IDITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDIT2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IDIT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDIT2Null()
            Me(Me.tableMNEM.IDIT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsISAPNull() As Boolean
            Return Me.IsNull(Me.tableMNEM.ISAPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetISAPNull()
            Me(Me.tableMNEM.ISAPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsISAP2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ISAP2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetISAP2Null()
            Me(Me.tableMNEM.ISAP2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOB1Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.IOB1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOB1Null()
            Me(Me.tableMNEM.IOB1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILI1Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ILI1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILI1Null()
            Me(Me.tableMNEM.ILI1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILI2Null() As Boolean
            Return Me.IsNull(Me.tableMNEM.ILI2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILI2Null()
            Me(Me.tableMNEM.ILI2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RANGO_MUESTRARow
        Inherits Global.System.Data.DataRow
        
        Private tableRANGO_MUESTRA As RANGO_MUESTRADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRANGO_MUESTRA = CType(Me.Table,RANGO_MUESTRADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableRANGO_MUESTRA.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableRANGO_MUESTRA.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableRANGO_MUESTRA.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableRANGO_MUESTRA.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_UNIDAD() As String
            Get
                Return CType(Me(Me.tableRANGO_MUESTRA.ELE_UNIDADColumn),String)
            End Get
            Set
                Me(Me.tableRANGO_MUESTRA.ELE_UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_MUESTRA.RANGO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO1' de la tabla 'RANGO_MUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_MUESTRA.RANGO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_MUESTRA.RANGO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO2' de la tabla 'RANGO_MUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_MUESTRA.RANGO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO3() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_MUESTRA.RANGO3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO3' de la tabla 'RANGO_MUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_MUESTRA.RANGO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO1Null() As Boolean
            Return Me.IsNull(Me.tableRANGO_MUESTRA.RANGO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO1Null()
            Me(Me.tableRANGO_MUESTRA.RANGO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO2Null() As Boolean
            Return Me.IsNull(Me.tableRANGO_MUESTRA.RANGO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO2Null()
            Me(Me.tableRANGO_MUESTRA.RANGO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO3Null() As Boolean
            Return Me.IsNull(Me.tableRANGO_MUESTRA.RANGO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO3Null()
            Me(Me.tableRANGO_MUESTRA.RANGO3Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMPXHOJARow
        Inherits Global.System.Data.DataRow
        
        Private tableIMPXHOJA As IMPXHOJADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPXHOJA = CType(Me.Table,IMPXHOJADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.NLABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_EXT() As String
            Get
                Return CType(Me(Me.tableIMPXHOJA.COD_EXTColumn),String)
            End Get
            Set
                Me(Me.tableIMPXHOJA.COD_EXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESULTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.RESULTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RESULTADO' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.RESULTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_DESDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.RANGO_DESDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_DESDE' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.RANGO_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.COLUMNADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAD' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.COLUMNADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAH() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.COLUMNAHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAH' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.COLUMNAHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_HASTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.RANGO_HASTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_HASTA' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.RANGO_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SIMBOLO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.SIMBOLOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SIMBOLO' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.SIMBOLOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'IMPXHOJA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLABNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.NLABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLABNull()
            Me(Me.tableIMPXHOJA.NLABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESULTADONull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.RESULTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESULTADONull()
            Me(Me.tableIMPXHOJA.RESULTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_DESDENull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.RANGO_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_DESDENull()
            Me(Me.tableIMPXHOJA.RANGO_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.COLUMNADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADNull()
            Me(Me.tableIMPXHOJA.COLUMNADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.COLUMNAHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHNull()
            Me(Me.tableIMPXHOJA.COLUMNAHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_HASTANull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.RANGO_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_HASTANull()
            Me(Me.tableIMPXHOJA.RANGO_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSIMBOLONull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.SIMBOLOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSIMBOLONull()
            Me(Me.tableIMPXHOJA.SIMBOLOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tableIMPXHOJA.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HOMOLOGACION_ESPECIERow
        Inherits Global.System.Data.DataRow
        
        Private tableHOMOLOGACION_ESPECIE As HOMOLOGACION_ESPECIEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHOMOLOGACION_ESPECIE = CType(Me.Table,HOMOLOGACION_ESPECIEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESPECIE_DBF() As String
            Get
                Return CType(Me(Me.tableHOMOLOGACION_ESPECIE.ESPECIE_DBFColumn),String)
            End Get
            Set
                Me(Me.tableHOMOLOGACION_ESPECIE.ESPECIE_DBFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESP_ESPECIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableHOMOLOGACION_ESPECIE.ESP_ESPECIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESP_ESPECIE' de la tabla 'HOMOLOGACION_ESPECIE' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableHOMOLOGACION_ESPECIE.ESP_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESP_ESPECIENull() As Boolean
            Return Me.IsNull(Me.tableHOMOLOGACION_ESPECIE.ESP_ESPECIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESP_ESPECIENull()
            Me(Me.tableHOMOLOGACION_ESPECIE.ESP_ESPECIEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DICCIONARIORow
        Inherits Global.System.Data.DataRow
        
        Private tableDICCIONARIO As DICCIONARIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDICCIONARIO = CType(Me.Table,DICCIONARIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PALABRA() As String
            Get
                Return CType(Me(Me.tableDICCIONARIO.PALABRAColumn),String)
            End Get
            Set
                Me(Me.tableDICCIONARIO.PALABRAColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMPXHOJA2Row
        Inherits Global.System.Data.DataRow
        
        Private tableIMPXHOJA2 As IMPXHOJA2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPXHOJA2 = CType(Me.Table,IMPXHOJA2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA2.NLABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB' de la tabla 'IMPXHOJA2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA2.NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADC() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA2.COLUMNADCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADC' de la tabla 'IMPXHOJA2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA2.COLUMNADCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHC() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA2.COLUMNAHCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHC' de la tabla 'IMPXHOJA2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA2.COLUMNAHCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA2.COLUMNADRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADR' de la tabla 'IMPXHOJA2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA2.COLUMNADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA2.COLUMNAHRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHR' de la tabla 'IMPXHOJA2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA2.COLUMNAHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADS() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA2.COLUMNADSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADS' de la tabla 'IMPXHOJA2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA2.COLUMNADSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHS() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA2.COLUMNAHSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHS' de la tabla 'IMPXHOJA2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA2.COLUMNAHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLABNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA2.NLABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLABNull()
            Me(Me.tableIMPXHOJA2.NLABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADCNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA2.COLUMNADCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADCNull()
            Me(Me.tableIMPXHOJA2.COLUMNADCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHCNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA2.COLUMNAHCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHCNull()
            Me(Me.tableIMPXHOJA2.COLUMNAHCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADRNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA2.COLUMNADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADRNull()
            Me(Me.tableIMPXHOJA2.COLUMNADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHRNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA2.COLUMNAHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHRNull()
            Me(Me.tableIMPXHOJA2.COLUMNAHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADSNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA2.COLUMNADSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADSNull()
            Me(Me.tableIMPXHOJA2.COLUMNADSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHSNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA2.COLUMNAHSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHSNull()
            Me(Me.tableIMPXHOJA2.COLUMNAHSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RANGO_SUELORow
        Inherits Global.System.Data.DataRow
        
        Private tableRANGO_SUELO As RANGO_SUELODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRANGO_SUELO = CType(Me.Table,RANGO_SUELODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableRANGO_SUELO.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableRANGO_SUELO.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableRANGO_SUELO.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableRANGO_SUELO.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_SP() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_SUELO.RANGO_SPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_SP' de la tabla 'RANGO_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_SUELO.RANGO_SPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_PS() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_SUELO.RANGO_PSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_PS' de la tabla 'RANGO_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_SUELO.RANGO_PSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_SPNull() As Boolean
            Return Me.IsNull(Me.tableRANGO_SUELO.RANGO_SPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_SPNull()
            Me(Me.tableRANGO_SUELO.RANGO_SPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_PSNull() As Boolean
            Return Me.IsNull(Me.tableRANGO_SUELO.RANGO_PSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_PSNull()
            Me(Me.tableRANGO_SUELO.RANGO_PSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMPXHOJA_SUELORow
        Inherits Global.System.Data.DataRow
        
        Private tableIMPXHOJA_SUELO As IMPXHOJA_SUELODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPXHOJA_SUELO = CType(Me.Table,IMPXHOJA_SUELODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_SUELO.NLABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB' de la tabla 'IMPXHOJA_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_EXT() As String
            Get
                Return CType(Me(Me.tableIMPXHOJA_SUELO.COD_EXTColumn),String)
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.COD_EXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESULTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_SUELO.RESULTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RESULTADO' de la tabla 'IMPXHOJA_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.RESULTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_SP() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_SUELO.RANGO_SPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_SP' de la tabla 'IMPXHOJA_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.RANGO_SPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_SUELO.COLUMNADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAD' de la tabla 'IMPXHOJA_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.COLUMNADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAH() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_SUELO.COLUMNAHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAH' de la tabla 'IMPXHOJA_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.COLUMNAHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_PS() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_SUELO.RANGO_PSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_PS' de la tabla 'IMPXHOJA_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.RANGO_PSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_SUELO.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'IMPXHOJA_SUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_SUELO.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLABNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_SUELO.NLABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLABNull()
            Me(Me.tableIMPXHOJA_SUELO.NLABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESULTADONull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_SUELO.RESULTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESULTADONull()
            Me(Me.tableIMPXHOJA_SUELO.RESULTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_SPNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_SUELO.RANGO_SPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_SPNull()
            Me(Me.tableIMPXHOJA_SUELO.RANGO_SPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_SUELO.COLUMNADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADNull()
            Me(Me.tableIMPXHOJA_SUELO.COLUMNADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_SUELO.COLUMNAHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHNull()
            Me(Me.tableIMPXHOJA_SUELO.COLUMNAHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_PSNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_SUELO.RANGO_PSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_PSNull()
            Me(Me.tableIMPXHOJA_SUELO.RANGO_PSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_SUELO.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tableIMPXHOJA_SUELO.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FORMATO_RESULTADORow
        Inherits Global.System.Data.DataRow
        
        Private tableFORMATO_RESULTADO As FORMATO_RESULTADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFORMATO_RESULTADO = CType(Me.Table,FORMATO_RESULTADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableFORMATO_RESULTADO.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_REGISTRO() As String
            Get
                Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_REGISTROColumn),String)
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_REGISTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_ELEMENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_ELEMENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_ELEMENTO' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_ELEMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_TITULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_TITULOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_TITULO' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_TITULOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_CEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_CELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_CEL' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_CELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_POS() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_POSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_POS' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_POSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_LET() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_LETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_LET' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_LETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_PXLS() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_PXLSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_PXLS' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_PXLSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_SIMBOLO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_SIMBOLOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_SIMBOLO' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_SIMBOLOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_TITULO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_TITULO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_TITULO2' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_TITULO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_CEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_CEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_CEL2' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_CEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_POS2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_POS2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_POS2' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_POS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_LET2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_LET2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_LET2' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_LET2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_PXLS2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_PXLS2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_PXLS2' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_PXLS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_UNIDAD() As String
            Get
                Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_UNIDADColumn),String)
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_TITULO3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_TITULO3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_TITULO3' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_TITULO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_CEL3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_CEL3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_CEL3' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_CEL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_POS3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_POS3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_POS3' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_POS3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_LET3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_LET3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_LET3' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_LET3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_PXLS3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_PXLS3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_PXLS3' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_PXLS3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_RESULTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_RESULTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_RESULTADO' de la tabla 'FORMATO_RESULTADO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_RESULTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_CEL4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_CEL4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_CEL4' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_CEL4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_POS4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_POS4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_POS4' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_POS4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_LET4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_LET4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_LET4' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_LET4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_ENTERO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_ENTEROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_ENTERO' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_ENTEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_DECIMAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_DECIMALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_DECIMAL' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_DECIMALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_FREC() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_FRECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_FREC' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_FRECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_PXLS4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_PXLS4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_PXLS4' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_PXLS4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_RANGO_DESDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_DESDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_RANGO_DESDE' de la tabla 'FORMATO_RESULTADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_CEL5() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_CEL5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_CEL5' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_CEL5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_POS5() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_POS5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_POS5' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_POS5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_LET5() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_LET5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_LET5' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_LET5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_ENTERO2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_ENTERO2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_ENTERO2' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_ENTERO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_DECIMAL2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_DECIMAL2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_DECIMAL2' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_DECIMAL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_PXLS5() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_PXLS5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_PXLS5' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_PXLS5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_RANGO_SIMBOLO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_SIMBOLOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_RANGO_SIMBOLO' de la tabla 'FORMATO_RESULTADO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_SIMBOLOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_CEL6() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_CEL6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_CEL6' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_CEL6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_POS6() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_POS6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_POS6' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_POS6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_LET6() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_LET6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_LET6' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_LET6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_PXLS6() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_PXLS6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_PXLS6' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_PXLS6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_RANGO_HASTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_HASTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_RANGO_HASTA' de la tabla 'FORMATO_RESULTADO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_CEL7() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_CEL7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_CEL7' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_CEL7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_POS7() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_POS7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_POS7' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_POS7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_LET7() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_LET7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_LET7' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_LET7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_ENTERO3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_ENTERO3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_ENTERO3' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_ENTERO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_DECIMAL3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_DECIMAL3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_DECIMAL3' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_DECIMAL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOR_PXLS7() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.FOR_PXLS7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOR_PXLS7' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.FOR_PXLS7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFORMATO_RESULTADO.ELE_CODIGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ELE_CODIGO' de la tabla 'FORMATO_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFORMATO_RESULTADO.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_ELEMENTONull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_ELEMENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_ELEMENTONull()
            Me(Me.tableFORMATO_RESULTADO.FOR_ELEMENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_TITULONull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_TITULOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_TITULONull()
            Me(Me.tableFORMATO_RESULTADO.FOR_TITULOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_CELNull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_CELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_CELNull()
            Me(Me.tableFORMATO_RESULTADO.FOR_CELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_POSNull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_POSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_POSNull()
            Me(Me.tableFORMATO_RESULTADO.FOR_POSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_LETNull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_LETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_LETNull()
            Me(Me.tableFORMATO_RESULTADO.FOR_LETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_PXLSNull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_PXLSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_PXLSNull()
            Me(Me.tableFORMATO_RESULTADO.FOR_PXLSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_SIMBOLONull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_SIMBOLOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_SIMBOLONull()
            Me(Me.tableFORMATO_RESULTADO.FOR_SIMBOLOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_TITULO2Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_TITULO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_TITULO2Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_TITULO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_CEL2Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_CEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_CEL2Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_CEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_POS2Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_POS2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_POS2Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_POS2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_LET2Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_LET2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_LET2Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_LET2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_PXLS2Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_PXLS2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_PXLS2Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_PXLS2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_TITULO3Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_TITULO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_TITULO3Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_TITULO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_CEL3Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_CEL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_CEL3Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_CEL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_POS3Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_POS3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_POS3Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_POS3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_LET3Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_LET3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_LET3Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_LET3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_PXLS3Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_PXLS3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_PXLS3Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_PXLS3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_RESULTADONull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_RESULTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_RESULTADONull()
            Me(Me.tableFORMATO_RESULTADO.FOR_RESULTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_CEL4Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_CEL4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_CEL4Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_CEL4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_POS4Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_POS4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_POS4Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_POS4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_LET4Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_LET4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_LET4Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_LET4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_ENTERONull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_ENTEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_ENTERONull()
            Me(Me.tableFORMATO_RESULTADO.FOR_ENTEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_DECIMALNull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_DECIMALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_DECIMALNull()
            Me(Me.tableFORMATO_RESULTADO.FOR_DECIMALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_FRECNull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_FRECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_FRECNull()
            Me(Me.tableFORMATO_RESULTADO.FOR_FRECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_PXLS4Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_PXLS4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_PXLS4Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_PXLS4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_RANGO_DESDENull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_RANGO_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_RANGO_DESDENull()
            Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_CEL5Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_CEL5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_CEL5Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_CEL5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_POS5Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_POS5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_POS5Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_POS5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_LET5Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_LET5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_LET5Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_LET5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_ENTERO2Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_ENTERO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_ENTERO2Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_ENTERO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_DECIMAL2Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_DECIMAL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_DECIMAL2Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_DECIMAL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_PXLS5Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_PXLS5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_PXLS5Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_PXLS5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_RANGO_SIMBOLONull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_RANGO_SIMBOLOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_RANGO_SIMBOLONull()
            Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_SIMBOLOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_CEL6Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_CEL6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_CEL6Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_CEL6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_POS6Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_POS6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_POS6Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_POS6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_LET6Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_LET6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_LET6Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_LET6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_PXLS6Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_PXLS6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_PXLS6Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_PXLS6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_RANGO_HASTANull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_RANGO_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_RANGO_HASTANull()
            Me(Me.tableFORMATO_RESULTADO.FOR_RANGO_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_CEL7Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_CEL7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_CEL7Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_CEL7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_POS7Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_POS7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_POS7Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_POS7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_LET7Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_LET7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_LET7Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_LET7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_ENTERO3Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_ENTERO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_ENTERO3Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_ENTERO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_DECIMAL3Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_DECIMAL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_DECIMAL3Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_DECIMAL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOR_PXLS7Null() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.FOR_PXLS7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOR_PXLS7Null()
            Me(Me.tableFORMATO_RESULTADO.FOR_PXLS7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsELE_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableFORMATO_RESULTADO.ELE_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetELE_CODIGONull()
            Me(Me.tableFORMATO_RESULTADO.ELE_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RANGO_DBFRow
        Inherits Global.System.Data.DataRow
        
        Private tableRANGO_DBF As RANGO_DBFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRANGO_DBF = CType(Me.Table,RANGO_DBFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableRANGO_DBF.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableRANGO_DBF.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_ESP() As String
            Get
                Return CType(Me(Me.tableRANGO_DBF.COD_ESPColumn),String)
            End Get
            Set
                Me(Me.tableRANGO_DBF.COD_ESPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_ELE_RANGO() As String
            Get
                Return CType(Me(Me.tableRANGO_DBF.COD_ELE_RANGOColumn),String)
            End Get
            Set
                Me(Me.tableRANGO_DBF.COD_ELE_RANGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_DESDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_DBF.RANGO_DESDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_DESDE' de la tabla 'RANGO_DBF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_DBF.RANGO_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SIMBOLO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_DBF.SIMBOLOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SIMBOLO' de la tabla 'RANGO_DBF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_DBF.SIMBOLOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_HASTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_DBF.RANGO_HASTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_HASTA' de la tabla 'RANGO_DBF' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_DBF.RANGO_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_DESDENull() As Boolean
            Return Me.IsNull(Me.tableRANGO_DBF.RANGO_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_DESDENull()
            Me(Me.tableRANGO_DBF.RANGO_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSIMBOLONull() As Boolean
            Return Me.IsNull(Me.tableRANGO_DBF.SIMBOLOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSIMBOLONull()
            Me(Me.tableRANGO_DBF.SIMBOLOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_HASTANull() As Boolean
            Return Me.IsNull(Me.tableRANGO_DBF.RANGO_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_HASTANull()
            Me(Me.tableRANGO_DBF.RANGO_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NOTA_AUTO_RESULTADOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableNOTA_AUTO_RESULTADOS As NOTA_AUTO_RESULTADOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNOTA_AUTO_RESULTADOS = CType(Me.Table,NOTA_AUTO_RESULTADOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESP_ESPECIE() As String
            Get
                Return CType(Me(Me.tableNOTA_AUTO_RESULTADOS.ESP_ESPECIEColumn),String)
            End Get
            Set
                Me(Me.tableNOTA_AUTO_RESULTADOS.ESP_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_AUTO_RESULTADOS.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION' de la tabla 'NOTA_AUTO_RESULTADOS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_AUTO_RESULTADOS.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_AUTO_RESULTADOS.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableNOTA_AUTO_RESULTADOS.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMPXHOJA_AGUARow
        Inherits Global.System.Data.DataRow
        
        Private tableIMPXHOJA_AGUA As IMPXHOJA_AGUADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMPXHOJA_AGUA = CType(Me.Table,IMPXHOJA_AGUADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_AGUA.NLABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB' de la tabla 'IMPXHOJA_AGUA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_AGUA.NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_EXT() As String
            Get
                Return CType(Me(Me.tableIMPXHOJA_AGUA.COD_EXTColumn),String)
            End Get
            Set
                Me(Me.tableIMPXHOJA_AGUA.COD_EXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESULTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_AGUA.RESULTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RESULTADO' de la tabla 'IMPXHOJA_AGUA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_AGUA.RESULTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_AGUA.RANGO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO1' de la tabla 'IMPXHOJA_AGUA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_AGUA.RANGO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_AGUA.RANGO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO2' de la tabla 'IMPXHOJA_AGUA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_AGUA.RANGO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO3() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_AGUA.RANGO3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO3' de la tabla 'IMPXHOJA_AGUA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_AGUA.RANGO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMPXHOJA_AGUA.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'IMPXHOJA_AGUA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMPXHOJA_AGUA.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLABNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_AGUA.NLABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLABNull()
            Me(Me.tableIMPXHOJA_AGUA.NLABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESULTADONull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_AGUA.RESULTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESULTADONull()
            Me(Me.tableIMPXHOJA_AGUA.RESULTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO1Null() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_AGUA.RANGO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO1Null()
            Me(Me.tableIMPXHOJA_AGUA.RANGO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO2Null() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_AGUA.RANGO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO2Null()
            Me(Me.tableIMPXHOJA_AGUA.RANGO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO3Null() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_AGUA.RANGO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO3Null()
            Me(Me.tableIMPXHOJA_AGUA.RANGO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tableIMPXHOJA_AGUA.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tableIMPXHOJA_AGUA.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ELEMENTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableELEMENTOS As ELEMENTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableELEMENTOS = CType(Me.Table,ELEMENTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_EXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableELEMENTOS.COD_EXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_EXT' de la tabla 'ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableELEMENTOS.COD_EXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_INT() As String
            Get
                Try 
                    Return CType(Me(Me.tableELEMENTOS.COD_INTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_INT' de la tabla 'ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableELEMENTOS.COD_INTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SIMBOLO() As String
            Get
                Try 
                    Return CType(Me(Me.tableELEMENTOS.SIMBOLOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SIMBOLO' de la tabla 'ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableELEMENTOS.SIMBOLOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableELEMENTOS.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableELEMENTOS.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FILA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableELEMENTOS.FILAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FILA' de la tabla 'ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableELEMENTOS.FILAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHEQUEO() As String
            Get
                Try 
                    Return CType(Me(Me.tableELEMENTOS.CHEQUEOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CHEQUEO' de la tabla 'ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableELEMENTOS.CHEQUEOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableELEMENTOS.ELE_CODIGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ELE_CODIGO' de la tabla 'ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableELEMENTOS.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_EXTNull() As Boolean
            Return Me.IsNull(Me.tableELEMENTOS.COD_EXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_EXTNull()
            Me(Me.tableELEMENTOS.COD_EXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_INTNull() As Boolean
            Return Me.IsNull(Me.tableELEMENTOS.COD_INTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_INTNull()
            Me(Me.tableELEMENTOS.COD_INTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSIMBOLONull() As Boolean
            Return Me.IsNull(Me.tableELEMENTOS.SIMBOLOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSIMBOLONull()
            Me(Me.tableELEMENTOS.SIMBOLOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tableELEMENTOS.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tableELEMENTOS.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFILANull() As Boolean
            Return Me.IsNull(Me.tableELEMENTOS.FILAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFILANull()
            Me(Me.tableELEMENTOS.FILAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHEQUEONull() As Boolean
            Return Me.IsNull(Me.tableELEMENTOS.CHEQUEOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHEQUEONull()
            Me(Me.tableELEMENTOS.CHEQUEOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsELE_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableELEMENTOS.ELE_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetELE_CODIGONull()
            Me(Me.tableELEMENTOS.ELE_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COLUMNAS_FERTILIDADRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOLUMNAS_FERTILIDAD As COLUMNAS_FERTILIDADDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOLUMNAS_FERTILIDAD = CType(Me.Table,COLUMNAS_FERTILIDADDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As String
            Get
                Return CType(Me(Me.tableCOLUMNAS_FERTILIDAD.OT_NLABColumn),String)
            End Get
            Set
                Me(Me.tableCOLUMNAS_FERTILIDAD.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADC' de la tabla 'COLUMNAS_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHC' de la tabla 'COLUMNAS_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADR' de la tabla 'COLUMNAS_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHR' de la tabla 'COLUMNAS_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADS' de la tabla 'COLUMNAS_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHS' de la tabla 'COLUMNAS_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADCNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADCNull()
            Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHCNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHCNull()
            Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADRNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADRNull()
            Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHRNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHRNull()
            Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADSNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADSNull()
            Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNADSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHSNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHSNull()
            Me(Me.tableCOLUMNAS_FERTILIDAD.COLUMNAHSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RANGO_AGUA_CERow
        Inherits Global.System.Data.DataRow
        
        Private tableRANGO_AGUA_CE As RANGO_AGUA_CEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRANGO_AGUA_CE = CType(Me.Table,RANGO_AGUA_CEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINEA_INTER() As Integer
            Get
                Return CType(Me(Me.tableRANGO_AGUA_CE.LINEA_INTERColumn),Integer)
            End Get
            Set
                Me(Me.tableRANGO_AGUA_CE.LINEA_INTERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_DESDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_AGUA_CE.RANGO_DESDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_DESDE' de la tabla 'RANGO_AGUA_CE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_AGUA_CE.RANGO_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_HASTA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_AGUA_CE.RANGO_HASTAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_HASTA' de la tabla 'RANGO_AGUA_CE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_AGUA_CE.RANGO_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_AGUA_CE.NOTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOTA' de la tabla 'RANGO_AGUA_CE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_AGUA_CE.NOTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_DESDENull() As Boolean
            Return Me.IsNull(Me.tableRANGO_AGUA_CE.RANGO_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_DESDENull()
            Me(Me.tableRANGO_AGUA_CE.RANGO_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_HASTANull() As Boolean
            Return Me.IsNull(Me.tableRANGO_AGUA_CE.RANGO_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_HASTANull()
            Me(Me.tableRANGO_AGUA_CE.RANGO_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTANull() As Boolean
            Return Me.IsNull(Me.tableRANGO_AGUA_CE.NOTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTANull()
            Me(Me.tableRANGO_AGUA_CE.NOTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TABLA_DIGRES2Row
        Inherits Global.System.Data.DataRow
        
        Private tableTABLA_DIGRES2 As TABLA_DIGRES2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTABLA_DIGRES2 = CType(Me.Table,TABLA_DIGRES2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableTABLA_DIGRES2.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableTABLA_DIGRES2.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableTABLA_DIGRES2.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableTABLA_DIGRES2.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTABLA_DIGRES2.ELE_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ELE_ESTADO' de la tabla 'TABLA_DIGRES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTABLA_DIGRES2.ELE_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Single
            Get
                Try 
                    Return CType(Me(Me.tableTABLA_DIGRES2.ANA_CODIGOColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_CODIGO' de la tabla 'TABLA_DIGRES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTABLA_DIGRES2.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTABLA_DIGRES2.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'TABLA_DIGRES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTABLA_DIGRES2.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsELE_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableTABLA_DIGRES2.ELE_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetELE_ESTADONull()
            Me(Me.tableTABLA_DIGRES2.ELE_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableTABLA_DIGRES2.ANA_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_CODIGONull()
            Me(Me.tableTABLA_DIGRES2.ANA_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableTABLA_DIGRES2.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableTABLA_DIGRES2.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SUBMUESTRARow
        Inherits Global.System.Data.DataRow
        
        Private tableSUBMUESTRA As SUBMUESTRADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSUBMUESTRA = CType(Me.Table,SUBMUESTRADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableSUBMUESTRA.SUB_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableSUBMUESTRA.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_DESCRIPCION' de la tabla 'SUBMUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'SUBMUESTRA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_DESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_DESCRIPCIONNull()
            Me(Me.tableSUBMUESTRA.SUB_DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableSUBMUESTRA.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableSUBMUESTRA.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MSUERow
        Inherits Global.System.Data.DataRow
        
        Private tableMSUE As MSUEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMSUE = CType(Me.Table,MSUEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IORD() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IORDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IORD' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INLA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.INLAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INLA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.INLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IFEIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEI' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IFEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IPROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IPROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEMP' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IREMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREM' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IREMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICUA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICUAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICUA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICUAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICU1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICU1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICU1' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICU1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICU2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICU2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICU2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICU2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IPREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRE' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IPREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ILOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILOC' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ILOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IREGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREG' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IREGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEM() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IFEMColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEM' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IFEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICAA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICAAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICAA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICAAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IREEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREE' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IREEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICAE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICAEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICAE' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICAEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEX() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ITEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITEX' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ITEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IROS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IROSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IROS' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IROSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRF() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IPRFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRF' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IPRFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IDREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDRE' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IDREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _IN() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE._INColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IN' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE._INColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICT1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICT1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICT1' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IP' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICT2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICT2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICT2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IK() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IKColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IK' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICT3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICT3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICT3' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPH() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IPHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPH' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IPHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICT4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICT4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICT4' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICT4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICE' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICT5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICT5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICT5' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICT5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IMOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICT6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICT6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICT6' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICT6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARBONO_O() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.CARBONO_OColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARBONO_O' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.CARBONO_OColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NITRO_TOT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.NITRO_TOTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NITRO_TOT' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.NITRO_TOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RELACION() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.RELACIONColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RELACION' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.RELACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POTASI_SO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.POTASI_SOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'POTASI_SO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.POTASI_SOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AZUFRE_EX() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.AZUFRE_EXColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AZUFRE_EX' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.AZUFRE_EXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALUMIN_EX() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ALUMIN_EXColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALUMIN_EX' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ALUMIN_EXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CALCIO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.CALCIOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CALCIO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.CALCIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CALCIO2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.CALCIO2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CALCIO2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.CALCIO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAGNESIO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.MAGNESIOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAGNESIO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.MAGNESIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAGNESIO2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.MAGNESIO2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAGNESIO2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.MAGNESIO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SODIO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.SODIOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SODIO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.SODIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SODIO2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.SODIO2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SODIO2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.SODIO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POTASIO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.POTASIOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'POTASIO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.POTASIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POTASIO2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.POTASIO2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'POTASIO2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.POTASIO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUMABASES() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.SUMABASESColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUMABASES' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.SUMABASESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.CICColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIC' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.CICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALUMINIO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ALUMINIOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALUMINIO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ALUMINIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SATURA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.SATURAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SATURA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.SATURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CICE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.CICEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CICE' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.CICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZINC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ZINCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ZINC' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ZINCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MANGANESO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.MANGANESOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MANGANESO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.MANGANESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIERRO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.FIERROColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FIERRO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.FIERROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COBRE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.COBREColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COBRE' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.COBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BORO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.BOROColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BORO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.BOROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARCILLA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ARCILLAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ARCILLA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ARCILLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIMO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.LIMOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LIMO' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.LIMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARENA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ARENAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ARENA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ARENAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTURA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.TEXTURAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEXTURA' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.TEXTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DENSIDAD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.DENSIDADColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DENSIDAD' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.DENSIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HUMEDAD03() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.HUMEDAD03Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HUMEDAD03' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.HUMEDAD03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HUMEDAD15() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.HUMEDAD15Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HUMEDAD15' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.HUMEDAD15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HUMEDAD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.HUMEDADColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HUMEDAD' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.HUMEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PIEDRAS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.PIEDRASColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PIEDRAS' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.PIEDRASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IEL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEL1' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IEL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IUN1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IUN1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IUN1' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IUN1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICO1' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICA1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICA1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICA1' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEL2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IUN2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IUN2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IUN2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IUN2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICO2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICA2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICA2' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEL3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IEL3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEL3' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IEL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IUN3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IUN3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IUN3' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IUN3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICO3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICO3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICO3' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICA3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICA3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICA3' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICA3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEL4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IEL4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEL4' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IEL4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IUN4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IUN4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IUN4' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IUN4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICO4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICO4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICO4' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICO4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICA4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICA4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICA4' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICA4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEL5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IEL5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEL5' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IEL5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IUN5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IUN5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IUN5' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IUN5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICO5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICO5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICO5' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICO5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICA5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICA5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICA5' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICA5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEL6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IEL6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEL6' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IEL6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IUN6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IUN6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IUN6' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IUN6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICO6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICO6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICO6' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICO6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICA6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.ICA6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICA6' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.ICA6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOB1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMSUE.IOB1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IOB1' de la tabla 'MSUE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMSUE.IOB1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIORDNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIORDNull()
            Me(Me.tableMSUE.IORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINLANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.INLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINLANull()
            Me(Me.tableMSUE.INLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEINull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IFEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEINull()
            Me(Me.tableMSUE.IFEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IPROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRONull()
            Me(Me.tableMSUE.IPROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEMPNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEMPNull()
            Me(Me.tableMSUE.IEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREMNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IREMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREMNull()
            Me(Me.tableMSUE.IREMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICUANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICUAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICUANull()
            Me(Me.tableMSUE.ICUAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICU1Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICU1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICU1Null()
            Me(Me.tableMSUE.ICU1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICU2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICU2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICU2Null()
            Me(Me.tableMSUE.ICU2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRENull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IPREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRENull()
            Me(Me.tableMSUE.IPREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILOCNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ILOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILOCNull()
            Me(Me.tableMSUE.ILOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREGNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IREGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREGNull()
            Me(Me.tableMSUE.IREGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEMNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IFEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEMNull()
            Me(Me.tableMSUE.IFEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREANull()
            Me(Me.tableMSUE.IREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICAANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICAAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICAANull()
            Me(Me.tableMSUE.ICAAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREENull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IREEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREENull()
            Me(Me.tableMSUE.IREEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICAENull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICAEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICAENull()
            Me(Me.tableMSUE.ICAEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEXNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ITEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEXNull()
            Me(Me.tableMSUE.ITEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIROSNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IROSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIROSNull()
            Me(Me.tableMSUE.IROSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRFNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IPRFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRFNull()
            Me(Me.tableMSUE.IPRFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDRENull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IDREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDRENull()
            Me(Me.tableMSUE.IDREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_INNull() As Boolean
            Return Me.IsNull(Me.tableMSUE._INColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_INNull()
            Me(Me.tableMSUE._INColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICT1Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICT1Null()
            Me(Me.tableMSUE.ICT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPNull()
            Me(Me.tableMSUE.IPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICT2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICT2Null()
            Me(Me.tableMSUE.ICT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIKNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIKNull()
            Me(Me.tableMSUE.IKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICT3Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICT3Null()
            Me(Me.tableMSUE.ICT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPHNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IPHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPHNull()
            Me(Me.tableMSUE.IPHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICT4Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICT4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICT4Null()
            Me(Me.tableMSUE.ICT4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICENull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICENull()
            Me(Me.tableMSUE.ICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICT5Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICT5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICT5Null()
            Me(Me.tableMSUE.ICT5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.IMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMONull()
            Me(Me.tableMSUE.IMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICT6Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICT6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICT6Null()
            Me(Me.tableMSUE.ICT6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCARBONO_ONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.CARBONO_OColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCARBONO_ONull()
            Me(Me.tableMSUE.CARBONO_OColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNITRO_TOTNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.NITRO_TOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNITRO_TOTNull()
            Me(Me.tableMSUE.NITRO_TOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRELACIONNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.RELACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRELACIONNull()
            Me(Me.tableMSUE.RELACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOTASI_SONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.POTASI_SOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOTASI_SONull()
            Me(Me.tableMSUE.POTASI_SOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAZUFRE_EXNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.AZUFRE_EXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAZUFRE_EXNull()
            Me(Me.tableMSUE.AZUFRE_EXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALUMIN_EXNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ALUMIN_EXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALUMIN_EXNull()
            Me(Me.tableMSUE.ALUMIN_EXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCALCIONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.CALCIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCALCIONull()
            Me(Me.tableMSUE.CALCIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCALCIO2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.CALCIO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCALCIO2Null()
            Me(Me.tableMSUE.CALCIO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAGNESIONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.MAGNESIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAGNESIONull()
            Me(Me.tableMSUE.MAGNESIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAGNESIO2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.MAGNESIO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAGNESIO2Null()
            Me(Me.tableMSUE.MAGNESIO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSODIONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.SODIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSODIONull()
            Me(Me.tableMSUE.SODIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSODIO2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.SODIO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSODIO2Null()
            Me(Me.tableMSUE.SODIO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOTASIONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.POTASIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOTASIONull()
            Me(Me.tableMSUE.POTASIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOTASIO2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.POTASIO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOTASIO2Null()
            Me(Me.tableMSUE.POTASIO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUMABASESNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.SUMABASESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUMABASESNull()
            Me(Me.tableMSUE.SUMABASESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCICNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.CICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCICNull()
            Me(Me.tableMSUE.CICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALUMINIONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ALUMINIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALUMINIONull()
            Me(Me.tableMSUE.ALUMINIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSATURANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.SATURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSATURANull()
            Me(Me.tableMSUE.SATURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCICENull() As Boolean
            Return Me.IsNull(Me.tableMSUE.CICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCICENull()
            Me(Me.tableMSUE.CICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZINCNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ZINCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZINCNull()
            Me(Me.tableMSUE.ZINCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMANGANESONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.MANGANESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMANGANESONull()
            Me(Me.tableMSUE.MANGANESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIERRONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.FIERROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIERRONull()
            Me(Me.tableMSUE.FIERROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOBRENull() As Boolean
            Return Me.IsNull(Me.tableMSUE.COBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOBRENull()
            Me(Me.tableMSUE.COBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBORONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.BOROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBORONull()
            Me(Me.tableMSUE.BOROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsARCILLANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ARCILLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetARCILLANull()
            Me(Me.tableMSUE.ARCILLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIMONull() As Boolean
            Return Me.IsNull(Me.tableMSUE.LIMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIMONull()
            Me(Me.tableMSUE.LIMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsARENANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.ARENAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetARENANull()
            Me(Me.tableMSUE.ARENAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTURANull() As Boolean
            Return Me.IsNull(Me.tableMSUE.TEXTURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTURANull()
            Me(Me.tableMSUE.TEXTURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDENSIDADNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.DENSIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDENSIDADNull()
            Me(Me.tableMSUE.DENSIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHUMEDAD03Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.HUMEDAD03Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHUMEDAD03Null()
            Me(Me.tableMSUE.HUMEDAD03Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHUMEDAD15Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.HUMEDAD15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHUMEDAD15Null()
            Me(Me.tableMSUE.HUMEDAD15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHUMEDADNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.HUMEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHUMEDADNull()
            Me(Me.tableMSUE.HUMEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPIEDRASNull() As Boolean
            Return Me.IsNull(Me.tableMSUE.PIEDRASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPIEDRASNull()
            Me(Me.tableMSUE.PIEDRASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEL1Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IEL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEL1Null()
            Me(Me.tableMSUE.IEL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIUN1Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IUN1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIUN1Null()
            Me(Me.tableMSUE.IUN1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICO1Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICO1Null()
            Me(Me.tableMSUE.ICO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICA1Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICA1Null()
            Me(Me.tableMSUE.ICA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEL2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEL2Null()
            Me(Me.tableMSUE.IEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIUN2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IUN2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIUN2Null()
            Me(Me.tableMSUE.IUN2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICO2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICO2Null()
            Me(Me.tableMSUE.ICO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICA2Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICA2Null()
            Me(Me.tableMSUE.ICA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEL3Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IEL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEL3Null()
            Me(Me.tableMSUE.IEL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIUN3Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IUN3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIUN3Null()
            Me(Me.tableMSUE.IUN3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICO3Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICO3Null()
            Me(Me.tableMSUE.ICO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICA3Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICA3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICA3Null()
            Me(Me.tableMSUE.ICA3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEL4Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IEL4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEL4Null()
            Me(Me.tableMSUE.IEL4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIUN4Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IUN4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIUN4Null()
            Me(Me.tableMSUE.IUN4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICO4Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICO4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICO4Null()
            Me(Me.tableMSUE.ICO4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICA4Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICA4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICA4Null()
            Me(Me.tableMSUE.ICA4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEL5Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IEL5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEL5Null()
            Me(Me.tableMSUE.IEL5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIUN5Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IUN5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIUN5Null()
            Me(Me.tableMSUE.IUN5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICO5Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICO5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICO5Null()
            Me(Me.tableMSUE.ICO5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICA5Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICA5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICA5Null()
            Me(Me.tableMSUE.ICA5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEL6Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IEL6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEL6Null()
            Me(Me.tableMSUE.IEL6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIUN6Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IUN6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIUN6Null()
            Me(Me.tableMSUE.IUN6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICO6Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICO6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICO6Null()
            Me(Me.tableMSUE.ICO6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICA6Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.ICA6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICA6Null()
            Me(Me.tableMSUE.ICA6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOB1Null() As Boolean
            Return Me.IsNull(Me.tableMSUE.IOB1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOB1Null()
            Me(Me.tableMSUE.IOB1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS_ELEMENTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS_ELEMENTOS As ANALISIS_ELEMENTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS_ELEMENTOS = CType(Me.Table,ANALISIS_ELEMENTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_PRIORIDAD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS_ELEMENTOS.ELE_PRIORIDADColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ELE_PRIORIDAD' de la tabla 'ANALISIS_ELEMENTOS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS.ELE_PRIORIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TITULO_FILA() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS_ELEMENTOS.TITULO_FILAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TITULO_FILA' de la tabla 'ANALISIS_ELEMENTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS.TITULO_FILAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsELE_PRIORIDADNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS_ELEMENTOS.ELE_PRIORIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetELE_PRIORIDADNull()
            Me(Me.tableANALISIS_ELEMENTOS.ELE_PRIORIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTITULO_FILANull() As Boolean
            Return Me.IsNull(Me.tableANALISIS_ELEMENTOS.TITULO_FILAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTITULO_FILANull()
            Me(Me.tableANALISIS_ELEMENTOS.TITULO_FILAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NLAB_COLUMNASRow
        Inherits Global.System.Data.DataRow
        
        Private tableNLAB_COLUMNAS As NLAB_COLUMNASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNLAB_COLUMNAS = CType(Me.Table,NLAB_COLUMNASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNLAB_COLUMNAS.OT_NLABColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_NLAB' de la tabla 'NLAB_COLUMNAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNLAB_COLUMNAS.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAD_ENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableNLAB_COLUMNAS.COLUMNAD_ENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAD_ENT' de la tabla 'NLAB_COLUMNAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNLAB_COLUMNAS.COLUMNAD_ENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAH_ENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableNLAB_COLUMNAS.COLUMNAH_ENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAH_ENT' de la tabla 'NLAB_COLUMNAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNLAB_COLUMNAS.COLUMNAH_ENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNA_COMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableNLAB_COLUMNAS.COLUMNA_COMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNA_COMA' de la tabla 'NLAB_COLUMNAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNLAB_COLUMNAS.COLUMNA_COMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAD_DEC() As String
            Get
                Try 
                    Return CType(Me(Me.tableNLAB_COLUMNAS.COLUMNAD_DECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAD_DEC' de la tabla 'NLAB_COLUMNAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNLAB_COLUMNAS.COLUMNAD_DECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAH_DEC() As String
            Get
                Try 
                    Return CType(Me(Me.tableNLAB_COLUMNAS.COLUMNAH_DECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAH_DEC' de la tabla 'NLAB_COLUMNAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNLAB_COLUMNAS.COLUMNAH_DECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_NLABNull() As Boolean
            Return Me.IsNull(Me.tableNLAB_COLUMNAS.OT_NLABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_NLABNull()
            Me(Me.tableNLAB_COLUMNAS.OT_NLABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAD_ENTNull() As Boolean
            Return Me.IsNull(Me.tableNLAB_COLUMNAS.COLUMNAD_ENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAD_ENTNull()
            Me(Me.tableNLAB_COLUMNAS.COLUMNAD_ENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAH_ENTNull() As Boolean
            Return Me.IsNull(Me.tableNLAB_COLUMNAS.COLUMNAH_ENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAH_ENTNull()
            Me(Me.tableNLAB_COLUMNAS.COLUMNAH_ENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNA_COMANull() As Boolean
            Return Me.IsNull(Me.tableNLAB_COLUMNAS.COLUMNA_COMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNA_COMANull()
            Me(Me.tableNLAB_COLUMNAS.COLUMNA_COMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAD_DECNull() As Boolean
            Return Me.IsNull(Me.tableNLAB_COLUMNAS.COLUMNAD_DECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAD_DECNull()
            Me(Me.tableNLAB_COLUMNAS.COLUMNAD_DECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAH_DECNull() As Boolean
            Return Me.IsNull(Me.tableNLAB_COLUMNAS.COLUMNAH_DECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAH_DECNull()
            Me(Me.tableNLAB_COLUMNAS.COLUMNAH_DECColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS_ELERow
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS_ELE As ANALISIS_ELEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS_ELE = CType(Me.Table,ANALISIS_ELEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS_ELE.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS_ELE.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS_ELE.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'ANALISIS_ELE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS_ELE.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS_ELE.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'ANALISIS_ELE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS_ELE.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS_ELE.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'ANALISIS_ELE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS_ELE.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableANALISIS_ELE.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'ANALISIS_ELE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableANALISIS_ELE.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS_ELE.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableANALISIS_ELE.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS_ELE.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableANALISIS_ELE.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableANALISIS_ELE.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableANALISIS_ELE.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableANALISIS_ELE.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableANALISIS_ELE.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FIRMA_NOMBRERow
        Inherits Global.System.Data.DataRow
        
        Private tableFIRMA_NOMBRE As FIRMA_NOMBREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFIRMA_NOMBRE = CType(Me.Table,FIRMA_NOMBREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableFIRMA_NOMBRE.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableFIRMA_NOMBRE.NOMBREColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FIRMA_CARGORow
        Inherits Global.System.Data.DataRow
        
        Private tableFIRMA_CARGO As FIRMA_CARGODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFIRMA_CARGO = CType(Me.Table,FIRMA_CARGODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARGO() As String
            Get
                Return CType(Me(Me.tableFIRMA_CARGO.CARGOColumn),String)
            End Get
            Set
                Me(Me.tableFIRMA_CARGO.CARGOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RANGO_FERTILIDADRow
        Inherits Global.System.Data.DataRow
        
        Private tableRANGO_FERTILIDAD As RANGO_FERTILIDADDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRANGO_FERTILIDAD = CType(Me.Table,RANGO_FERTILIDADDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableRANGO_FERTILIDAD.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableRANGO_FERTILIDAD.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableRANGO_FERTILIDAD.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableRANGO_FERTILIDAD.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINEA() As Integer
            Get
                Return CType(Me(Me.tableRANGO_FERTILIDAD.LINEAColumn),Integer)
            End Get
            Set
                Me(Me.tableRANGO_FERTILIDAD.LINEAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_DESDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_FERTILIDAD.RANGO_DESDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_DESDE' de la tabla 'RANGO_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_FERTILIDAD.RANGO_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_HASTA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_FERTILIDAD.RANGO_HASTAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_HASTA' de la tabla 'RANGO_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_FERTILIDAD.RANGO_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATEGORIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_FERTILIDAD.CATEGORIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CATEGORIA' de la tabla 'RANGO_FERTILIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_FERTILIDAD.CATEGORIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_DESDENull() As Boolean
            Return Me.IsNull(Me.tableRANGO_FERTILIDAD.RANGO_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_DESDENull()
            Me(Me.tableRANGO_FERTILIDAD.RANGO_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_HASTANull() As Boolean
            Return Me.IsNull(Me.tableRANGO_FERTILIDAD.RANGO_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_HASTANull()
            Me(Me.tableRANGO_FERTILIDAD.RANGO_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATEGORIANull() As Boolean
            Return Me.IsNull(Me.tableRANGO_FERTILIDAD.CATEGORIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATEGORIANull()
            Me(Me.tableRANGO_FERTILIDAD.CATEGORIAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RANGO_FERTORGRow
        Inherits Global.System.Data.DataRow
        
        Private tableRANGO_FERTORG As RANGO_FERTORGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRANGO_FERTORG = CType(Me.Table,RANGO_FERTORGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableRANGO_FERTORG.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableRANGO_FERTORG.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableRANGO_FERTORG.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableRANGO_FERTORG.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_DESDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_FERTORG.RANGO_DESDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_DESDE' de la tabla 'RANGO_FERTORG' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_FERTORG.RANGO_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO_HASTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_FERTORG.RANGO_HASTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO_HASTA' de la tabla 'RANGO_FERTORG' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_FERTORG.RANGO_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RANGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_FERTORG.RANGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RANGO' de la tabla 'RANGO_FERTORG' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_FERTORG.RANGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property METODO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRANGO_FERTORG.METODOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'METODO' de la tabla 'RANGO_FERTORG' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRANGO_FERTORG.METODOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_DESDENull() As Boolean
            Return Me.IsNull(Me.tableRANGO_FERTORG.RANGO_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_DESDENull()
            Me(Me.tableRANGO_FERTORG.RANGO_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGO_HASTANull() As Boolean
            Return Me.IsNull(Me.tableRANGO_FERTORG.RANGO_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGO_HASTANull()
            Me(Me.tableRANGO_FERTORG.RANGO_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRANGONull() As Boolean
            Return Me.IsNull(Me.tableRANGO_FERTORG.RANGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRANGONull()
            Me(Me.tableRANGO_FERTORG.RANGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMETODONull() As Boolean
            Return Me.IsNull(Me.tableRANGO_FERTORG.METODOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMETODONull()
            Me(Me.tableRANGO_FERTORG.METODOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COLUMNAS_SALINIDADRow
        Inherits Global.System.Data.DataRow
        
        Private tableCOLUMNAS_SALINIDAD As COLUMNAS_SALINIDADDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOLUMNAS_SALINIDAD = CType(Me.Table,COLUMNAS_SALINIDADDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As String
            Get
                Return CType(Me(Me.tableCOLUMNAS_SALINIDAD.OT_NLABColumn),String)
            End Get
            Set
                Me(Me.tableCOLUMNAS_SALINIDAD.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADC' de la tabla 'COLUMNAS_SALINIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHC' de la tabla 'COLUMNAS_SALINIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADR' de la tabla 'COLUMNAS_SALINIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHR' de la tabla 'COLUMNAS_SALINIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNADS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNADS' de la tabla 'COLUMNAS_SALINIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLUMNAHS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COLUMNAHS' de la tabla 'COLUMNAS_SALINIDAD' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADCNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_SALINIDAD.COLUMNADCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADCNull()
            Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHCNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHCNull()
            Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADRNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_SALINIDAD.COLUMNADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADRNull()
            Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHRNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHRNull()
            Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNADSNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_SALINIDAD.COLUMNADSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNADSNull()
            Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNADSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLUMNAHSNull() As Boolean
            Return Me.IsNull(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLUMNAHSNull()
            Me(Me.tableCOLUMNAS_SALINIDAD.COLUMNAHSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMPXHOJA1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPXHOJA1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMPXHOJA1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMPXHOJA1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NOTA_RESULTADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NOTA_RESULTADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NOTA_RESULTADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NOTA_RESULTADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MNEMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MNEMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MNEMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MNEMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RANGO_MUESTRARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RANGO_MUESTRARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RANGO_MUESTRARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RANGO_MUESTRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMPXHOJARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPXHOJARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMPXHOJARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMPXHOJARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HOMOLOGACION_ESPECIERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HOMOLOGACION_ESPECIERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HOMOLOGACION_ESPECIERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HOMOLOGACION_ESPECIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DICCIONARIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DICCIONARIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DICCIONARIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DICCIONARIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMPXHOJA2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPXHOJA2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMPXHOJA2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMPXHOJA2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RANGO_SUELORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RANGO_SUELORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RANGO_SUELORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RANGO_SUELORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMPXHOJA_SUELORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPXHOJA_SUELORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMPXHOJA_SUELORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMPXHOJA_SUELORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FORMATO_RESULTADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FORMATO_RESULTADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FORMATO_RESULTADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FORMATO_RESULTADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RANGO_DBFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RANGO_DBFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RANGO_DBFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RANGO_DBFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NOTA_AUTO_RESULTADOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NOTA_AUTO_RESULTADOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NOTA_AUTO_RESULTADOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NOTA_AUTO_RESULTADOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMPXHOJA_AGUARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMPXHOJA_AGUARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMPXHOJA_AGUARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMPXHOJA_AGUARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ELEMENTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ELEMENTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ELEMENTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ELEMENTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COLUMNAS_FERTILIDADRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COLUMNAS_FERTILIDADRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COLUMNAS_FERTILIDADRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COLUMNAS_FERTILIDADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RANGO_AGUA_CERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RANGO_AGUA_CERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RANGO_AGUA_CERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RANGO_AGUA_CERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TABLA_DIGRES2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TABLA_DIGRES2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TABLA_DIGRES2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TABLA_DIGRES2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SUBMUESTRARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SUBMUESTRARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SUBMUESTRARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SUBMUESTRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MSUERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MSUERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MSUERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MSUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS_ELEMENTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS_ELEMENTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS_ELEMENTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS_ELEMENTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NLAB_COLUMNASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NLAB_COLUMNASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NLAB_COLUMNASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NLAB_COLUMNASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS_ELERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS_ELERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS_ELERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS_ELERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FIRMA_NOMBRERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FIRMA_NOMBRERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FIRMA_NOMBRERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FIRMA_NOMBRERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FIRMA_CARGORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FIRMA_CARGORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FIRMA_CARGORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FIRMA_CARGORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RANGO_FERTILIDADRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RANGO_FERTILIDADRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RANGO_FERTILIDADRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RANGO_FERTILIDADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RANGO_FERTORGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RANGO_FERTORGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RANGO_FERTORGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RANGO_FERTORGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COLUMNAS_SALINIDADRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COLUMNAS_SALINIDADRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COLUMNAS_SALINIDADRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COLUMNAS_SALINIDADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
