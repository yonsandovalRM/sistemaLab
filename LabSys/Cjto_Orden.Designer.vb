'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Cjto_Orden"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Cjto_Orden
    Inherits Global.System.Data.DataSet
    
    Private tableOT_FERT_APLICADA As OT_FERT_APLICADADataTable
    
    Private tableOT_RECOMENDACION As OT_RECOMENDACIONDataTable
    
    Private tableOT_FERTORG_ANTECEDENTES As OT_FERTORG_ANTECEDENTESDataTable
    
    Private tableOT_FERTQUI_ANTECEDENTES As OT_FERTQUI_ANTECEDENTESDataTable
    
    Private tableOT_YEMAS_ANTECEDENTES As OT_YEMAS_ANTECEDENTESDataTable
    
    Private tableOT_FITOPATOLOGICOS_ANTECEDENTES As OT_FITOPATOLOGICOS_ANTECEDENTESDataTable
    
    Private tableIMP_RECIBO As IMP_RECIBODataTable
    
    Private tableNOTA_YEMAS As NOTA_YEMASDataTable
    
    Private tableNOTA_YEMA_NLAB As NOTA_YEMA_NLABDataTable
    
    Private tableCONSULTA_ANALISIS As CONSULTA_ANALISISDataTable
    
    Private tableMYEMA3 As MYEMA3DataTable
    
    Private tableDIG_YEMAS As DIG_YEMASDataTable
    
    Private tableYEMAS_NLAB As YEMAS_NLABDataTable
    
    Private tableESTIMADOBRO As ESTIMADOBRODataTable
    
    Private tableLARGO_CARGADOR As LARGO_CARGADORDataTable
    
    Private tableANALISIS_ELEMENTOS_PASO As ANALISIS_ELEMENTOS_PASODataTable
    
    Private tableOTEST_NLAB As OTEST_NLABDataTable
    
    Private tableOT_CODIFICACION As OT_CODIFICACIONDataTable
    
    Private tableDIGITA_RESULTADOS As DIGITA_RESULTADOSDataTable
    
    Private tableDUPLICA_RESULTADO As DUPLICA_RESULTADODataTable
    
    Private tableANALISIS_ELEMENTOS_PASO2 As ANALISIS_ELEMENTOS_PASO2DataTable
    
    Private tableOT_FOLIAR_ANTECEDENTES As OT_FOLIAR_ANTECEDENTESDataTable
    
    Private tableORDEN_TRABAJO As ORDEN_TRABAJODataTable
    
    Private tableANALISIS_ELEMENTOS_PASO3 As ANALISIS_ELEMENTOS_PASO3DataTable
    
    Private tableOT_SUELO_ANTECEDENTES As OT_SUELO_ANTECEDENTESDataTable
    
    Private tableOT_TEJIDOS_ANTECEDENTES As OT_TEJIDOS_ANTECEDENTESDataTable
    
    Private tableOT_AGUA_ANTECEDENTES As OT_AGUA_ANTECEDENTESDataTable
    
    Private tableOT_CODIFICACION_RECIBO As OT_CODIFICACION_RECIBODataTable
    
    Private tableMODIFICA_NLAB As MODIFICA_NLABDataTable
    
    Private tableMYEMA As MYEMADataTable
    
    Private tableOT_NEMATODOS_ANTECEDENTES As OT_NEMATODOS_ANTECEDENTESDataTable
    
    Private tableOT_FITOEVALUACION_ANTECEDENTES As OT_FITOEVALUACION_ANTECEDENTESDataTable
    
    Private tableOT_FITORESISTENCIA_ANTECEDENTES As OT_FITORESISTENCIA_ANTECEDENTESDataTable
    
    Private tableOT_FITOMONITOREO_ANTECEDENTES As OT_FITOMONITOREO_ANTECEDENTESDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OT_FERT_APLICADA")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FERT_APLICADADataTable(ds.Tables("OT_FERT_APLICADA")))
            End If
            If (Not (ds.Tables("OT_RECOMENDACION")) Is Nothing) Then
                MyBase.Tables.Add(New OT_RECOMENDACIONDataTable(ds.Tables("OT_RECOMENDACION")))
            End If
            If (Not (ds.Tables("OT_FERTORG_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FERTORG_ANTECEDENTESDataTable(ds.Tables("OT_FERTORG_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FERTQUI_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FERTQUI_ANTECEDENTESDataTable(ds.Tables("OT_FERTQUI_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_YEMAS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_YEMAS_ANTECEDENTESDataTable(ds.Tables("OT_YEMAS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITOPATOLOGICOS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITOPATOLOGICOS_ANTECEDENTESDataTable(ds.Tables("OT_FITOPATOLOGICOS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("IMP_RECIBO")) Is Nothing) Then
                MyBase.Tables.Add(New IMP_RECIBODataTable(ds.Tables("IMP_RECIBO")))
            End If
            If (Not (ds.Tables("NOTA_YEMAS")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_YEMASDataTable(ds.Tables("NOTA_YEMAS")))
            End If
            If (Not (ds.Tables("NOTA_YEMA_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_YEMA_NLABDataTable(ds.Tables("NOTA_YEMA_NLAB")))
            End If
            If (Not (ds.Tables("CONSULTA_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New CONSULTA_ANALISISDataTable(ds.Tables("CONSULTA_ANALISIS")))
            End If
            If (Not (ds.Tables("MYEMA3")) Is Nothing) Then
                MyBase.Tables.Add(New MYEMA3DataTable(ds.Tables("MYEMA3")))
            End If
            If (Not (ds.Tables("DIG_YEMAS")) Is Nothing) Then
                MyBase.Tables.Add(New DIG_YEMASDataTable(ds.Tables("DIG_YEMAS")))
            End If
            If (Not (ds.Tables("YEMAS_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New YEMAS_NLABDataTable(ds.Tables("YEMAS_NLAB")))
            End If
            If (Not (ds.Tables("ESTIMADOBRO")) Is Nothing) Then
                MyBase.Tables.Add(New ESTIMADOBRODataTable(ds.Tables("ESTIMADOBRO")))
            End If
            If (Not (ds.Tables("LARGO_CARGADOR")) Is Nothing) Then
                MyBase.Tables.Add(New LARGO_CARGADORDataTable(ds.Tables("LARGO_CARGADOR")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS_PASO")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOS_PASODataTable(ds.Tables("ANALISIS_ELEMENTOS_PASO")))
            End If
            If (Not (ds.Tables("OTEST_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New OTEST_NLABDataTable(ds.Tables("OTEST_NLAB")))
            End If
            If (Not (ds.Tables("OT_CODIFICACION")) Is Nothing) Then
                MyBase.Tables.Add(New OT_CODIFICACIONDataTable(ds.Tables("OT_CODIFICACION")))
            End If
            If (Not (ds.Tables("DIGITA_RESULTADOS")) Is Nothing) Then
                MyBase.Tables.Add(New DIGITA_RESULTADOSDataTable(ds.Tables("DIGITA_RESULTADOS")))
            End If
            If (Not (ds.Tables("DUPLICA_RESULTADO")) Is Nothing) Then
                MyBase.Tables.Add(New DUPLICA_RESULTADODataTable(ds.Tables("DUPLICA_RESULTADO")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS_PASO2")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOS_PASO2DataTable(ds.Tables("ANALISIS_ELEMENTOS_PASO2")))
            End If
            If (Not (ds.Tables("OT_FOLIAR_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FOLIAR_ANTECEDENTESDataTable(ds.Tables("OT_FOLIAR_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("ORDEN_TRABAJO")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_TRABAJODataTable(ds.Tables("ORDEN_TRABAJO")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS_PASO3")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOS_PASO3DataTable(ds.Tables("ANALISIS_ELEMENTOS_PASO3")))
            End If
            If (Not (ds.Tables("OT_SUELO_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_SUELO_ANTECEDENTESDataTable(ds.Tables("OT_SUELO_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_TEJIDOS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_TEJIDOS_ANTECEDENTESDataTable(ds.Tables("OT_TEJIDOS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_AGUA_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_AGUA_ANTECEDENTESDataTable(ds.Tables("OT_AGUA_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_CODIFICACION_RECIBO")) Is Nothing) Then
                MyBase.Tables.Add(New OT_CODIFICACION_RECIBODataTable(ds.Tables("OT_CODIFICACION_RECIBO")))
            End If
            If (Not (ds.Tables("MODIFICA_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New MODIFICA_NLABDataTable(ds.Tables("MODIFICA_NLAB")))
            End If
            If (Not (ds.Tables("MYEMA")) Is Nothing) Then
                MyBase.Tables.Add(New MYEMADataTable(ds.Tables("MYEMA")))
            End If
            If (Not (ds.Tables("OT_NEMATODOS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_NEMATODOS_ANTECEDENTESDataTable(ds.Tables("OT_NEMATODOS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITOEVALUACION_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITOEVALUACION_ANTECEDENTESDataTable(ds.Tables("OT_FITOEVALUACION_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITORESISTENCIA_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITORESISTENCIA_ANTECEDENTESDataTable(ds.Tables("OT_FITORESISTENCIA_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITOMONITOREO_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITOMONITOREO_ANTECEDENTESDataTable(ds.Tables("OT_FITOMONITOREO_ANTECEDENTES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FERT_APLICADA() As OT_FERT_APLICADADataTable
        Get
            Return Me.tableOT_FERT_APLICADA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_RECOMENDACION() As OT_RECOMENDACIONDataTable
        Get
            Return Me.tableOT_RECOMENDACION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FERTORG_ANTECEDENTES() As OT_FERTORG_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_FERTORG_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FERTQUI_ANTECEDENTES() As OT_FERTQUI_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_FERTQUI_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_YEMAS_ANTECEDENTES() As OT_YEMAS_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_YEMAS_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FITOPATOLOGICOS_ANTECEDENTES() As OT_FITOPATOLOGICOS_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMP_RECIBO() As IMP_RECIBODataTable
        Get
            Return Me.tableIMP_RECIBO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NOTA_YEMAS() As NOTA_YEMASDataTable
        Get
            Return Me.tableNOTA_YEMAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NOTA_YEMA_NLAB() As NOTA_YEMA_NLABDataTable
        Get
            Return Me.tableNOTA_YEMA_NLAB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CONSULTA_ANALISIS() As CONSULTA_ANALISISDataTable
        Get
            Return Me.tableCONSULTA_ANALISIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MYEMA3() As MYEMA3DataTable
        Get
            Return Me.tableMYEMA3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DIG_YEMAS() As DIG_YEMASDataTable
        Get
            Return Me.tableDIG_YEMAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property YEMAS_NLAB() As YEMAS_NLABDataTable
        Get
            Return Me.tableYEMAS_NLAB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ESTIMADOBRO() As ESTIMADOBRODataTable
        Get
            Return Me.tableESTIMADOBRO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LARGO_CARGADOR() As LARGO_CARGADORDataTable
        Get
            Return Me.tableLARGO_CARGADOR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS_ELEMENTOS_PASO() As ANALISIS_ELEMENTOS_PASODataTable
        Get
            Return Me.tableANALISIS_ELEMENTOS_PASO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTEST_NLAB() As OTEST_NLABDataTable
        Get
            Return Me.tableOTEST_NLAB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_CODIFICACION() As OT_CODIFICACIONDataTable
        Get
            Return Me.tableOT_CODIFICACION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DIGITA_RESULTADOS() As DIGITA_RESULTADOSDataTable
        Get
            Return Me.tableDIGITA_RESULTADOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DUPLICA_RESULTADO() As DUPLICA_RESULTADODataTable
        Get
            Return Me.tableDUPLICA_RESULTADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS_ELEMENTOS_PASO2() As ANALISIS_ELEMENTOS_PASO2DataTable
        Get
            Return Me.tableANALISIS_ELEMENTOS_PASO2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FOLIAR_ANTECEDENTES() As OT_FOLIAR_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_FOLIAR_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDEN_TRABAJO() As ORDEN_TRABAJODataTable
        Get
            Return Me.tableORDEN_TRABAJO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ANALISIS_ELEMENTOS_PASO3() As ANALISIS_ELEMENTOS_PASO3DataTable
        Get
            Return Me.tableANALISIS_ELEMENTOS_PASO3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_SUELO_ANTECEDENTES() As OT_SUELO_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_SUELO_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_TEJIDOS_ANTECEDENTES() As OT_TEJIDOS_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_TEJIDOS_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_AGUA_ANTECEDENTES() As OT_AGUA_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_AGUA_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_CODIFICACION_RECIBO() As OT_CODIFICACION_RECIBODataTable
        Get
            Return Me.tableOT_CODIFICACION_RECIBO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MODIFICA_NLAB() As MODIFICA_NLABDataTable
        Get
            Return Me.tableMODIFICA_NLAB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MYEMA() As MYEMADataTable
        Get
            Return Me.tableMYEMA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_NEMATODOS_ANTECEDENTES() As OT_NEMATODOS_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_NEMATODOS_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FITOEVALUACION_ANTECEDENTES() As OT_FITOEVALUACION_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_FITOEVALUACION_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FITORESISTENCIA_ANTECEDENTES() As OT_FITORESISTENCIA_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_FITORESISTENCIA_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OT_FITOMONITOREO_ANTECEDENTES() As OT_FITOMONITOREO_ANTECEDENTESDataTable
        Get
            Return Me.tableOT_FITOMONITOREO_ANTECEDENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Cjto_Orden = CType(MyBase.Clone,Cjto_Orden)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OT_FERT_APLICADA")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FERT_APLICADADataTable(ds.Tables("OT_FERT_APLICADA")))
            End If
            If (Not (ds.Tables("OT_RECOMENDACION")) Is Nothing) Then
                MyBase.Tables.Add(New OT_RECOMENDACIONDataTable(ds.Tables("OT_RECOMENDACION")))
            End If
            If (Not (ds.Tables("OT_FERTORG_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FERTORG_ANTECEDENTESDataTable(ds.Tables("OT_FERTORG_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FERTQUI_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FERTQUI_ANTECEDENTESDataTable(ds.Tables("OT_FERTQUI_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_YEMAS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_YEMAS_ANTECEDENTESDataTable(ds.Tables("OT_YEMAS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITOPATOLOGICOS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITOPATOLOGICOS_ANTECEDENTESDataTable(ds.Tables("OT_FITOPATOLOGICOS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("IMP_RECIBO")) Is Nothing) Then
                MyBase.Tables.Add(New IMP_RECIBODataTable(ds.Tables("IMP_RECIBO")))
            End If
            If (Not (ds.Tables("NOTA_YEMAS")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_YEMASDataTable(ds.Tables("NOTA_YEMAS")))
            End If
            If (Not (ds.Tables("NOTA_YEMA_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New NOTA_YEMA_NLABDataTable(ds.Tables("NOTA_YEMA_NLAB")))
            End If
            If (Not (ds.Tables("CONSULTA_ANALISIS")) Is Nothing) Then
                MyBase.Tables.Add(New CONSULTA_ANALISISDataTable(ds.Tables("CONSULTA_ANALISIS")))
            End If
            If (Not (ds.Tables("MYEMA3")) Is Nothing) Then
                MyBase.Tables.Add(New MYEMA3DataTable(ds.Tables("MYEMA3")))
            End If
            If (Not (ds.Tables("DIG_YEMAS")) Is Nothing) Then
                MyBase.Tables.Add(New DIG_YEMASDataTable(ds.Tables("DIG_YEMAS")))
            End If
            If (Not (ds.Tables("YEMAS_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New YEMAS_NLABDataTable(ds.Tables("YEMAS_NLAB")))
            End If
            If (Not (ds.Tables("ESTIMADOBRO")) Is Nothing) Then
                MyBase.Tables.Add(New ESTIMADOBRODataTable(ds.Tables("ESTIMADOBRO")))
            End If
            If (Not (ds.Tables("LARGO_CARGADOR")) Is Nothing) Then
                MyBase.Tables.Add(New LARGO_CARGADORDataTable(ds.Tables("LARGO_CARGADOR")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS_PASO")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOS_PASODataTable(ds.Tables("ANALISIS_ELEMENTOS_PASO")))
            End If
            If (Not (ds.Tables("OTEST_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New OTEST_NLABDataTable(ds.Tables("OTEST_NLAB")))
            End If
            If (Not (ds.Tables("OT_CODIFICACION")) Is Nothing) Then
                MyBase.Tables.Add(New OT_CODIFICACIONDataTable(ds.Tables("OT_CODIFICACION")))
            End If
            If (Not (ds.Tables("DIGITA_RESULTADOS")) Is Nothing) Then
                MyBase.Tables.Add(New DIGITA_RESULTADOSDataTable(ds.Tables("DIGITA_RESULTADOS")))
            End If
            If (Not (ds.Tables("DUPLICA_RESULTADO")) Is Nothing) Then
                MyBase.Tables.Add(New DUPLICA_RESULTADODataTable(ds.Tables("DUPLICA_RESULTADO")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS_PASO2")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOS_PASO2DataTable(ds.Tables("ANALISIS_ELEMENTOS_PASO2")))
            End If
            If (Not (ds.Tables("OT_FOLIAR_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FOLIAR_ANTECEDENTESDataTable(ds.Tables("OT_FOLIAR_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("ORDEN_TRABAJO")) Is Nothing) Then
                MyBase.Tables.Add(New ORDEN_TRABAJODataTable(ds.Tables("ORDEN_TRABAJO")))
            End If
            If (Not (ds.Tables("ANALISIS_ELEMENTOS_PASO3")) Is Nothing) Then
                MyBase.Tables.Add(New ANALISIS_ELEMENTOS_PASO3DataTable(ds.Tables("ANALISIS_ELEMENTOS_PASO3")))
            End If
            If (Not (ds.Tables("OT_SUELO_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_SUELO_ANTECEDENTESDataTable(ds.Tables("OT_SUELO_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_TEJIDOS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_TEJIDOS_ANTECEDENTESDataTable(ds.Tables("OT_TEJIDOS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_AGUA_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_AGUA_ANTECEDENTESDataTable(ds.Tables("OT_AGUA_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_CODIFICACION_RECIBO")) Is Nothing) Then
                MyBase.Tables.Add(New OT_CODIFICACION_RECIBODataTable(ds.Tables("OT_CODIFICACION_RECIBO")))
            End If
            If (Not (ds.Tables("MODIFICA_NLAB")) Is Nothing) Then
                MyBase.Tables.Add(New MODIFICA_NLABDataTable(ds.Tables("MODIFICA_NLAB")))
            End If
            If (Not (ds.Tables("MYEMA")) Is Nothing) Then
                MyBase.Tables.Add(New MYEMADataTable(ds.Tables("MYEMA")))
            End If
            If (Not (ds.Tables("OT_NEMATODOS_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_NEMATODOS_ANTECEDENTESDataTable(ds.Tables("OT_NEMATODOS_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITOEVALUACION_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITOEVALUACION_ANTECEDENTESDataTable(ds.Tables("OT_FITOEVALUACION_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITORESISTENCIA_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITORESISTENCIA_ANTECEDENTESDataTable(ds.Tables("OT_FITORESISTENCIA_ANTECEDENTES")))
            End If
            If (Not (ds.Tables("OT_FITOMONITOREO_ANTECEDENTES")) Is Nothing) Then
                MyBase.Tables.Add(New OT_FITOMONITOREO_ANTECEDENTESDataTable(ds.Tables("OT_FITOMONITOREO_ANTECEDENTES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOT_FERT_APLICADA = CType(MyBase.Tables("OT_FERT_APLICADA"),OT_FERT_APLICADADataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FERT_APLICADA) Is Nothing) Then
                Me.tableOT_FERT_APLICADA.InitVars
            End If
        End If
        Me.tableOT_RECOMENDACION = CType(MyBase.Tables("OT_RECOMENDACION"),OT_RECOMENDACIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_RECOMENDACION) Is Nothing) Then
                Me.tableOT_RECOMENDACION.InitVars
            End If
        End If
        Me.tableOT_FERTORG_ANTECEDENTES = CType(MyBase.Tables("OT_FERTORG_ANTECEDENTES"),OT_FERTORG_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FERTORG_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_FERTORG_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_FERTQUI_ANTECEDENTES = CType(MyBase.Tables("OT_FERTQUI_ANTECEDENTES"),OT_FERTQUI_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FERTQUI_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_FERTQUI_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_YEMAS_ANTECEDENTES = CType(MyBase.Tables("OT_YEMAS_ANTECEDENTES"),OT_YEMAS_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_YEMAS_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_YEMAS_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES = CType(MyBase.Tables("OT_FITOPATOLOGICOS_ANTECEDENTES"),OT_FITOPATOLOGICOS_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableIMP_RECIBO = CType(MyBase.Tables("IMP_RECIBO"),IMP_RECIBODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMP_RECIBO) Is Nothing) Then
                Me.tableIMP_RECIBO.InitVars
            End If
        End If
        Me.tableNOTA_YEMAS = CType(MyBase.Tables("NOTA_YEMAS"),NOTA_YEMASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNOTA_YEMAS) Is Nothing) Then
                Me.tableNOTA_YEMAS.InitVars
            End If
        End If
        Me.tableNOTA_YEMA_NLAB = CType(MyBase.Tables("NOTA_YEMA_NLAB"),NOTA_YEMA_NLABDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNOTA_YEMA_NLAB) Is Nothing) Then
                Me.tableNOTA_YEMA_NLAB.InitVars
            End If
        End If
        Me.tableCONSULTA_ANALISIS = CType(MyBase.Tables("CONSULTA_ANALISIS"),CONSULTA_ANALISISDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCONSULTA_ANALISIS) Is Nothing) Then
                Me.tableCONSULTA_ANALISIS.InitVars
            End If
        End If
        Me.tableMYEMA3 = CType(MyBase.Tables("MYEMA3"),MYEMA3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableMYEMA3) Is Nothing) Then
                Me.tableMYEMA3.InitVars
            End If
        End If
        Me.tableDIG_YEMAS = CType(MyBase.Tables("DIG_YEMAS"),DIG_YEMASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDIG_YEMAS) Is Nothing) Then
                Me.tableDIG_YEMAS.InitVars
            End If
        End If
        Me.tableYEMAS_NLAB = CType(MyBase.Tables("YEMAS_NLAB"),YEMAS_NLABDataTable)
        If (initTable = true) Then
            If (Not (Me.tableYEMAS_NLAB) Is Nothing) Then
                Me.tableYEMAS_NLAB.InitVars
            End If
        End If
        Me.tableESTIMADOBRO = CType(MyBase.Tables("ESTIMADOBRO"),ESTIMADOBRODataTable)
        If (initTable = true) Then
            If (Not (Me.tableESTIMADOBRO) Is Nothing) Then
                Me.tableESTIMADOBRO.InitVars
            End If
        End If
        Me.tableLARGO_CARGADOR = CType(MyBase.Tables("LARGO_CARGADOR"),LARGO_CARGADORDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLARGO_CARGADOR) Is Nothing) Then
                Me.tableLARGO_CARGADOR.InitVars
            End If
        End If
        Me.tableANALISIS_ELEMENTOS_PASO = CType(MyBase.Tables("ANALISIS_ELEMENTOS_PASO"),ANALISIS_ELEMENTOS_PASODataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS_ELEMENTOS_PASO) Is Nothing) Then
                Me.tableANALISIS_ELEMENTOS_PASO.InitVars
            End If
        End If
        Me.tableOTEST_NLAB = CType(MyBase.Tables("OTEST_NLAB"),OTEST_NLABDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTEST_NLAB) Is Nothing) Then
                Me.tableOTEST_NLAB.InitVars
            End If
        End If
        Me.tableOT_CODIFICACION = CType(MyBase.Tables("OT_CODIFICACION"),OT_CODIFICACIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_CODIFICACION) Is Nothing) Then
                Me.tableOT_CODIFICACION.InitVars
            End If
        End If
        Me.tableDIGITA_RESULTADOS = CType(MyBase.Tables("DIGITA_RESULTADOS"),DIGITA_RESULTADOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDIGITA_RESULTADOS) Is Nothing) Then
                Me.tableDIGITA_RESULTADOS.InitVars
            End If
        End If
        Me.tableDUPLICA_RESULTADO = CType(MyBase.Tables("DUPLICA_RESULTADO"),DUPLICA_RESULTADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableDUPLICA_RESULTADO) Is Nothing) Then
                Me.tableDUPLICA_RESULTADO.InitVars
            End If
        End If
        Me.tableANALISIS_ELEMENTOS_PASO2 = CType(MyBase.Tables("ANALISIS_ELEMENTOS_PASO2"),ANALISIS_ELEMENTOS_PASO2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS_ELEMENTOS_PASO2) Is Nothing) Then
                Me.tableANALISIS_ELEMENTOS_PASO2.InitVars
            End If
        End If
        Me.tableOT_FOLIAR_ANTECEDENTES = CType(MyBase.Tables("OT_FOLIAR_ANTECEDENTES"),OT_FOLIAR_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FOLIAR_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_FOLIAR_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableORDEN_TRABAJO = CType(MyBase.Tables("ORDEN_TRABAJO"),ORDEN_TRABAJODataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDEN_TRABAJO) Is Nothing) Then
                Me.tableORDEN_TRABAJO.InitVars
            End If
        End If
        Me.tableANALISIS_ELEMENTOS_PASO3 = CType(MyBase.Tables("ANALISIS_ELEMENTOS_PASO3"),ANALISIS_ELEMENTOS_PASO3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableANALISIS_ELEMENTOS_PASO3) Is Nothing) Then
                Me.tableANALISIS_ELEMENTOS_PASO3.InitVars
            End If
        End If
        Me.tableOT_SUELO_ANTECEDENTES = CType(MyBase.Tables("OT_SUELO_ANTECEDENTES"),OT_SUELO_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_SUELO_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_SUELO_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_TEJIDOS_ANTECEDENTES = CType(MyBase.Tables("OT_TEJIDOS_ANTECEDENTES"),OT_TEJIDOS_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_TEJIDOS_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_TEJIDOS_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_AGUA_ANTECEDENTES = CType(MyBase.Tables("OT_AGUA_ANTECEDENTES"),OT_AGUA_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_AGUA_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_AGUA_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_CODIFICACION_RECIBO = CType(MyBase.Tables("OT_CODIFICACION_RECIBO"),OT_CODIFICACION_RECIBODataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_CODIFICACION_RECIBO) Is Nothing) Then
                Me.tableOT_CODIFICACION_RECIBO.InitVars
            End If
        End If
        Me.tableMODIFICA_NLAB = CType(MyBase.Tables("MODIFICA_NLAB"),MODIFICA_NLABDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMODIFICA_NLAB) Is Nothing) Then
                Me.tableMODIFICA_NLAB.InitVars
            End If
        End If
        Me.tableMYEMA = CType(MyBase.Tables("MYEMA"),MYEMADataTable)
        If (initTable = true) Then
            If (Not (Me.tableMYEMA) Is Nothing) Then
                Me.tableMYEMA.InitVars
            End If
        End If
        Me.tableOT_NEMATODOS_ANTECEDENTES = CType(MyBase.Tables("OT_NEMATODOS_ANTECEDENTES"),OT_NEMATODOS_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_NEMATODOS_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_NEMATODOS_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_FITOEVALUACION_ANTECEDENTES = CType(MyBase.Tables("OT_FITOEVALUACION_ANTECEDENTES"),OT_FITOEVALUACION_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FITOEVALUACION_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_FITOEVALUACION_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_FITORESISTENCIA_ANTECEDENTES = CType(MyBase.Tables("OT_FITORESISTENCIA_ANTECEDENTES"),OT_FITORESISTENCIA_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FITORESISTENCIA_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_FITORESISTENCIA_ANTECEDENTES.InitVars
            End If
        End If
        Me.tableOT_FITOMONITOREO_ANTECEDENTES = CType(MyBase.Tables("OT_FITOMONITOREO_ANTECEDENTES"),OT_FITOMONITOREO_ANTECEDENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOT_FITOMONITOREO_ANTECEDENTES) Is Nothing) Then
                Me.tableOT_FITOMONITOREO_ANTECEDENTES.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Cjto_Orden"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Cjto_Orden.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOT_FERT_APLICADA = New OT_FERT_APLICADADataTable
        MyBase.Tables.Add(Me.tableOT_FERT_APLICADA)
        Me.tableOT_RECOMENDACION = New OT_RECOMENDACIONDataTable
        MyBase.Tables.Add(Me.tableOT_RECOMENDACION)
        Me.tableOT_FERTORG_ANTECEDENTES = New OT_FERTORG_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_FERTORG_ANTECEDENTES)
        Me.tableOT_FERTQUI_ANTECEDENTES = New OT_FERTQUI_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_FERTQUI_ANTECEDENTES)
        Me.tableOT_YEMAS_ANTECEDENTES = New OT_YEMAS_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_YEMAS_ANTECEDENTES)
        Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES = New OT_FITOPATOLOGICOS_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES)
        Me.tableIMP_RECIBO = New IMP_RECIBODataTable
        MyBase.Tables.Add(Me.tableIMP_RECIBO)
        Me.tableNOTA_YEMAS = New NOTA_YEMASDataTable
        MyBase.Tables.Add(Me.tableNOTA_YEMAS)
        Me.tableNOTA_YEMA_NLAB = New NOTA_YEMA_NLABDataTable
        MyBase.Tables.Add(Me.tableNOTA_YEMA_NLAB)
        Me.tableCONSULTA_ANALISIS = New CONSULTA_ANALISISDataTable
        MyBase.Tables.Add(Me.tableCONSULTA_ANALISIS)
        Me.tableMYEMA3 = New MYEMA3DataTable
        MyBase.Tables.Add(Me.tableMYEMA3)
        Me.tableDIG_YEMAS = New DIG_YEMASDataTable
        MyBase.Tables.Add(Me.tableDIG_YEMAS)
        Me.tableYEMAS_NLAB = New YEMAS_NLABDataTable
        MyBase.Tables.Add(Me.tableYEMAS_NLAB)
        Me.tableESTIMADOBRO = New ESTIMADOBRODataTable
        MyBase.Tables.Add(Me.tableESTIMADOBRO)
        Me.tableLARGO_CARGADOR = New LARGO_CARGADORDataTable
        MyBase.Tables.Add(Me.tableLARGO_CARGADOR)
        Me.tableANALISIS_ELEMENTOS_PASO = New ANALISIS_ELEMENTOS_PASODataTable
        MyBase.Tables.Add(Me.tableANALISIS_ELEMENTOS_PASO)
        Me.tableOTEST_NLAB = New OTEST_NLABDataTable
        MyBase.Tables.Add(Me.tableOTEST_NLAB)
        Me.tableOT_CODIFICACION = New OT_CODIFICACIONDataTable
        MyBase.Tables.Add(Me.tableOT_CODIFICACION)
        Me.tableDIGITA_RESULTADOS = New DIGITA_RESULTADOSDataTable
        MyBase.Tables.Add(Me.tableDIGITA_RESULTADOS)
        Me.tableDUPLICA_RESULTADO = New DUPLICA_RESULTADODataTable
        MyBase.Tables.Add(Me.tableDUPLICA_RESULTADO)
        Me.tableANALISIS_ELEMENTOS_PASO2 = New ANALISIS_ELEMENTOS_PASO2DataTable
        MyBase.Tables.Add(Me.tableANALISIS_ELEMENTOS_PASO2)
        Me.tableOT_FOLIAR_ANTECEDENTES = New OT_FOLIAR_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_FOLIAR_ANTECEDENTES)
        Me.tableORDEN_TRABAJO = New ORDEN_TRABAJODataTable
        MyBase.Tables.Add(Me.tableORDEN_TRABAJO)
        Me.tableANALISIS_ELEMENTOS_PASO3 = New ANALISIS_ELEMENTOS_PASO3DataTable
        MyBase.Tables.Add(Me.tableANALISIS_ELEMENTOS_PASO3)
        Me.tableOT_SUELO_ANTECEDENTES = New OT_SUELO_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_SUELO_ANTECEDENTES)
        Me.tableOT_TEJIDOS_ANTECEDENTES = New OT_TEJIDOS_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_TEJIDOS_ANTECEDENTES)
        Me.tableOT_AGUA_ANTECEDENTES = New OT_AGUA_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_AGUA_ANTECEDENTES)
        Me.tableOT_CODIFICACION_RECIBO = New OT_CODIFICACION_RECIBODataTable
        MyBase.Tables.Add(Me.tableOT_CODIFICACION_RECIBO)
        Me.tableMODIFICA_NLAB = New MODIFICA_NLABDataTable
        MyBase.Tables.Add(Me.tableMODIFICA_NLAB)
        Me.tableMYEMA = New MYEMADataTable
        MyBase.Tables.Add(Me.tableMYEMA)
        Me.tableOT_NEMATODOS_ANTECEDENTES = New OT_NEMATODOS_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_NEMATODOS_ANTECEDENTES)
        Me.tableOT_FITOEVALUACION_ANTECEDENTES = New OT_FITOEVALUACION_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_FITOEVALUACION_ANTECEDENTES)
        Me.tableOT_FITORESISTENCIA_ANTECEDENTES = New OT_FITORESISTENCIA_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_FITORESISTENCIA_ANTECEDENTES)
        Me.tableOT_FITOMONITOREO_ANTECEDENTES = New OT_FITOMONITOREO_ANTECEDENTESDataTable
        MyBase.Tables.Add(Me.tableOT_FITOMONITOREO_ANTECEDENTES)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FERT_APLICADA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_RECOMENDACION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FERTORG_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FERTQUI_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_YEMAS_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FITOPATOLOGICOS_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMP_RECIBO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNOTA_YEMAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNOTA_YEMA_NLAB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCONSULTA_ANALISIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMYEMA3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDIG_YEMAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeYEMAS_NLAB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeESTIMADOBRO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLARGO_CARGADOR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS_ELEMENTOS_PASO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOTEST_NLAB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_CODIFICACION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDIGITA_RESULTADOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDUPLICA_RESULTADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS_ELEMENTOS_PASO2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FOLIAR_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDEN_TRABAJO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeANALISIS_ELEMENTOS_PASO3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_SUELO_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_TEJIDOS_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_AGUA_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_CODIFICACION_RECIBO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMODIFICA_NLAB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMYEMA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_NEMATODOS_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FITOEVALUACION_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FITORESISTENCIA_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOT_FITOMONITOREO_ANTECEDENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Cjto_Orden = New Cjto_Orden
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub OT_FERT_APLICADARowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FERT_APLICADARowChangeEvent)
    
    Public Delegate Sub OT_RECOMENDACIONRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_RECOMENDACIONRowChangeEvent)
    
    Public Delegate Sub OT_FERTORG_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FERTORG_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_FERTQUI_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FERTQUI_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_YEMAS_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_YEMAS_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub IMP_RECIBORowChangeEventHandler(ByVal sender As Object, ByVal e As IMP_RECIBORowChangeEvent)
    
    Public Delegate Sub NOTA_YEMASRowChangeEventHandler(ByVal sender As Object, ByVal e As NOTA_YEMASRowChangeEvent)
    
    Public Delegate Sub NOTA_YEMA_NLABRowChangeEventHandler(ByVal sender As Object, ByVal e As NOTA_YEMA_NLABRowChangeEvent)
    
    Public Delegate Sub CONSULTA_ANALISISRowChangeEventHandler(ByVal sender As Object, ByVal e As CONSULTA_ANALISISRowChangeEvent)
    
    Public Delegate Sub MYEMA3RowChangeEventHandler(ByVal sender As Object, ByVal e As MYEMA3RowChangeEvent)
    
    Public Delegate Sub DIG_YEMASRowChangeEventHandler(ByVal sender As Object, ByVal e As DIG_YEMASRowChangeEvent)
    
    Public Delegate Sub YEMAS_NLABRowChangeEventHandler(ByVal sender As Object, ByVal e As YEMAS_NLABRowChangeEvent)
    
    Public Delegate Sub ESTIMADOBRORowChangeEventHandler(ByVal sender As Object, ByVal e As ESTIMADOBRORowChangeEvent)
    
    Public Delegate Sub LARGO_CARGADORRowChangeEventHandler(ByVal sender As Object, ByVal e As LARGO_CARGADORRowChangeEvent)
    
    Public Delegate Sub ANALISIS_ELEMENTOS_PASORowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS_ELEMENTOS_PASORowChangeEvent)
    
    Public Delegate Sub OTEST_NLABRowChangeEventHandler(ByVal sender As Object, ByVal e As OTEST_NLABRowChangeEvent)
    
    Public Delegate Sub OT_CODIFICACIONRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_CODIFICACIONRowChangeEvent)
    
    Public Delegate Sub DIGITA_RESULTADOSRowChangeEventHandler(ByVal sender As Object, ByVal e As DIGITA_RESULTADOSRowChangeEvent)
    
    Public Delegate Sub DUPLICA_RESULTADORowChangeEventHandler(ByVal sender As Object, ByVal e As DUPLICA_RESULTADORowChangeEvent)
    
    Public Delegate Sub ANALISIS_ELEMENTOS_PASO2RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS_ELEMENTOS_PASO2RowChangeEvent)
    
    Public Delegate Sub OT_FOLIAR_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FOLIAR_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub ORDEN_TRABAJORowChangeEventHandler(ByVal sender As Object, ByVal e As ORDEN_TRABAJORowChangeEvent)
    
    Public Delegate Sub ANALISIS_ELEMENTOS_PASO3RowChangeEventHandler(ByVal sender As Object, ByVal e As ANALISIS_ELEMENTOS_PASO3RowChangeEvent)
    
    Public Delegate Sub OT_SUELO_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_SUELO_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_TEJIDOS_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_TEJIDOS_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_AGUA_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_AGUA_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_CODIFICACION_RECIBORowChangeEventHandler(ByVal sender As Object, ByVal e As OT_CODIFICACION_RECIBORowChangeEvent)
    
    Public Delegate Sub MODIFICA_NLABRowChangeEventHandler(ByVal sender As Object, ByVal e As MODIFICA_NLABRowChangeEvent)
    
    Public Delegate Sub MYEMARowChangeEventHandler(ByVal sender As Object, ByVal e As MYEMARowChangeEvent)
    
    Public Delegate Sub OT_NEMATODOS_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_NEMATODOS_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_FITOEVALUACION_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FITOEVALUACION_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_FITORESISTENCIA_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FITORESISTENCIA_ANTECEDENTESRowChangeEvent)
    
    Public Delegate Sub OT_FITOMONITOREO_ANTECEDENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As OT_FITOMONITOREO_ANTECEDENTESRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FERT_APLICADADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnOTFAPL_N As Global.System.Data.DataColumn
        
        Private columnOTFAPL_P2O5 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_K2O As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CAO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_MGO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_S As Global.System.Data.DataColumn
        
        Private columnOTFAPL_B As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTROS As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTRO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_UREA As Global.System.Data.DataColumn
        
        Private columnOTFAPL_NITAMOCA As Global.System.Data.DataColumn
        
        Private columnOTFAPL_NITAMO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_NITPOT As Global.System.Data.DataColumn
        
        Private columnOTFAPL_NITNAK As Global.System.Data.DataColumn
        
        Private columnOTFAPL_NITNA As Global.System.Data.DataColumn
        
        Private columnOTFAPL_SULAMO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTROSN As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTRON As Global.System.Data.DataColumn
        
        Private columnOTFAPL_FOSDIA As Global.System.Data.DataColumn
        
        Private columnOTFAPL_FOSMON As Global.System.Data.DataColumn
        
        Private columnOTFAPL_SUPFOST As Global.System.Data.DataColumn
        
        Private columnOTFAPL_SUPFOSN As Global.System.Data.DataColumn
        
        Private columnOTFAPL_SUPFOSM As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTROSP As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTROP As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CLK As Global.System.Data.DataColumn
        
        Private columnOTFAPL_NIK As Global.System.Data.DataColumn
        
        Private columnOTFAPL_SUKMG As Global.System.Data.DataColumn
        
        Private columnOTFAPL_SUK As Global.System.Data.DataColumn
        
        Private columnOTFAPL_NITK As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTROSK As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTROK As Global.System.Data.DataColumn
        
        Private columnOTFAPL_FOS As Global.System.Data.DataColumn
        
        Private columnOTFAPL_FERTI As Global.System.Data.DataColumn
        
        Private columnOTFAPL_AZU As Global.System.Data.DataColumn
        
        Private columnOTFAPL_AGRO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTROA As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTROA As Global.System.Data.DataColumn
        
        Private columnOTFAPL_COMP As Global.System.Data.DataColumn
        
        Private columnOTFAPL_GUA As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTROO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTROO As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CAL As Global.System.Data.DataColumn
        
        Private columnOTFAPL_BOR As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTRO1 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTRO1 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTRO2 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTRO2 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTRO3 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTRO3 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_OTROO2 As Global.System.Data.DataColumn
        
        Private columnOTFAPL_CANOTROO2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FERT_APLICADA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_P2O5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_P2O5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_K2OColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_K2O
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CAOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CAO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_MGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_MGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTROSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTROS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_UREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_UREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NITAMOCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_NITAMOCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NITAMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_NITAMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NITPOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_NITPOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NITNAKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_NITNAK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NITNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_NITNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_SULAMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_SULAMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTROSNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTROSN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTRONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTRON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_FOSDIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_FOSDIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_FOSMONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_FOSMON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_SUPFOSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_SUPFOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_SUPFOSNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_SUPFOSN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_SUPFOSMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_SUPFOSM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTROSPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTROSP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTROPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTROP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CLKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CLK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NIKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_NIK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_SUKMGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_SUKMG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_SUKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_SUK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_NITKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_NITK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTROSKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTROSK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTROKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTROK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_FOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_FOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_FERTIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_FERTI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_AZUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_AZU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_AGROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_AGRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTROAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTROA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTROAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTROA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_GUAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_GUA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTROOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTROO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTROOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTROO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_BORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_BOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTRO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTRO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTRO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTRO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTRO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTRO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTRO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTRO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTRO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTRO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTRO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTRO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_OTROO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_OTROO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTFAPL_CANOTROO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTFAPL_CANOTROO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FERT_APLICADARow
            Get
                Return CType(Me.Rows(index),OT_FERT_APLICADARow)
            End Get
        End Property
        
        Public Event OT_FERT_APLICADARowChanging As OT_FERT_APLICADARowChangeEventHandler
        
        Public Event OT_FERT_APLICADARowChanged As OT_FERT_APLICADARowChangeEventHandler
        
        Public Event OT_FERT_APLICADARowDeleting As OT_FERT_APLICADARowChangeEventHandler
        
        Public Event OT_FERT_APLICADARowDeleted As OT_FERT_APLICADARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FERT_APLICADARow(ByVal row As OT_FERT_APLICADARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FERT_APLICADARow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal OTFAPL_N As Integer,  _
                    ByVal OTFAPL_P2O5 As Integer,  _
                    ByVal OTFAPL_K2O As Integer,  _
                    ByVal OTFAPL_CAO As Integer,  _
                    ByVal OTFAPL_MGO As Integer,  _
                    ByVal OTFAPL_S As Integer,  _
                    ByVal OTFAPL_B As Integer,  _
                    ByVal OTFAPL_OTROS As String,  _
                    ByVal OTFAPL_CANOTRO As Integer,  _
                    ByVal OTFAPL_UREA As Integer,  _
                    ByVal OTFAPL_NITAMOCA As Integer,  _
                    ByVal OTFAPL_NITAMO As Integer,  _
                    ByVal OTFAPL_NITPOT As Integer,  _
                    ByVal OTFAPL_NITNAK As Integer,  _
                    ByVal OTFAPL_NITNA As Integer,  _
                    ByVal OTFAPL_SULAMO As Integer,  _
                    ByVal OTFAPL_OTROSN As String,  _
                    ByVal OTFAPL_CANOTRON As Integer,  _
                    ByVal OTFAPL_FOSDIA As Integer,  _
                    ByVal OTFAPL_FOSMON As Integer,  _
                    ByVal OTFAPL_SUPFOST As Integer,  _
                    ByVal OTFAPL_SUPFOSN As Integer,  _
                    ByVal OTFAPL_SUPFOSM As Integer,  _
                    ByVal OTFAPL_OTROSP As String,  _
                    ByVal OTFAPL_CANOTROP As Integer,  _
                    ByVal OTFAPL_CLK As Integer,  _
                    ByVal OTFAPL_NIK As Integer,  _
                    ByVal OTFAPL_SUKMG As Integer,  _
                    ByVal OTFAPL_SUK As Integer,  _
                    ByVal OTFAPL_NITK As Integer,  _
                    ByVal OTFAPL_OTROSK As String,  _
                    ByVal OTFAPL_CANOTROK As Integer,  _
                    ByVal OTFAPL_FOS As Integer,  _
                    ByVal OTFAPL_FERTI As Integer,  _
                    ByVal OTFAPL_AZU As Integer,  _
                    ByVal OTFAPL_AGRO As Integer,  _
                    ByVal OTFAPL_OTROA As String,  _
                    ByVal OTFAPL_CANOTROA As Integer,  _
                    ByVal OTFAPL_COMP As Integer,  _
                    ByVal OTFAPL_GUA As Integer,  _
                    ByVal OTFAPL_OTROO As String,  _
                    ByVal OTFAPL_CANOTROO As Integer,  _
                    ByVal OTFAPL_CAL As Integer,  _
                    ByVal OTFAPL_BOR As Integer,  _
                    ByVal OTFAPL_OTRO1 As String,  _
                    ByVal OTFAPL_CANOTRO1 As Integer,  _
                    ByVal OTFAPL_OTRO2 As String,  _
                    ByVal OTFAPL_CANOTRO2 As Integer,  _
                    ByVal OTFAPL_OTRO3 As String,  _
                    ByVal OTFAPL_CANOTRO3 As Integer,  _
                    ByVal OTFAPL_OTROO2 As String,  _
                    ByVal OTFAPL_CANOTROO2 As Integer) As OT_FERT_APLICADARow
            Dim rowOT_FERT_APLICADARow As OT_FERT_APLICADARow = CType(Me.NewRow,OT_FERT_APLICADARow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, OTFAPL_N, OTFAPL_P2O5, OTFAPL_K2O, OTFAPL_CAO, OTFAPL_MGO, OTFAPL_S, OTFAPL_B, OTFAPL_OTROS, OTFAPL_CANOTRO, OTFAPL_UREA, OTFAPL_NITAMOCA, OTFAPL_NITAMO, OTFAPL_NITPOT, OTFAPL_NITNAK, OTFAPL_NITNA, OTFAPL_SULAMO, OTFAPL_OTROSN, OTFAPL_CANOTRON, OTFAPL_FOSDIA, OTFAPL_FOSMON, OTFAPL_SUPFOST, OTFAPL_SUPFOSN, OTFAPL_SUPFOSM, OTFAPL_OTROSP, OTFAPL_CANOTROP, OTFAPL_CLK, OTFAPL_NIK, OTFAPL_SUKMG, OTFAPL_SUK, OTFAPL_NITK, OTFAPL_OTROSK, OTFAPL_CANOTROK, OTFAPL_FOS, OTFAPL_FERTI, OTFAPL_AZU, OTFAPL_AGRO, OTFAPL_OTROA, OTFAPL_CANOTROA, OTFAPL_COMP, OTFAPL_GUA, OTFAPL_OTROO, OTFAPL_CANOTROO, OTFAPL_CAL, OTFAPL_BOR, OTFAPL_OTRO1, OTFAPL_CANOTRO1, OTFAPL_OTRO2, OTFAPL_CANOTRO2, OTFAPL_OTRO3, OTFAPL_CANOTRO3, OTFAPL_OTROO2, OTFAPL_CANOTROO2}
            rowOT_FERT_APLICADARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FERT_APLICADARow)
            Return rowOT_FERT_APLICADARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FERT_APLICADARow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FERT_APLICADARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FERT_APLICADADataTable = CType(MyBase.Clone,OT_FERT_APLICADADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FERT_APLICADADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnOTFAPL_N = MyBase.Columns("OTFAPL_N")
            Me.columnOTFAPL_P2O5 = MyBase.Columns("OTFAPL_P2O5")
            Me.columnOTFAPL_K2O = MyBase.Columns("OTFAPL_K2O")
            Me.columnOTFAPL_CAO = MyBase.Columns("OTFAPL_CAO")
            Me.columnOTFAPL_MGO = MyBase.Columns("OTFAPL_MGO")
            Me.columnOTFAPL_S = MyBase.Columns("OTFAPL_S")
            Me.columnOTFAPL_B = MyBase.Columns("OTFAPL_B")
            Me.columnOTFAPL_OTROS = MyBase.Columns("OTFAPL_OTROS")
            Me.columnOTFAPL_CANOTRO = MyBase.Columns("OTFAPL_CANOTRO")
            Me.columnOTFAPL_UREA = MyBase.Columns("OTFAPL_UREA")
            Me.columnOTFAPL_NITAMOCA = MyBase.Columns("OTFAPL_NITAMOCA")
            Me.columnOTFAPL_NITAMO = MyBase.Columns("OTFAPL_NITAMO")
            Me.columnOTFAPL_NITPOT = MyBase.Columns("OTFAPL_NITPOT")
            Me.columnOTFAPL_NITNAK = MyBase.Columns("OTFAPL_NITNAK")
            Me.columnOTFAPL_NITNA = MyBase.Columns("OTFAPL_NITNA")
            Me.columnOTFAPL_SULAMO = MyBase.Columns("OTFAPL_SULAMO")
            Me.columnOTFAPL_OTROSN = MyBase.Columns("OTFAPL_OTROSN")
            Me.columnOTFAPL_CANOTRON = MyBase.Columns("OTFAPL_CANOTRON")
            Me.columnOTFAPL_FOSDIA = MyBase.Columns("OTFAPL_FOSDIA")
            Me.columnOTFAPL_FOSMON = MyBase.Columns("OTFAPL_FOSMON")
            Me.columnOTFAPL_SUPFOST = MyBase.Columns("OTFAPL_SUPFOST")
            Me.columnOTFAPL_SUPFOSN = MyBase.Columns("OTFAPL_SUPFOSN")
            Me.columnOTFAPL_SUPFOSM = MyBase.Columns("OTFAPL_SUPFOSM")
            Me.columnOTFAPL_OTROSP = MyBase.Columns("OTFAPL_OTROSP")
            Me.columnOTFAPL_CANOTROP = MyBase.Columns("OTFAPL_CANOTROP")
            Me.columnOTFAPL_CLK = MyBase.Columns("OTFAPL_CLK")
            Me.columnOTFAPL_NIK = MyBase.Columns("OTFAPL_NIK")
            Me.columnOTFAPL_SUKMG = MyBase.Columns("OTFAPL_SUKMG")
            Me.columnOTFAPL_SUK = MyBase.Columns("OTFAPL_SUK")
            Me.columnOTFAPL_NITK = MyBase.Columns("OTFAPL_NITK")
            Me.columnOTFAPL_OTROSK = MyBase.Columns("OTFAPL_OTROSK")
            Me.columnOTFAPL_CANOTROK = MyBase.Columns("OTFAPL_CANOTROK")
            Me.columnOTFAPL_FOS = MyBase.Columns("OTFAPL_FOS")
            Me.columnOTFAPL_FERTI = MyBase.Columns("OTFAPL_FERTI")
            Me.columnOTFAPL_AZU = MyBase.Columns("OTFAPL_AZU")
            Me.columnOTFAPL_AGRO = MyBase.Columns("OTFAPL_AGRO")
            Me.columnOTFAPL_OTROA = MyBase.Columns("OTFAPL_OTROA")
            Me.columnOTFAPL_CANOTROA = MyBase.Columns("OTFAPL_CANOTROA")
            Me.columnOTFAPL_COMP = MyBase.Columns("OTFAPL_COMP")
            Me.columnOTFAPL_GUA = MyBase.Columns("OTFAPL_GUA")
            Me.columnOTFAPL_OTROO = MyBase.Columns("OTFAPL_OTROO")
            Me.columnOTFAPL_CANOTROO = MyBase.Columns("OTFAPL_CANOTROO")
            Me.columnOTFAPL_CAL = MyBase.Columns("OTFAPL_CAL")
            Me.columnOTFAPL_BOR = MyBase.Columns("OTFAPL_BOR")
            Me.columnOTFAPL_OTRO1 = MyBase.Columns("OTFAPL_OTRO1")
            Me.columnOTFAPL_CANOTRO1 = MyBase.Columns("OTFAPL_CANOTRO1")
            Me.columnOTFAPL_OTRO2 = MyBase.Columns("OTFAPL_OTRO2")
            Me.columnOTFAPL_CANOTRO2 = MyBase.Columns("OTFAPL_CANOTRO2")
            Me.columnOTFAPL_OTRO3 = MyBase.Columns("OTFAPL_OTRO3")
            Me.columnOTFAPL_CANOTRO3 = MyBase.Columns("OTFAPL_CANOTRO3")
            Me.columnOTFAPL_OTROO2 = MyBase.Columns("OTFAPL_OTROO2")
            Me.columnOTFAPL_CANOTROO2 = MyBase.Columns("OTFAPL_CANOTROO2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnOTFAPL_N = New Global.System.Data.DataColumn("OTFAPL_N", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_N)
            Me.columnOTFAPL_P2O5 = New Global.System.Data.DataColumn("OTFAPL_P2O5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_P2O5)
            Me.columnOTFAPL_K2O = New Global.System.Data.DataColumn("OTFAPL_K2O", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_K2O)
            Me.columnOTFAPL_CAO = New Global.System.Data.DataColumn("OTFAPL_CAO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CAO)
            Me.columnOTFAPL_MGO = New Global.System.Data.DataColumn("OTFAPL_MGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_MGO)
            Me.columnOTFAPL_S = New Global.System.Data.DataColumn("OTFAPL_S", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_S)
            Me.columnOTFAPL_B = New Global.System.Data.DataColumn("OTFAPL_B", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_B)
            Me.columnOTFAPL_OTROS = New Global.System.Data.DataColumn("OTFAPL_OTROS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTROS)
            Me.columnOTFAPL_CANOTRO = New Global.System.Data.DataColumn("OTFAPL_CANOTRO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTRO)
            Me.columnOTFAPL_UREA = New Global.System.Data.DataColumn("OTFAPL_UREA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_UREA)
            Me.columnOTFAPL_NITAMOCA = New Global.System.Data.DataColumn("OTFAPL_NITAMOCA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_NITAMOCA)
            Me.columnOTFAPL_NITAMO = New Global.System.Data.DataColumn("OTFAPL_NITAMO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_NITAMO)
            Me.columnOTFAPL_NITPOT = New Global.System.Data.DataColumn("OTFAPL_NITPOT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_NITPOT)
            Me.columnOTFAPL_NITNAK = New Global.System.Data.DataColumn("OTFAPL_NITNAK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_NITNAK)
            Me.columnOTFAPL_NITNA = New Global.System.Data.DataColumn("OTFAPL_NITNA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_NITNA)
            Me.columnOTFAPL_SULAMO = New Global.System.Data.DataColumn("OTFAPL_SULAMO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_SULAMO)
            Me.columnOTFAPL_OTROSN = New Global.System.Data.DataColumn("OTFAPL_OTROSN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTROSN)
            Me.columnOTFAPL_CANOTRON = New Global.System.Data.DataColumn("OTFAPL_CANOTRON", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTRON)
            Me.columnOTFAPL_FOSDIA = New Global.System.Data.DataColumn("OTFAPL_FOSDIA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_FOSDIA)
            Me.columnOTFAPL_FOSMON = New Global.System.Data.DataColumn("OTFAPL_FOSMON", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_FOSMON)
            Me.columnOTFAPL_SUPFOST = New Global.System.Data.DataColumn("OTFAPL_SUPFOST", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_SUPFOST)
            Me.columnOTFAPL_SUPFOSN = New Global.System.Data.DataColumn("OTFAPL_SUPFOSN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_SUPFOSN)
            Me.columnOTFAPL_SUPFOSM = New Global.System.Data.DataColumn("OTFAPL_SUPFOSM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_SUPFOSM)
            Me.columnOTFAPL_OTROSP = New Global.System.Data.DataColumn("OTFAPL_OTROSP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTROSP)
            Me.columnOTFAPL_CANOTROP = New Global.System.Data.DataColumn("OTFAPL_CANOTROP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTROP)
            Me.columnOTFAPL_CLK = New Global.System.Data.DataColumn("OTFAPL_CLK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CLK)
            Me.columnOTFAPL_NIK = New Global.System.Data.DataColumn("OTFAPL_NIK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_NIK)
            Me.columnOTFAPL_SUKMG = New Global.System.Data.DataColumn("OTFAPL_SUKMG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_SUKMG)
            Me.columnOTFAPL_SUK = New Global.System.Data.DataColumn("OTFAPL_SUK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_SUK)
            Me.columnOTFAPL_NITK = New Global.System.Data.DataColumn("OTFAPL_NITK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_NITK)
            Me.columnOTFAPL_OTROSK = New Global.System.Data.DataColumn("OTFAPL_OTROSK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTROSK)
            Me.columnOTFAPL_CANOTROK = New Global.System.Data.DataColumn("OTFAPL_CANOTROK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTROK)
            Me.columnOTFAPL_FOS = New Global.System.Data.DataColumn("OTFAPL_FOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_FOS)
            Me.columnOTFAPL_FERTI = New Global.System.Data.DataColumn("OTFAPL_FERTI", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_FERTI)
            Me.columnOTFAPL_AZU = New Global.System.Data.DataColumn("OTFAPL_AZU", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_AZU)
            Me.columnOTFAPL_AGRO = New Global.System.Data.DataColumn("OTFAPL_AGRO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_AGRO)
            Me.columnOTFAPL_OTROA = New Global.System.Data.DataColumn("OTFAPL_OTROA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTROA)
            Me.columnOTFAPL_CANOTROA = New Global.System.Data.DataColumn("OTFAPL_CANOTROA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTROA)
            Me.columnOTFAPL_COMP = New Global.System.Data.DataColumn("OTFAPL_COMP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_COMP)
            Me.columnOTFAPL_GUA = New Global.System.Data.DataColumn("OTFAPL_GUA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_GUA)
            Me.columnOTFAPL_OTROO = New Global.System.Data.DataColumn("OTFAPL_OTROO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTROO)
            Me.columnOTFAPL_CANOTROO = New Global.System.Data.DataColumn("OTFAPL_CANOTROO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTROO)
            Me.columnOTFAPL_CAL = New Global.System.Data.DataColumn("OTFAPL_CAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CAL)
            Me.columnOTFAPL_BOR = New Global.System.Data.DataColumn("OTFAPL_BOR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_BOR)
            Me.columnOTFAPL_OTRO1 = New Global.System.Data.DataColumn("OTFAPL_OTRO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTRO1)
            Me.columnOTFAPL_CANOTRO1 = New Global.System.Data.DataColumn("OTFAPL_CANOTRO1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTRO1)
            Me.columnOTFAPL_OTRO2 = New Global.System.Data.DataColumn("OTFAPL_OTRO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTRO2)
            Me.columnOTFAPL_CANOTRO2 = New Global.System.Data.DataColumn("OTFAPL_CANOTRO2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTRO2)
            Me.columnOTFAPL_OTRO3 = New Global.System.Data.DataColumn("OTFAPL_OTRO3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTRO3)
            Me.columnOTFAPL_CANOTRO3 = New Global.System.Data.DataColumn("OTFAPL_CANOTRO3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTRO3)
            Me.columnOTFAPL_OTROO2 = New Global.System.Data.DataColumn("OTFAPL_OTROO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_OTROO2)
            Me.columnOTFAPL_CANOTROO2 = New Global.System.Data.DataColumn("OTFAPL_CANOTROO2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTFAPL_CANOTROO2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey6", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FERT_APLICADARow() As OT_FERT_APLICADARow
            Return CType(Me.NewRow,OT_FERT_APLICADARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FERT_APLICADARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FERT_APLICADARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FERT_APLICADARowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FERT_APLICADARowChanged(Me, New OT_FERT_APLICADARowChangeEvent(CType(e.Row,OT_FERT_APLICADARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FERT_APLICADARowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FERT_APLICADARowChanging(Me, New OT_FERT_APLICADARowChangeEvent(CType(e.Row,OT_FERT_APLICADARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FERT_APLICADARowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FERT_APLICADARowDeleted(Me, New OT_FERT_APLICADARowChangeEvent(CType(e.Row,OT_FERT_APLICADARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FERT_APLICADARowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FERT_APLICADARowDeleting(Me, New OT_FERT_APLICADARowChangeEvent(CType(e.Row,OT_FERT_APLICADARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FERT_APLICADARow(ByVal row As OT_FERT_APLICADARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FERT_APLICADADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_RECOMENDACIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnOTREC_RTO_ANT As Global.System.Data.DataColumn
        
        Private columnOTREC_RTTON As Global.System.Data.DataColumn
        
        Private columnOTREC_CARGA As Global.System.Data.DataColumn
        
        Private columnOTREC_CATON As Global.System.Data.DataColumn
        
        Private columnOTREC_VIGOR As Global.System.Data.DataColumn
        
        Private columnOTREC_DENSIDAD As Global.System.Data.DataColumn
        
        Private columnOTREC_DISTANCIA1 As Global.System.Data.DataColumn
        
        Private columnOTREC_DISTANCIA2 As Global.System.Data.DataColumn
        
        Private columnOTREC_PLANTASH As Global.System.Data.DataColumn
        
        Private columnOTREC_CALIBRE As Global.System.Data.DataColumn
        
        Private columnOTREC_FAL_FIR As Global.System.Data.DataColumn
        
        Private columnOTREC_GRA_BRIX As Global.System.Data.DataColumn
        
        Private columnOTREC_FAL_COL As Global.System.Data.DataColumn
        
        Private columnOTREC_NEG_VID As Global.System.Data.DataColumn
        
        Private columnOTREC_BAY_VID As Global.System.Data.DataColumn
        
        Private columnOTREC_PAR_FRU As Global.System.Data.DataColumn
        
        Private columnOTREC_DESHIDRA As Global.System.Data.DataColumn
        
        Private columnOTREC_PRO_POST As Global.System.Data.DataColumn
        
        Private columnOTREC_OTRO As Global.System.Data.DataColumn
        
        Private columnOTREC_TEXTURA As Global.System.Data.DataColumn
        
        Private columnOTREC_PROFUNDIDAD As Global.System.Data.DataColumn
        
        Private columnOTREC_SIS_RIE As Global.System.Data.DataColumn
        
        Private columnOTREC_DRENAJE As Global.System.Data.DataColumn
        
        Private columnOTREC_COMENTARIO As Global.System.Data.DataColumn
        
        Private columnOTREC_RTO_UNI As Global.System.Data.DataColumn
        
        Private columnOTREC_CAR_UNI As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_RECOMENDACION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_RTO_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_RTO_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_RTTONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_RTTON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_CARGAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_CARGA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_CATONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_CATON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_VIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_VIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_DENSIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_DENSIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_DISTANCIA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_DISTANCIA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_DISTANCIA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_DISTANCIA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_PLANTASHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_PLANTASH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_CALIBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_CALIBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_FAL_FIRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_FAL_FIR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_GRA_BRIXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_GRA_BRIX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_FAL_COLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_FAL_COL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_NEG_VIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_NEG_VID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_BAY_VIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_BAY_VID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_PAR_FRUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_PAR_FRU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_DESHIDRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_DESHIDRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_PRO_POSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_PRO_POST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_OTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_OTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_TEXTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_TEXTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_PROFUNDIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_PROFUNDIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_SIS_RIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_SIS_RIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_DRENAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_DRENAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_COMENTARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_COMENTARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_RTO_UNIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_RTO_UNI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTREC_CAR_UNIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTREC_CAR_UNI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_RECOMENDACIONRow
            Get
                Return CType(Me.Rows(index),OT_RECOMENDACIONRow)
            End Get
        End Property
        
        Public Event OT_RECOMENDACIONRowChanging As OT_RECOMENDACIONRowChangeEventHandler
        
        Public Event OT_RECOMENDACIONRowChanged As OT_RECOMENDACIONRowChangeEventHandler
        
        Public Event OT_RECOMENDACIONRowDeleting As OT_RECOMENDACIONRowChangeEventHandler
        
        Public Event OT_RECOMENDACIONRowDeleted As OT_RECOMENDACIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_RECOMENDACIONRow(ByVal row As OT_RECOMENDACIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_RECOMENDACIONRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal OTREC_RTO_ANT As String,  _
                    ByVal OTREC_RTTON As Integer,  _
                    ByVal OTREC_CARGA As String,  _
                    ByVal OTREC_CATON As Integer,  _
                    ByVal OTREC_VIGOR As String,  _
                    ByVal OTREC_DENSIDAD As String,  _
                    ByVal OTREC_DISTANCIA1 As Integer,  _
                    ByVal OTREC_DISTANCIA2 As Integer,  _
                    ByVal OTREC_PLANTASH As Integer,  _
                    ByVal OTREC_CALIBRE As String,  _
                    ByVal OTREC_FAL_FIR As String,  _
                    ByVal OTREC_GRA_BRIX As String,  _
                    ByVal OTREC_FAL_COL As String,  _
                    ByVal OTREC_NEG_VID As String,  _
                    ByVal OTREC_BAY_VID As String,  _
                    ByVal OTREC_PAR_FRU As String,  _
                    ByVal OTREC_DESHIDRA As String,  _
                    ByVal OTREC_PRO_POST As String,  _
                    ByVal OTREC_OTRO As String,  _
                    ByVal OTREC_TEXTURA As String,  _
                    ByVal OTREC_PROFUNDIDAD As String,  _
                    ByVal OTREC_SIS_RIE As String,  _
                    ByVal OTREC_DRENAJE As String,  _
                    ByVal OTREC_COMENTARIO As String,  _
                    ByVal OTREC_RTO_UNI As String,  _
                    ByVal OTREC_CAR_UNI As String) As OT_RECOMENDACIONRow
            Dim rowOT_RECOMENDACIONRow As OT_RECOMENDACIONRow = CType(Me.NewRow,OT_RECOMENDACIONRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, OTREC_RTO_ANT, OTREC_RTTON, OTREC_CARGA, OTREC_CATON, OTREC_VIGOR, OTREC_DENSIDAD, OTREC_DISTANCIA1, OTREC_DISTANCIA2, OTREC_PLANTASH, OTREC_CALIBRE, OTREC_FAL_FIR, OTREC_GRA_BRIX, OTREC_FAL_COL, OTREC_NEG_VID, OTREC_BAY_VID, OTREC_PAR_FRU, OTREC_DESHIDRA, OTREC_PRO_POST, OTREC_OTRO, OTREC_TEXTURA, OTREC_PROFUNDIDAD, OTREC_SIS_RIE, OTREC_DRENAJE, OTREC_COMENTARIO, OTREC_RTO_UNI, OTREC_CAR_UNI}
            rowOT_RECOMENDACIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_RECOMENDACIONRow)
            Return rowOT_RECOMENDACIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_RECOMENDACIONRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_RECOMENDACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_RECOMENDACIONDataTable = CType(MyBase.Clone,OT_RECOMENDACIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_RECOMENDACIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnOTREC_RTO_ANT = MyBase.Columns("OTREC_RTO_ANT")
            Me.columnOTREC_RTTON = MyBase.Columns("OTREC_RTTON")
            Me.columnOTREC_CARGA = MyBase.Columns("OTREC_CARGA")
            Me.columnOTREC_CATON = MyBase.Columns("OTREC_CATON")
            Me.columnOTREC_VIGOR = MyBase.Columns("OTREC_VIGOR")
            Me.columnOTREC_DENSIDAD = MyBase.Columns("OTREC_DENSIDAD")
            Me.columnOTREC_DISTANCIA1 = MyBase.Columns("OTREC_DISTANCIA1")
            Me.columnOTREC_DISTANCIA2 = MyBase.Columns("OTREC_DISTANCIA2")
            Me.columnOTREC_PLANTASH = MyBase.Columns("OTREC_PLANTASH")
            Me.columnOTREC_CALIBRE = MyBase.Columns("OTREC_CALIBRE")
            Me.columnOTREC_FAL_FIR = MyBase.Columns("OTREC_FAL_FIR")
            Me.columnOTREC_GRA_BRIX = MyBase.Columns("OTREC_GRA_BRIX")
            Me.columnOTREC_FAL_COL = MyBase.Columns("OTREC_FAL_COL")
            Me.columnOTREC_NEG_VID = MyBase.Columns("OTREC_NEG_VID")
            Me.columnOTREC_BAY_VID = MyBase.Columns("OTREC_BAY_VID")
            Me.columnOTREC_PAR_FRU = MyBase.Columns("OTREC_PAR_FRU")
            Me.columnOTREC_DESHIDRA = MyBase.Columns("OTREC_DESHIDRA")
            Me.columnOTREC_PRO_POST = MyBase.Columns("OTREC_PRO_POST")
            Me.columnOTREC_OTRO = MyBase.Columns("OTREC_OTRO")
            Me.columnOTREC_TEXTURA = MyBase.Columns("OTREC_TEXTURA")
            Me.columnOTREC_PROFUNDIDAD = MyBase.Columns("OTREC_PROFUNDIDAD")
            Me.columnOTREC_SIS_RIE = MyBase.Columns("OTREC_SIS_RIE")
            Me.columnOTREC_DRENAJE = MyBase.Columns("OTREC_DRENAJE")
            Me.columnOTREC_COMENTARIO = MyBase.Columns("OTREC_COMENTARIO")
            Me.columnOTREC_RTO_UNI = MyBase.Columns("OTREC_RTO_UNI")
            Me.columnOTREC_CAR_UNI = MyBase.Columns("OTREC_CAR_UNI")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnOTREC_RTO_ANT = New Global.System.Data.DataColumn("OTREC_RTO_ANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_RTO_ANT)
            Me.columnOTREC_RTTON = New Global.System.Data.DataColumn("OTREC_RTTON", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_RTTON)
            Me.columnOTREC_CARGA = New Global.System.Data.DataColumn("OTREC_CARGA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_CARGA)
            Me.columnOTREC_CATON = New Global.System.Data.DataColumn("OTREC_CATON", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_CATON)
            Me.columnOTREC_VIGOR = New Global.System.Data.DataColumn("OTREC_VIGOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_VIGOR)
            Me.columnOTREC_DENSIDAD = New Global.System.Data.DataColumn("OTREC_DENSIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_DENSIDAD)
            Me.columnOTREC_DISTANCIA1 = New Global.System.Data.DataColumn("OTREC_DISTANCIA1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_DISTANCIA1)
            Me.columnOTREC_DISTANCIA2 = New Global.System.Data.DataColumn("OTREC_DISTANCIA2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_DISTANCIA2)
            Me.columnOTREC_PLANTASH = New Global.System.Data.DataColumn("OTREC_PLANTASH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_PLANTASH)
            Me.columnOTREC_CALIBRE = New Global.System.Data.DataColumn("OTREC_CALIBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_CALIBRE)
            Me.columnOTREC_FAL_FIR = New Global.System.Data.DataColumn("OTREC_FAL_FIR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_FAL_FIR)
            Me.columnOTREC_GRA_BRIX = New Global.System.Data.DataColumn("OTREC_GRA_BRIX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_GRA_BRIX)
            Me.columnOTREC_FAL_COL = New Global.System.Data.DataColumn("OTREC_FAL_COL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_FAL_COL)
            Me.columnOTREC_NEG_VID = New Global.System.Data.DataColumn("OTREC_NEG_VID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_NEG_VID)
            Me.columnOTREC_BAY_VID = New Global.System.Data.DataColumn("OTREC_BAY_VID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_BAY_VID)
            Me.columnOTREC_PAR_FRU = New Global.System.Data.DataColumn("OTREC_PAR_FRU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_PAR_FRU)
            Me.columnOTREC_DESHIDRA = New Global.System.Data.DataColumn("OTREC_DESHIDRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_DESHIDRA)
            Me.columnOTREC_PRO_POST = New Global.System.Data.DataColumn("OTREC_PRO_POST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_PRO_POST)
            Me.columnOTREC_OTRO = New Global.System.Data.DataColumn("OTREC_OTRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_OTRO)
            Me.columnOTREC_TEXTURA = New Global.System.Data.DataColumn("OTREC_TEXTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_TEXTURA)
            Me.columnOTREC_PROFUNDIDAD = New Global.System.Data.DataColumn("OTREC_PROFUNDIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_PROFUNDIDAD)
            Me.columnOTREC_SIS_RIE = New Global.System.Data.DataColumn("OTREC_SIS_RIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_SIS_RIE)
            Me.columnOTREC_DRENAJE = New Global.System.Data.DataColumn("OTREC_DRENAJE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_DRENAJE)
            Me.columnOTREC_COMENTARIO = New Global.System.Data.DataColumn("OTREC_COMENTARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_COMENTARIO)
            Me.columnOTREC_RTO_UNI = New Global.System.Data.DataColumn("OTREC_RTO_UNI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_RTO_UNI)
            Me.columnOTREC_CAR_UNI = New Global.System.Data.DataColumn("OTREC_CAR_UNI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTREC_CAR_UNI)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey5", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_RECOMENDACIONRow() As OT_RECOMENDACIONRow
            Return CType(Me.NewRow,OT_RECOMENDACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_RECOMENDACIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_RECOMENDACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_RECOMENDACIONRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_RECOMENDACIONRowChanged(Me, New OT_RECOMENDACIONRowChangeEvent(CType(e.Row,OT_RECOMENDACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_RECOMENDACIONRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_RECOMENDACIONRowChanging(Me, New OT_RECOMENDACIONRowChangeEvent(CType(e.Row,OT_RECOMENDACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_RECOMENDACIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_RECOMENDACIONRowDeleted(Me, New OT_RECOMENDACIONRowChangeEvent(CType(e.Row,OT_RECOMENDACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_RECOMENDACIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_RECOMENDACIONRowDeleting(Me, New OT_RECOMENDACIONRowChangeEvent(CType(e.Row,OT_RECOMENDACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_RECOMENDACIONRow(ByVal row As OT_RECOMENDACIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_RECOMENDACIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FERTORG_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnFEOANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnFEOANT_FECHAMU As Global.System.Data.DataColumn
        
        Private columnFEOANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnFEOANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnFEOANT_IDENTIFICACION1 As Global.System.Data.DataColumn
        
        Private columnFEOANT_IDENTIFICACION2 As Global.System.Data.DataColumn
        
        Private columnFEOANT_TIPOFERTI As Global.System.Data.DataColumn
        
        Private columnFEOANT_OBSERVACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FERTORG_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_FECHAMUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_FECHAMU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_IDENTIFICACION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_IDENTIFICACION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_IDENTIFICACION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_IDENTIFICACION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_TIPOFERTIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_TIPOFERTI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEOANT_OBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEOANT_OBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FERTORG_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_FERTORG_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_FERTORG_ANTECEDENTESRowChanging As OT_FERTORG_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FERTORG_ANTECEDENTESRowChanged As OT_FERTORG_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FERTORG_ANTECEDENTESRowDeleting As OT_FERTORG_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FERTORG_ANTECEDENTESRowDeleted As OT_FERTORG_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FERTORG_ANTECEDENTESRow(ByVal row As OT_FERTORG_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FERTORG_ANTECEDENTESRow(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer, ByVal FEOANT_MUESTREADOR As String, ByVal FEOANT_FECHAMU As Date, ByVal FEOANT_PREDIO As String, ByVal FEOANT_LOCALIDAD As String, ByVal FEOANT_IDENTIFICACION1 As String, ByVal FEOANT_IDENTIFICACION2 As String, ByVal FEOANT_TIPOFERTI As String, ByVal FEOANT_OBSERVACION As String) As OT_FERTORG_ANTECEDENTESRow
            Dim rowOT_FERTORG_ANTECEDENTESRow As OT_FERTORG_ANTECEDENTESRow = CType(Me.NewRow,OT_FERTORG_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, FEOANT_MUESTREADOR, FEOANT_FECHAMU, FEOANT_PREDIO, FEOANT_LOCALIDAD, FEOANT_IDENTIFICACION1, FEOANT_IDENTIFICACION2, FEOANT_TIPOFERTI, FEOANT_OBSERVACION}
            rowOT_FERTORG_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FERTORG_ANTECEDENTESRow)
            Return rowOT_FERTORG_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FERTORG_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FERTORG_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FERTORG_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_FERTORG_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FERTORG_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnFEOANT_MUESTREADOR = MyBase.Columns("FEOANT_MUESTREADOR")
            Me.columnFEOANT_FECHAMU = MyBase.Columns("FEOANT_FECHAMU")
            Me.columnFEOANT_PREDIO = MyBase.Columns("FEOANT_PREDIO")
            Me.columnFEOANT_LOCALIDAD = MyBase.Columns("FEOANT_LOCALIDAD")
            Me.columnFEOANT_IDENTIFICACION1 = MyBase.Columns("FEOANT_IDENTIFICACION1")
            Me.columnFEOANT_IDENTIFICACION2 = MyBase.Columns("FEOANT_IDENTIFICACION2")
            Me.columnFEOANT_TIPOFERTI = MyBase.Columns("FEOANT_TIPOFERTI")
            Me.columnFEOANT_OBSERVACION = MyBase.Columns("FEOANT_OBSERVACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnFEOANT_MUESTREADOR = New Global.System.Data.DataColumn("FEOANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_MUESTREADOR)
            Me.columnFEOANT_FECHAMU = New Global.System.Data.DataColumn("FEOANT_FECHAMU", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_FECHAMU)
            Me.columnFEOANT_PREDIO = New Global.System.Data.DataColumn("FEOANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_PREDIO)
            Me.columnFEOANT_LOCALIDAD = New Global.System.Data.DataColumn("FEOANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_LOCALIDAD)
            Me.columnFEOANT_IDENTIFICACION1 = New Global.System.Data.DataColumn("FEOANT_IDENTIFICACION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_IDENTIFICACION1)
            Me.columnFEOANT_IDENTIFICACION2 = New Global.System.Data.DataColumn("FEOANT_IDENTIFICACION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_IDENTIFICACION2)
            Me.columnFEOANT_TIPOFERTI = New Global.System.Data.DataColumn("FEOANT_TIPOFERTI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_TIPOFERTI)
            Me.columnFEOANT_OBSERVACION = New Global.System.Data.DataColumn("FEOANT_OBSERVACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEOANT_OBSERVACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey9", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FERTORG_ANTECEDENTESRow() As OT_FERTORG_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_FERTORG_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FERTORG_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FERTORG_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FERTORG_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FERTORG_ANTECEDENTESRowChanged(Me, New OT_FERTORG_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTORG_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FERTORG_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FERTORG_ANTECEDENTESRowChanging(Me, New OT_FERTORG_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTORG_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FERTORG_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FERTORG_ANTECEDENTESRowDeleted(Me, New OT_FERTORG_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTORG_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FERTORG_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FERTORG_ANTECEDENTESRowDeleting(Me, New OT_FERTORG_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTORG_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FERTORG_ANTECEDENTESRow(ByVal row As OT_FERTORG_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FERTORG_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FERTQUI_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnFEQANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnFEQANT_FECHAMU As Global.System.Data.DataColumn
        
        Private columnFEQANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnFEQANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnFEQANT_IDENTIFICACION1 As Global.System.Data.DataColumn
        
        Private columnFEQANT_IDENTIFICACION2 As Global.System.Data.DataColumn
        
        Private columnFEQANT_TIPOFERTI As Global.System.Data.DataColumn
        
        Private columnFEQANT_OBSERVACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FERTQUI_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_FECHAMUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_FECHAMU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_IDENTIFICACION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_IDENTIFICACION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_IDENTIFICACION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_IDENTIFICACION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_TIPOFERTIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_TIPOFERTI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEQANT_OBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEQANT_OBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FERTQUI_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_FERTQUI_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_FERTQUI_ANTECEDENTESRowChanging As OT_FERTQUI_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FERTQUI_ANTECEDENTESRowChanged As OT_FERTQUI_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FERTQUI_ANTECEDENTESRowDeleting As OT_FERTQUI_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FERTQUI_ANTECEDENTESRowDeleted As OT_FERTQUI_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FERTQUI_ANTECEDENTESRow(ByVal row As OT_FERTQUI_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FERTQUI_ANTECEDENTESRow(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer, ByVal FEQANT_MUESTREADOR As String, ByVal FEQANT_FECHAMU As Date, ByVal FEQANT_PREDIO As String, ByVal FEQANT_LOCALIDAD As String, ByVal FEQANT_IDENTIFICACION1 As String, ByVal FEQANT_IDENTIFICACION2 As String, ByVal FEQANT_TIPOFERTI As String, ByVal FEQANT_OBSERVACION As String) As OT_FERTQUI_ANTECEDENTESRow
            Dim rowOT_FERTQUI_ANTECEDENTESRow As OT_FERTQUI_ANTECEDENTESRow = CType(Me.NewRow,OT_FERTQUI_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, FEQANT_MUESTREADOR, FEQANT_FECHAMU, FEQANT_PREDIO, FEQANT_LOCALIDAD, FEQANT_IDENTIFICACION1, FEQANT_IDENTIFICACION2, FEQANT_TIPOFERTI, FEQANT_OBSERVACION}
            rowOT_FERTQUI_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FERTQUI_ANTECEDENTESRow)
            Return rowOT_FERTQUI_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FERTQUI_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FERTQUI_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FERTQUI_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_FERTQUI_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FERTQUI_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnFEQANT_MUESTREADOR = MyBase.Columns("FEQANT_MUESTREADOR")
            Me.columnFEQANT_FECHAMU = MyBase.Columns("FEQANT_FECHAMU")
            Me.columnFEQANT_PREDIO = MyBase.Columns("FEQANT_PREDIO")
            Me.columnFEQANT_LOCALIDAD = MyBase.Columns("FEQANT_LOCALIDAD")
            Me.columnFEQANT_IDENTIFICACION1 = MyBase.Columns("FEQANT_IDENTIFICACION1")
            Me.columnFEQANT_IDENTIFICACION2 = MyBase.Columns("FEQANT_IDENTIFICACION2")
            Me.columnFEQANT_TIPOFERTI = MyBase.Columns("FEQANT_TIPOFERTI")
            Me.columnFEQANT_OBSERVACION = MyBase.Columns("FEQANT_OBSERVACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnFEQANT_MUESTREADOR = New Global.System.Data.DataColumn("FEQANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_MUESTREADOR)
            Me.columnFEQANT_FECHAMU = New Global.System.Data.DataColumn("FEQANT_FECHAMU", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_FECHAMU)
            Me.columnFEQANT_PREDIO = New Global.System.Data.DataColumn("FEQANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_PREDIO)
            Me.columnFEQANT_LOCALIDAD = New Global.System.Data.DataColumn("FEQANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_LOCALIDAD)
            Me.columnFEQANT_IDENTIFICACION1 = New Global.System.Data.DataColumn("FEQANT_IDENTIFICACION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_IDENTIFICACION1)
            Me.columnFEQANT_IDENTIFICACION2 = New Global.System.Data.DataColumn("FEQANT_IDENTIFICACION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_IDENTIFICACION2)
            Me.columnFEQANT_TIPOFERTI = New Global.System.Data.DataColumn("FEQANT_TIPOFERTI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_TIPOFERTI)
            Me.columnFEQANT_OBSERVACION = New Global.System.Data.DataColumn("FEQANT_OBSERVACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEQANT_OBSERVACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey10", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FERTQUI_ANTECEDENTESRow() As OT_FERTQUI_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_FERTQUI_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FERTQUI_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FERTQUI_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FERTQUI_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FERTQUI_ANTECEDENTESRowChanged(Me, New OT_FERTQUI_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTQUI_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FERTQUI_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FERTQUI_ANTECEDENTESRowChanging(Me, New OT_FERTQUI_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTQUI_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FERTQUI_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FERTQUI_ANTECEDENTESRowDeleted(Me, New OT_FERTQUI_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTQUI_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FERTQUI_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FERTQUI_ANTECEDENTESRowDeleting(Me, New OT_FERTQUI_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FERTQUI_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FERTQUI_ANTECEDENTESRow(ByVal row As OT_FERTQUI_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FERTQUI_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_YEMAS_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnYEMANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnYEMANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnESPECIE As Global.System.Data.DataColumn
        
        Private columnVARIEDAD As Global.System.Data.DataColumn
        
        Private columnTEJIDO As Global.System.Data.DataColumn
        
        Private columnYEMANT_EDAD As Global.System.Data.DataColumn
        
        Private columnYEMANT_CUARTEL1 As Global.System.Data.DataColumn
        
        Private columnYEMANT_CUARTEL2 As Global.System.Data.DataColumn
        
        Private columnYEMANT_RTO_ANT As Global.System.Data.DataColumn
        
        Private columnYEMANT_CARGA As Global.System.Data.DataColumn
        
        Private columnYEMANT_VIGOR As Global.System.Data.DataColumn
        
        Private columnYEMANT_DENSIDAD As Global.System.Data.DataColumn
        
        Private columnYEMANT_APARIENCIA As Global.System.Data.DataColumn
        
        Private columnYEMANT_CARGADORES As Global.System.Data.DataColumn
        
        Private columnYEMANT_YEMAS As Global.System.Data.DataColumn
        
        Private columnYEMANT_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnYEMANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnYEMANT_FMUESTREO As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_YEMAS_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VARIEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_EDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_EDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_CUARTEL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_CUARTEL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_CUARTEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_CUARTEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_RTO_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_RTO_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_CARGAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_CARGA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_VIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_VIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_DENSIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_DENSIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_APARIENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_APARIENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_CARGADORESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_CARGADORES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_YEMASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_YEMAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMANT_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMANT_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_YEMAS_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_YEMAS_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_YEMAS_ANTECEDENTESRowChanging As OT_YEMAS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_YEMAS_ANTECEDENTESRowChanged As OT_YEMAS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_YEMAS_ANTECEDENTESRowDeleting As OT_YEMAS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_YEMAS_ANTECEDENTESRowDeleted As OT_YEMAS_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_YEMAS_ANTECEDENTESRow(ByVal row As OT_YEMAS_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_YEMAS_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal YEMANT_PREDIO As String,  _
                    ByVal YEMANT_LOCALIDAD As String,  _
                    ByVal ESPECIE As String,  _
                    ByVal VARIEDAD As String,  _
                    ByVal TEJIDO As String,  _
                    ByVal YEMANT_EDAD As String,  _
                    ByVal YEMANT_CUARTEL1 As String,  _
                    ByVal YEMANT_CUARTEL2 As String,  _
                    ByVal YEMANT_RTO_ANT As String,  _
                    ByVal YEMANT_CARGA As String,  _
                    ByVal YEMANT_VIGOR As String,  _
                    ByVal YEMANT_DENSIDAD As String,  _
                    ByVal YEMANT_APARIENCIA As String,  _
                    ByVal YEMANT_CARGADORES As Integer,  _
                    ByVal YEMANT_YEMAS As Integer,  _
                    ByVal YEMANT_OBSERVACIONES As String,  _
                    ByVal YEMANT_MUESTREADOR As String,  _
                    ByVal YEMANT_FMUESTREO As Date,  _
                    ByVal NLAB_ESTADO As String) As OT_YEMAS_ANTECEDENTESRow
            Dim rowOT_YEMAS_ANTECEDENTESRow As OT_YEMAS_ANTECEDENTESRow = CType(Me.NewRow,OT_YEMAS_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, YEMANT_PREDIO, YEMANT_LOCALIDAD, ESPECIE, VARIEDAD, TEJIDO, YEMANT_EDAD, YEMANT_CUARTEL1, YEMANT_CUARTEL2, YEMANT_RTO_ANT, YEMANT_CARGA, YEMANT_VIGOR, YEMANT_DENSIDAD, YEMANT_APARIENCIA, YEMANT_CARGADORES, YEMANT_YEMAS, YEMANT_OBSERVACIONES, YEMANT_MUESTREADOR, YEMANT_FMUESTREO, NLAB_ESTADO}
            rowOT_YEMAS_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_YEMAS_ANTECEDENTESRow)
            Return rowOT_YEMAS_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_YEMAS_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_YEMAS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_YEMAS_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_YEMAS_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_YEMAS_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnYEMANT_PREDIO = MyBase.Columns("YEMANT_PREDIO")
            Me.columnYEMANT_LOCALIDAD = MyBase.Columns("YEMANT_LOCALIDAD")
            Me.columnESPECIE = MyBase.Columns("ESPECIE")
            Me.columnVARIEDAD = MyBase.Columns("VARIEDAD")
            Me.columnTEJIDO = MyBase.Columns("TEJIDO")
            Me.columnYEMANT_EDAD = MyBase.Columns("YEMANT_EDAD")
            Me.columnYEMANT_CUARTEL1 = MyBase.Columns("YEMANT_CUARTEL1")
            Me.columnYEMANT_CUARTEL2 = MyBase.Columns("YEMANT_CUARTEL2")
            Me.columnYEMANT_RTO_ANT = MyBase.Columns("YEMANT_RTO_ANT")
            Me.columnYEMANT_CARGA = MyBase.Columns("YEMANT_CARGA")
            Me.columnYEMANT_VIGOR = MyBase.Columns("YEMANT_VIGOR")
            Me.columnYEMANT_DENSIDAD = MyBase.Columns("YEMANT_DENSIDAD")
            Me.columnYEMANT_APARIENCIA = MyBase.Columns("YEMANT_APARIENCIA")
            Me.columnYEMANT_CARGADORES = MyBase.Columns("YEMANT_CARGADORES")
            Me.columnYEMANT_YEMAS = MyBase.Columns("YEMANT_YEMAS")
            Me.columnYEMANT_OBSERVACIONES = MyBase.Columns("YEMANT_OBSERVACIONES")
            Me.columnYEMANT_MUESTREADOR = MyBase.Columns("YEMANT_MUESTREADOR")
            Me.columnYEMANT_FMUESTREO = MyBase.Columns("YEMANT_FMUESTREO")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnYEMANT_PREDIO = New Global.System.Data.DataColumn("YEMANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_PREDIO)
            Me.columnYEMANT_LOCALIDAD = New Global.System.Data.DataColumn("YEMANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_LOCALIDAD)
            Me.columnESPECIE = New Global.System.Data.DataColumn("ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESPECIE)
            Me.columnVARIEDAD = New Global.System.Data.DataColumn("VARIEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIEDAD)
            Me.columnTEJIDO = New Global.System.Data.DataColumn("TEJIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJIDO)
            Me.columnYEMANT_EDAD = New Global.System.Data.DataColumn("YEMANT_EDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_EDAD)
            Me.columnYEMANT_CUARTEL1 = New Global.System.Data.DataColumn("YEMANT_CUARTEL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_CUARTEL1)
            Me.columnYEMANT_CUARTEL2 = New Global.System.Data.DataColumn("YEMANT_CUARTEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_CUARTEL2)
            Me.columnYEMANT_RTO_ANT = New Global.System.Data.DataColumn("YEMANT_RTO_ANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_RTO_ANT)
            Me.columnYEMANT_CARGA = New Global.System.Data.DataColumn("YEMANT_CARGA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_CARGA)
            Me.columnYEMANT_VIGOR = New Global.System.Data.DataColumn("YEMANT_VIGOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_VIGOR)
            Me.columnYEMANT_DENSIDAD = New Global.System.Data.DataColumn("YEMANT_DENSIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_DENSIDAD)
            Me.columnYEMANT_APARIENCIA = New Global.System.Data.DataColumn("YEMANT_APARIENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_APARIENCIA)
            Me.columnYEMANT_CARGADORES = New Global.System.Data.DataColumn("YEMANT_CARGADORES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_CARGADORES)
            Me.columnYEMANT_YEMAS = New Global.System.Data.DataColumn("YEMANT_YEMAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_YEMAS)
            Me.columnYEMANT_OBSERVACIONES = New Global.System.Data.DataColumn("YEMANT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_OBSERVACIONES)
            Me.columnYEMANT_MUESTREADOR = New Global.System.Data.DataColumn("YEMANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_MUESTREADOR)
            Me.columnYEMANT_FMUESTREO = New Global.System.Data.DataColumn("YEMANT_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMANT_FMUESTREO)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey11", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_YEMAS_ANTECEDENTESRow() As OT_YEMAS_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_YEMAS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_YEMAS_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_YEMAS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_YEMAS_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_YEMAS_ANTECEDENTESRowChanged(Me, New OT_YEMAS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_YEMAS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_YEMAS_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_YEMAS_ANTECEDENTESRowChanging(Me, New OT_YEMAS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_YEMAS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_YEMAS_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_YEMAS_ANTECEDENTESRowDeleted(Me, New OT_YEMAS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_YEMAS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_YEMAS_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_YEMAS_ANTECEDENTESRowDeleting(Me, New OT_YEMAS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_YEMAS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_YEMAS_ANTECEDENTESRow(ByVal row As OT_YEMAS_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_YEMAS_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FITOPATOLOGICOS_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnFITANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnFITANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnFITANT_TMUESTRA As Global.System.Data.DataColumn
        
        Private columnFITANT_TEJIDO As Global.System.Data.DataColumn
        
        Private columnFITANT_ESPECIE As Global.System.Data.DataColumn
        
        Private columnFITANT_VARIEDAD As Global.System.Data.DataColumn
        
        Private columnFITANT_EDAD As Global.System.Data.DataColumn
        
        Private columnFITANT_IDENTIFICACION1 As Global.System.Data.DataColumn
        
        Private columnFITANT_IDENTIFICACION2 As Global.System.Data.DataColumn
        
        Private columnFITANT_OBSERVACION As Global.System.Data.DataColumn
        
        Private columnFITANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnFITANT_FMUESTREO As Global.System.Data.DataColumn
        
        Private columnFITANT_HMUESTREO As Global.System.Data.DataColumn
        
        Private columnFITANT_SISTOMATOLOGIA As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FITOPATOLOGICOS_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_TMUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_TMUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_TEJIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_TEJIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_VARIEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_VARIEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_EDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_EDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_IDENTIFICACION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_IDENTIFICACION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_IDENTIFICACION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_IDENTIFICACION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_OBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_OBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_HMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_HMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITANT_SISTOMATOLOGIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITANT_SISTOMATOLOGIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FITOPATOLOGICOS_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_FITOPATOLOGICOS_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_FITOPATOLOGICOS_ANTECEDENTESRowChanging As OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOPATOLOGICOS_ANTECEDENTESRowChanged As OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOPATOLOGICOS_ANTECEDENTESRowDeleting As OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOPATOLOGICOS_ANTECEDENTESRowDeleted As OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FITOPATOLOGICOS_ANTECEDENTESRow(ByVal row As OT_FITOPATOLOGICOS_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FITOPATOLOGICOS_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal FITANT_PREDIO As String,  _
                    ByVal FITANT_LOCALIDAD As String,  _
                    ByVal FITANT_TMUESTRA As String,  _
                    ByVal FITANT_TEJIDO As String,  _
                    ByVal FITANT_ESPECIE As String,  _
                    ByVal FITANT_VARIEDAD As String,  _
                    ByVal FITANT_EDAD As String,  _
                    ByVal FITANT_IDENTIFICACION1 As String,  _
                    ByVal FITANT_IDENTIFICACION2 As String,  _
                    ByVal FITANT_OBSERVACION As String,  _
                    ByVal FITANT_MUESTREADOR As String,  _
                    ByVal FITANT_FMUESTREO As Date,  _
                    ByVal FITANT_HMUESTREO As String,  _
                    ByVal FITANT_SISTOMATOLOGIA As String,  _
                    ByVal NLAB_ESTADO As String) As OT_FITOPATOLOGICOS_ANTECEDENTESRow
            Dim rowOT_FITOPATOLOGICOS_ANTECEDENTESRow As OT_FITOPATOLOGICOS_ANTECEDENTESRow = CType(Me.NewRow,OT_FITOPATOLOGICOS_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, FITANT_PREDIO, FITANT_LOCALIDAD, FITANT_TMUESTRA, FITANT_TEJIDO, FITANT_ESPECIE, FITANT_VARIEDAD, FITANT_EDAD, FITANT_IDENTIFICACION1, FITANT_IDENTIFICACION2, FITANT_OBSERVACION, FITANT_MUESTREADOR, FITANT_FMUESTREO, FITANT_HMUESTREO, FITANT_SISTOMATOLOGIA, NLAB_ESTADO}
            rowOT_FITOPATOLOGICOS_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FITOPATOLOGICOS_ANTECEDENTESRow)
            Return rowOT_FITOPATOLOGICOS_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FITOPATOLOGICOS_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FITOPATOLOGICOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FITOPATOLOGICOS_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_FITOPATOLOGICOS_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FITOPATOLOGICOS_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnFITANT_PREDIO = MyBase.Columns("FITANT_PREDIO")
            Me.columnFITANT_LOCALIDAD = MyBase.Columns("FITANT_LOCALIDAD")
            Me.columnFITANT_TMUESTRA = MyBase.Columns("FITANT_TMUESTRA")
            Me.columnFITANT_TEJIDO = MyBase.Columns("FITANT_TEJIDO")
            Me.columnFITANT_ESPECIE = MyBase.Columns("FITANT_ESPECIE")
            Me.columnFITANT_VARIEDAD = MyBase.Columns("FITANT_VARIEDAD")
            Me.columnFITANT_EDAD = MyBase.Columns("FITANT_EDAD")
            Me.columnFITANT_IDENTIFICACION1 = MyBase.Columns("FITANT_IDENTIFICACION1")
            Me.columnFITANT_IDENTIFICACION2 = MyBase.Columns("FITANT_IDENTIFICACION2")
            Me.columnFITANT_OBSERVACION = MyBase.Columns("FITANT_OBSERVACION")
            Me.columnFITANT_MUESTREADOR = MyBase.Columns("FITANT_MUESTREADOR")
            Me.columnFITANT_FMUESTREO = MyBase.Columns("FITANT_FMUESTREO")
            Me.columnFITANT_HMUESTREO = MyBase.Columns("FITANT_HMUESTREO")
            Me.columnFITANT_SISTOMATOLOGIA = MyBase.Columns("FITANT_SISTOMATOLOGIA")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnFITANT_PREDIO = New Global.System.Data.DataColumn("FITANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_PREDIO)
            Me.columnFITANT_LOCALIDAD = New Global.System.Data.DataColumn("FITANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_LOCALIDAD)
            Me.columnFITANT_TMUESTRA = New Global.System.Data.DataColumn("FITANT_TMUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_TMUESTRA)
            Me.columnFITANT_TEJIDO = New Global.System.Data.DataColumn("FITANT_TEJIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_TEJIDO)
            Me.columnFITANT_ESPECIE = New Global.System.Data.DataColumn("FITANT_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_ESPECIE)
            Me.columnFITANT_VARIEDAD = New Global.System.Data.DataColumn("FITANT_VARIEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_VARIEDAD)
            Me.columnFITANT_EDAD = New Global.System.Data.DataColumn("FITANT_EDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_EDAD)
            Me.columnFITANT_IDENTIFICACION1 = New Global.System.Data.DataColumn("FITANT_IDENTIFICACION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_IDENTIFICACION1)
            Me.columnFITANT_IDENTIFICACION2 = New Global.System.Data.DataColumn("FITANT_IDENTIFICACION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_IDENTIFICACION2)
            Me.columnFITANT_OBSERVACION = New Global.System.Data.DataColumn("FITANT_OBSERVACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_OBSERVACION)
            Me.columnFITANT_MUESTREADOR = New Global.System.Data.DataColumn("FITANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_MUESTREADOR)
            Me.columnFITANT_FMUESTREO = New Global.System.Data.DataColumn("FITANT_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_FMUESTREO)
            Me.columnFITANT_HMUESTREO = New Global.System.Data.DataColumn("FITANT_HMUESTREO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_HMUESTREO)
            Me.columnFITANT_SISTOMATOLOGIA = New Global.System.Data.DataColumn("FITANT_SISTOMATOLOGIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITANT_SISTOMATOLOGIA)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey12", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FITOPATOLOGICOS_ANTECEDENTESRow() As OT_FITOPATOLOGICOS_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_FITOPATOLOGICOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FITOPATOLOGICOS_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FITOPATOLOGICOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FITOPATOLOGICOS_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FITOPATOLOGICOS_ANTECEDENTESRowChanged(Me, New OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOPATOLOGICOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FITOPATOLOGICOS_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FITOPATOLOGICOS_ANTECEDENTESRowChanging(Me, New OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOPATOLOGICOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FITOPATOLOGICOS_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FITOPATOLOGICOS_ANTECEDENTESRowDeleted(Me, New OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOPATOLOGICOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FITOPATOLOGICOS_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FITOPATOLOGICOS_ANTECEDENTESRowDeleting(Me, New OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOPATOLOGICOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FITOPATOLOGICOS_ANTECEDENTESRow(ByVal row As OT_FITOPATOLOGICOS_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FITOPATOLOGICOS_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMP_RECIBODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNUMLINEA As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnUNITARIO As Global.System.Data.DataColumn
        
        Private columnSUBTOTAL As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMP_RECIBO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMLINEAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMLINEA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNITARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUBTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMP_RECIBORow
            Get
                Return CType(Me.Rows(index),IMP_RECIBORow)
            End Get
        End Property
        
        Public Event IMP_RECIBORowChanging As IMP_RECIBORowChangeEventHandler
        
        Public Event IMP_RECIBORowChanged As IMP_RECIBORowChangeEventHandler
        
        Public Event IMP_RECIBORowDeleting As IMP_RECIBORowChangeEventHandler
        
        Public Event IMP_RECIBORowDeleted As IMP_RECIBORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMP_RECIBORow(ByVal row As IMP_RECIBORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMP_RECIBORow(ByVal NUMLINEA As Integer, ByVal CANTIDAD As String, ByVal CODIGO As String, ByVal DESCRIPCION As String, ByVal UNITARIO As String, ByVal SUBTOTAL As String, ByVal MARCA As String) As IMP_RECIBORow
            Dim rowIMP_RECIBORow As IMP_RECIBORow = CType(Me.NewRow,IMP_RECIBORow)
            Dim columnValuesArray() As Object = New Object() {NUMLINEA, CANTIDAD, CODIGO, DESCRIPCION, UNITARIO, SUBTOTAL, MARCA}
            rowIMP_RECIBORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMP_RECIBORow)
            Return rowIMP_RECIBORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNUMLINEA(ByVal NUMLINEA As Integer) As IMP_RECIBORow
            Return CType(Me.Rows.Find(New Object() {NUMLINEA}),IMP_RECIBORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMP_RECIBODataTable = CType(MyBase.Clone,IMP_RECIBODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMP_RECIBODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMLINEA = MyBase.Columns("NUMLINEA")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnUNITARIO = MyBase.Columns("UNITARIO")
            Me.columnSUBTOTAL = MyBase.Columns("SUBTOTAL")
            Me.columnMARCA = MyBase.Columns("MARCA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMLINEA = New Global.System.Data.DataColumn("NUMLINEA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMLINEA)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnUNITARIO = New Global.System.Data.DataColumn("UNITARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNITARIO)
            Me.columnSUBTOTAL = New Global.System.Data.DataColumn("SUBTOTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBTOTAL)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey13", New Global.System.Data.DataColumn() {Me.columnNUMLINEA}, true))
            Me.columnNUMLINEA.AllowDBNull = false
            Me.columnNUMLINEA.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMP_RECIBORow() As IMP_RECIBORow
            Return CType(Me.NewRow,IMP_RECIBORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMP_RECIBORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMP_RECIBORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMP_RECIBORowChangedEvent) Is Nothing) Then
                RaiseEvent IMP_RECIBORowChanged(Me, New IMP_RECIBORowChangeEvent(CType(e.Row,IMP_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMP_RECIBORowChangingEvent) Is Nothing) Then
                RaiseEvent IMP_RECIBORowChanging(Me, New IMP_RECIBORowChangeEvent(CType(e.Row,IMP_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMP_RECIBORowDeletedEvent) Is Nothing) Then
                RaiseEvent IMP_RECIBORowDeleted(Me, New IMP_RECIBORowChangeEvent(CType(e.Row,IMP_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMP_RECIBORowDeletingEvent) Is Nothing) Then
                RaiseEvent IMP_RECIBORowDeleting(Me, New IMP_RECIBORowChangeEvent(CType(e.Row,IMP_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMP_RECIBORow(ByVal row As IMP_RECIBORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMP_RECIBODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NOTA_YEMASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNIV_NYEM As Global.System.Data.DataColumn
        
        Private columnCOD_NYEM As Global.System.Data.DataColumn
        
        Private columnDES_NYEM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NOTA_YEMAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NIV_NYEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV_NYEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_NYEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_NYEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DES_NYEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDES_NYEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NOTA_YEMASRow
            Get
                Return CType(Me.Rows(index),NOTA_YEMASRow)
            End Get
        End Property
        
        Public Event NOTA_YEMASRowChanging As NOTA_YEMASRowChangeEventHandler
        
        Public Event NOTA_YEMASRowChanged As NOTA_YEMASRowChangeEventHandler
        
        Public Event NOTA_YEMASRowDeleting As NOTA_YEMASRowChangeEventHandler
        
        Public Event NOTA_YEMASRowDeleted As NOTA_YEMASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNOTA_YEMASRow(ByVal row As NOTA_YEMASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNOTA_YEMASRow(ByVal NIV_NYEM As Integer, ByVal COD_NYEM As String, ByVal DES_NYEM As String) As NOTA_YEMASRow
            Dim rowNOTA_YEMASRow As NOTA_YEMASRow = CType(Me.NewRow,NOTA_YEMASRow)
            Dim columnValuesArray() As Object = New Object() {NIV_NYEM, COD_NYEM, DES_NYEM}
            rowNOTA_YEMASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNOTA_YEMASRow)
            Return rowNOTA_YEMASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNIV_NYEM(ByVal NIV_NYEM As Integer) As NOTA_YEMASRow
            Return CType(Me.Rows.Find(New Object() {NIV_NYEM}),NOTA_YEMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NOTA_YEMASDataTable = CType(MyBase.Clone,NOTA_YEMASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NOTA_YEMASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNIV_NYEM = MyBase.Columns("NIV_NYEM")
            Me.columnCOD_NYEM = MyBase.Columns("COD_NYEM")
            Me.columnDES_NYEM = MyBase.Columns("DES_NYEM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNIV_NYEM = New Global.System.Data.DataColumn("NIV_NYEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV_NYEM)
            Me.columnCOD_NYEM = New Global.System.Data.DataColumn("COD_NYEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_NYEM)
            Me.columnDES_NYEM = New Global.System.Data.DataColumn("DES_NYEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDES_NYEM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey16", New Global.System.Data.DataColumn() {Me.columnNIV_NYEM}, true))
            Me.columnNIV_NYEM.AllowDBNull = false
            Me.columnNIV_NYEM.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNOTA_YEMASRow() As NOTA_YEMASRow
            Return CType(Me.NewRow,NOTA_YEMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NOTA_YEMASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NOTA_YEMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NOTA_YEMASRowChangedEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMASRowChanged(Me, New NOTA_YEMASRowChangeEvent(CType(e.Row,NOTA_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NOTA_YEMASRowChangingEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMASRowChanging(Me, New NOTA_YEMASRowChangeEvent(CType(e.Row,NOTA_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NOTA_YEMASRowDeletedEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMASRowDeleted(Me, New NOTA_YEMASRowChangeEvent(CType(e.Row,NOTA_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NOTA_YEMASRowDeletingEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMASRowDeleting(Me, New NOTA_YEMASRowChangeEvent(CType(e.Row,NOTA_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNOTA_YEMASRow(ByVal row As NOTA_YEMASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NOTA_YEMASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NOTA_YEMA_NLABDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnDES1_NYEM As Global.System.Data.DataColumn
        
        Private columnDES2_NYEM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NOTA_YEMA_NLAB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DES1_NYEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDES1_NYEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DES2_NYEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDES2_NYEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NOTA_YEMA_NLABRow
            Get
                Return CType(Me.Rows(index),NOTA_YEMA_NLABRow)
            End Get
        End Property
        
        Public Event NOTA_YEMA_NLABRowChanging As NOTA_YEMA_NLABRowChangeEventHandler
        
        Public Event NOTA_YEMA_NLABRowChanged As NOTA_YEMA_NLABRowChangeEventHandler
        
        Public Event NOTA_YEMA_NLABRowDeleting As NOTA_YEMA_NLABRowChangeEventHandler
        
        Public Event NOTA_YEMA_NLABRowDeleted As NOTA_YEMA_NLABRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNOTA_YEMA_NLABRow(ByVal row As NOTA_YEMA_NLABRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNOTA_YEMA_NLABRow(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer, ByVal DES1_NYEM As String, ByVal DES2_NYEM As String) As NOTA_YEMA_NLABRow
            Dim rowNOTA_YEMA_NLABRow As NOTA_YEMA_NLABRow = CType(Me.NewRow,NOTA_YEMA_NLABRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, DES1_NYEM, DES2_NYEM}
            rowNOTA_YEMA_NLABRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNOTA_YEMA_NLABRow)
            Return rowNOTA_YEMA_NLABRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As NOTA_YEMA_NLABRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),NOTA_YEMA_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NOTA_YEMA_NLABDataTable = CType(MyBase.Clone,NOTA_YEMA_NLABDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NOTA_YEMA_NLABDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnDES1_NYEM = MyBase.Columns("DES1_NYEM")
            Me.columnDES2_NYEM = MyBase.Columns("DES2_NYEM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnDES1_NYEM = New Global.System.Data.DataColumn("DES1_NYEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDES1_NYEM)
            Me.columnDES2_NYEM = New Global.System.Data.DataColumn("DES2_NYEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDES2_NYEM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey17", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNOTA_YEMA_NLABRow() As NOTA_YEMA_NLABRow
            Return CType(Me.NewRow,NOTA_YEMA_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NOTA_YEMA_NLABRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NOTA_YEMA_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NOTA_YEMA_NLABRowChangedEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMA_NLABRowChanged(Me, New NOTA_YEMA_NLABRowChangeEvent(CType(e.Row,NOTA_YEMA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NOTA_YEMA_NLABRowChangingEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMA_NLABRowChanging(Me, New NOTA_YEMA_NLABRowChangeEvent(CType(e.Row,NOTA_YEMA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NOTA_YEMA_NLABRowDeletedEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMA_NLABRowDeleted(Me, New NOTA_YEMA_NLABRowChangeEvent(CType(e.Row,NOTA_YEMA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NOTA_YEMA_NLABRowDeletingEvent) Is Nothing) Then
                RaiseEvent NOTA_YEMA_NLABRowDeleting(Me, New NOTA_YEMA_NLABRowChangeEvent(CType(e.Row,NOTA_YEMA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNOTA_YEMA_NLABRow(ByVal row As NOTA_YEMA_NLABRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NOTA_YEMA_NLABDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CONSULTA_ANALISISDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnSUB_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_NETO As Global.System.Data.DataColumn
        
        Private columnANA_NIVEL_PRECIO As Global.System.Data.DataColumn
        
        Private columnCLIENTE1 As Global.System.Data.DataColumn
        
        Private columnCLIENTE2 As Global.System.Data.DataColumn
        
        Private columnCLIENTE3 As Global.System.Data.DataColumn
        
        Private columnCLIENTET As Global.System.Data.DataColumn
        
        Private columnTIPO_COD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CONSULTA_ANALISIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_NIVEL_PRECIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_NIVEL_PRECIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_COD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CONSULTA_ANALISISRow
            Get
                Return CType(Me.Rows(index),CONSULTA_ANALISISRow)
            End Get
        End Property
        
        Public Event CONSULTA_ANALISISRowChanging As CONSULTA_ANALISISRowChangeEventHandler
        
        Public Event CONSULTA_ANALISISRowChanged As CONSULTA_ANALISISRowChangeEventHandler
        
        Public Event CONSULTA_ANALISISRowDeleting As CONSULTA_ANALISISRowChangeEventHandler
        
        Public Event CONSULTA_ANALISISRowDeleted As CONSULTA_ANALISISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCONSULTA_ANALISISRow(ByVal row As CONSULTA_ANALISISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCONSULTA_ANALISISRow(ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal TMU_CODIGO As Integer, ByVal SUB_CODIGO As Integer, ByVal ANA_NETO As Double, ByVal ANA_NIVEL_PRECIO As String, ByVal CLIENTE1 As String, ByVal CLIENTE2 As String, ByVal CLIENTE3 As String, ByVal CLIENTET As String, ByVal TIPO_COD As String) As CONSULTA_ANALISISRow
            Dim rowCONSULTA_ANALISISRow As CONSULTA_ANALISISRow = CType(Me.NewRow,CONSULTA_ANALISISRow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ANA_ANALISIS, TMU_CODIGO, SUB_CODIGO, ANA_NETO, ANA_NIVEL_PRECIO, CLIENTE1, CLIENTE2, CLIENTE3, CLIENTET, TIPO_COD}
            rowCONSULTA_ANALISISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCONSULTA_ANALISISRow)
            Return rowCONSULTA_ANALISISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGO(ByVal ANA_CODIGO As Double) As CONSULTA_ANALISISRow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO}),CONSULTA_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CONSULTA_ANALISISDataTable = CType(MyBase.Clone,CONSULTA_ANALISISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CONSULTA_ANALISISDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnSUB_CODIGO = MyBase.Columns("SUB_CODIGO")
            Me.columnANA_NETO = MyBase.Columns("ANA_NETO")
            Me.columnANA_NIVEL_PRECIO = MyBase.Columns("ANA_NIVEL_PRECIO")
            Me.columnCLIENTE1 = MyBase.Columns("CLIENTE1")
            Me.columnCLIENTE2 = MyBase.Columns("CLIENTE2")
            Me.columnCLIENTE3 = MyBase.Columns("CLIENTE3")
            Me.columnCLIENTET = MyBase.Columns("CLIENTET")
            Me.columnTIPO_COD = MyBase.Columns("TIPO_COD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnSUB_CODIGO = New Global.System.Data.DataColumn("SUB_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_CODIGO)
            Me.columnANA_NETO = New Global.System.Data.DataColumn("ANA_NETO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NETO)
            Me.columnANA_NIVEL_PRECIO = New Global.System.Data.DataColumn("ANA_NIVEL_PRECIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_NIVEL_PRECIO)
            Me.columnCLIENTE1 = New Global.System.Data.DataColumn("CLIENTE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE1)
            Me.columnCLIENTE2 = New Global.System.Data.DataColumn("CLIENTE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE2)
            Me.columnCLIENTE3 = New Global.System.Data.DataColumn("CLIENTE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTE3)
            Me.columnCLIENTET = New Global.System.Data.DataColumn("CLIENTET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTET)
            Me.columnTIPO_COD = New Global.System.Data.DataColumn("TIPO_COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_COD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey18", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnANA_CODIGO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCONSULTA_ANALISISRow() As CONSULTA_ANALISISRow
            Return CType(Me.NewRow,CONSULTA_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CONSULTA_ANALISISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CONSULTA_ANALISISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CONSULTA_ANALISISRowChangedEvent) Is Nothing) Then
                RaiseEvent CONSULTA_ANALISISRowChanged(Me, New CONSULTA_ANALISISRowChangeEvent(CType(e.Row,CONSULTA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CONSULTA_ANALISISRowChangingEvent) Is Nothing) Then
                RaiseEvent CONSULTA_ANALISISRowChanging(Me, New CONSULTA_ANALISISRowChangeEvent(CType(e.Row,CONSULTA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CONSULTA_ANALISISRowDeletedEvent) Is Nothing) Then
                RaiseEvent CONSULTA_ANALISISRowDeleted(Me, New CONSULTA_ANALISISRowChangeEvent(CType(e.Row,CONSULTA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CONSULTA_ANALISISRowDeletingEvent) Is Nothing) Then
                RaiseEvent CONSULTA_ANALISISRowDeleting(Me, New CONSULTA_ANALISISRowChangeEvent(CType(e.Row,CONSULTA_ANALISISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCONSULTA_ANALISISRow(ByVal row As CONSULTA_ANALISISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CONSULTA_ANALISISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MYEMA3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIORD As Global.System.Data.DataColumn
        
        Private columnINLA As Global.System.Data.DataColumn
        
        Private columnILIN As Global.System.Data.DataColumn
        
        Private columnIFEI As Global.System.Data.DataColumn
        
        Private columnIPRO As Global.System.Data.DataColumn
        
        Private columnIEMP As Global.System.Data.DataColumn
        
        Private columnIREM As Global.System.Data.DataColumn
        
        Private columnIPRE As Global.System.Data.DataColumn
        
        Private columnIESP As Global.System.Data.DataColumn
        
        Private columnIVAR As Global.System.Data.DataColumn
        
        Private columnIFEM As Global.System.Data.DataColumn
        
        Private columnILOC As Global.System.Data.DataColumn
        
        Private columnIREG As Global.System.Data.DataColumn
        
        Private columnICUA As Global.System.Data.DataColumn
        
        Private columnIEDA As Global.System.Data.DataColumn
        
        Private columnIUNO As Global.System.Data.DataColumn
        
        Private columnIDOS As Global.System.Data.DataColumn
        
        Private columnITRE As Global.System.Data.DataColumn
        
        Private columnICUAT As Global.System.Data.DataColumn
        
        Private columnICIN As Global.System.Data.DataColumn
        
        Private columnISEI As Global.System.Data.DataColumn
        
        Private columnISIE As Global.System.Data.DataColumn
        
        Private columnIOCH As Global.System.Data.DataColumn
        
        Private columnINUE As Global.System.Data.DataColumn
        
        Private columnIDIE As Global.System.Data.DataColumn
        
        Private columnIONC As Global.System.Data.DataColumn
        
        Private columnIDOC As Global.System.Data.DataColumn
        
        Private columnITRC As Global.System.Data.DataColumn
        
        Private columnICAT As Global.System.Data.DataColumn
        
        Private columnIQUI As Global.System.Data.DataColumn
        
        Private columnIDI6 As Global.System.Data.DataColumn
        
        Private columnIDI7 As Global.System.Data.DataColumn
        
        Private columnIDI8 As Global.System.Data.DataColumn
        
        Private columnIDI9 As Global.System.Data.DataColumn
        
        Private columnIVE0 As Global.System.Data.DataColumn
        
        Private columnIVE1 As Global.System.Data.DataColumn
        
        Private columnIVE2 As Global.System.Data.DataColumn
        
        Private columnIVE3 As Global.System.Data.DataColumn
        
        Private columnIVE4 As Global.System.Data.DataColumn
        
        Private columnNROYEM As Global.System.Data.DataColumn
        
        Private columnNOBSERVA As Global.System.Data.DataColumn
        
        Private columnNFRUTA As Global.System.Data.DataColumn
        
        Private columnPORCFRUTA As Global.System.Data.DataColumn
        
        Private columnPORCACUM As Global.System.Data.DataColumn
        
        Private columnVEGETA1 As Global.System.Data.DataColumn
        
        Private columnVEGETA2 As Global.System.Data.DataColumn
        
        Private columnFRUSEC1 As Global.System.Data.DataColumn
        
        Private columnFRUSEC2 As Global.System.Data.DataColumn
        
        Private columnVEGSEC1 As Global.System.Data.DataColumn
        
        Private columnVEGSEC2 As Global.System.Data.DataColumn
        
        Private columnMUERTA1 As Global.System.Data.DataColumn
        
        Private columnMUERTA2 As Global.System.Data.DataColumn
        
        Private columnAUSENTE1 As Global.System.Data.DataColumn
        
        Private columnAUSENTE2 As Global.System.Data.DataColumn
        
        Private columnIOB1 As Global.System.Data.DataColumn
        
        Private columnIOB2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MYEMA3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IESPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIESP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICUAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICUA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IUNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIUNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICUATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICUAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOCHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOCH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IONCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIONC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IQUIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIQUI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDI6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDI6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDI7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDI7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDI8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDI8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDI9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDI9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVE0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVE0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVE4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVE4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NROYEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNROYEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOBSERVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBSERVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NFRUTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNFRUTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORCFRUTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPORCFRUTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORCACUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPORCACUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VEGETA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVEGETA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VEGETA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVEGETA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRUSEC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRUSEC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRUSEC2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRUSEC2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VEGSEC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVEGSEC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VEGSEC2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVEGSEC2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUERTA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUERTA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUERTA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUERTA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUSENTE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUSENTE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUSENTE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUSENTE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOB1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOB1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOB2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOB2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MYEMA3Row
            Get
                Return CType(Me.Rows(index),MYEMA3Row)
            End Get
        End Property
        
        Public Event MYEMA3RowChanging As MYEMA3RowChangeEventHandler
        
        Public Event MYEMA3RowChanged As MYEMA3RowChangeEventHandler
        
        Public Event MYEMA3RowDeleting As MYEMA3RowChangeEventHandler
        
        Public Event MYEMA3RowDeleted As MYEMA3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMYEMA3Row(ByVal row As MYEMA3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMYEMA3Row( _
                    ByVal IORD As String,  _
                    ByVal INLA As String,  _
                    ByVal ILIN As Double,  _
                    ByVal IFEI As Date,  _
                    ByVal IPRO As String,  _
                    ByVal IEMP As String,  _
                    ByVal IREM As String,  _
                    ByVal IPRE As String,  _
                    ByVal IESP As String,  _
                    ByVal IVAR As String,  _
                    ByVal IFEM As Date,  _
                    ByVal ILOC As String,  _
                    ByVal IREG As String,  _
                    ByVal ICUA As String,  _
                    ByVal IEDA As Double,  _
                    ByVal IUNO As String,  _
                    ByVal IDOS As String,  _
                    ByVal ITRE As String,  _
                    ByVal ICUAT As String,  _
                    ByVal ICIN As String,  _
                    ByVal ISEI As String,  _
                    ByVal ISIE As String,  _
                    ByVal IOCH As String,  _
                    ByVal INUE As String,  _
                    ByVal IDIE As String,  _
                    ByVal IONC As String,  _
                    ByVal IDOC As String,  _
                    ByVal ITRC As String,  _
                    ByVal ICAT As String,  _
                    ByVal IQUI As String,  _
                    ByVal IDI6 As String,  _
                    ByVal IDI7 As String,  _
                    ByVal IDI8 As String,  _
                    ByVal IDI9 As String,  _
                    ByVal IVE0 As String,  _
                    ByVal IVE1 As String,  _
                    ByVal IVE2 As String,  _
                    ByVal IVE3 As String,  _
                    ByVal IVE4 As String,  _
                    ByVal NROYEM As Double,  _
                    ByVal NOBSERVA As Double,  _
                    ByVal NFRUTA As Double,  _
                    ByVal PORCFRUTA As Double,  _
                    ByVal PORCACUM As Double,  _
                    ByVal VEGETA1 As Double,  _
                    ByVal VEGETA2 As Double,  _
                    ByVal FRUSEC1 As Double,  _
                    ByVal FRUSEC2 As Double,  _
                    ByVal VEGSEC1 As Double,  _
                    ByVal VEGSEC2 As Double,  _
                    ByVal MUERTA1 As Double,  _
                    ByVal MUERTA2 As Double,  _
                    ByVal AUSENTE1 As Double,  _
                    ByVal AUSENTE2 As Double,  _
                    ByVal IOB1 As String,  _
                    ByVal IOB2 As String) As MYEMA3Row
            Dim rowMYEMA3Row As MYEMA3Row = CType(Me.NewRow,MYEMA3Row)
            Dim columnValuesArray() As Object = New Object() {IORD, INLA, ILIN, IFEI, IPRO, IEMP, IREM, IPRE, IESP, IVAR, IFEM, ILOC, IREG, ICUA, IEDA, IUNO, IDOS, ITRE, ICUAT, ICIN, ISEI, ISIE, IOCH, INUE, IDIE, IONC, IDOC, ITRC, ICAT, IQUI, IDI6, IDI7, IDI8, IDI9, IVE0, IVE1, IVE2, IVE3, IVE4, NROYEM, NOBSERVA, NFRUTA, PORCFRUTA, PORCACUM, VEGETA1, VEGETA2, FRUSEC1, FRUSEC2, VEGSEC1, VEGSEC2, MUERTA1, MUERTA2, AUSENTE1, AUSENTE2, IOB1, IOB2}
            rowMYEMA3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowMYEMA3Row)
            Return rowMYEMA3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIORDINLAILIN(ByVal IORD As String, ByVal INLA As String, ByVal ILIN As Double) As MYEMA3Row
            Return CType(Me.Rows.Find(New Object() {IORD, INLA, ILIN}),MYEMA3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MYEMA3DataTable = CType(MyBase.Clone,MYEMA3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MYEMA3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIORD = MyBase.Columns("IORD")
            Me.columnINLA = MyBase.Columns("INLA")
            Me.columnILIN = MyBase.Columns("ILIN")
            Me.columnIFEI = MyBase.Columns("IFEI")
            Me.columnIPRO = MyBase.Columns("IPRO")
            Me.columnIEMP = MyBase.Columns("IEMP")
            Me.columnIREM = MyBase.Columns("IREM")
            Me.columnIPRE = MyBase.Columns("IPRE")
            Me.columnIESP = MyBase.Columns("IESP")
            Me.columnIVAR = MyBase.Columns("IVAR")
            Me.columnIFEM = MyBase.Columns("IFEM")
            Me.columnILOC = MyBase.Columns("ILOC")
            Me.columnIREG = MyBase.Columns("IREG")
            Me.columnICUA = MyBase.Columns("ICUA")
            Me.columnIEDA = MyBase.Columns("IEDA")
            Me.columnIUNO = MyBase.Columns("IUNO")
            Me.columnIDOS = MyBase.Columns("IDOS")
            Me.columnITRE = MyBase.Columns("ITRE")
            Me.columnICUAT = MyBase.Columns("ICUAT")
            Me.columnICIN = MyBase.Columns("ICIN")
            Me.columnISEI = MyBase.Columns("ISEI")
            Me.columnISIE = MyBase.Columns("ISIE")
            Me.columnIOCH = MyBase.Columns("IOCH")
            Me.columnINUE = MyBase.Columns("INUE")
            Me.columnIDIE = MyBase.Columns("IDIE")
            Me.columnIONC = MyBase.Columns("IONC")
            Me.columnIDOC = MyBase.Columns("IDOC")
            Me.columnITRC = MyBase.Columns("ITRC")
            Me.columnICAT = MyBase.Columns("ICAT")
            Me.columnIQUI = MyBase.Columns("IQUI")
            Me.columnIDI6 = MyBase.Columns("IDI6")
            Me.columnIDI7 = MyBase.Columns("IDI7")
            Me.columnIDI8 = MyBase.Columns("IDI8")
            Me.columnIDI9 = MyBase.Columns("IDI9")
            Me.columnIVE0 = MyBase.Columns("IVE0")
            Me.columnIVE1 = MyBase.Columns("IVE1")
            Me.columnIVE2 = MyBase.Columns("IVE2")
            Me.columnIVE3 = MyBase.Columns("IVE3")
            Me.columnIVE4 = MyBase.Columns("IVE4")
            Me.columnNROYEM = MyBase.Columns("NROYEM")
            Me.columnNOBSERVA = MyBase.Columns("NOBSERVA")
            Me.columnNFRUTA = MyBase.Columns("NFRUTA")
            Me.columnPORCFRUTA = MyBase.Columns("PORCFRUTA")
            Me.columnPORCACUM = MyBase.Columns("PORCACUM")
            Me.columnVEGETA1 = MyBase.Columns("VEGETA1")
            Me.columnVEGETA2 = MyBase.Columns("VEGETA2")
            Me.columnFRUSEC1 = MyBase.Columns("FRUSEC1")
            Me.columnFRUSEC2 = MyBase.Columns("FRUSEC2")
            Me.columnVEGSEC1 = MyBase.Columns("VEGSEC1")
            Me.columnVEGSEC2 = MyBase.Columns("VEGSEC2")
            Me.columnMUERTA1 = MyBase.Columns("MUERTA1")
            Me.columnMUERTA2 = MyBase.Columns("MUERTA2")
            Me.columnAUSENTE1 = MyBase.Columns("AUSENTE1")
            Me.columnAUSENTE2 = MyBase.Columns("AUSENTE2")
            Me.columnIOB1 = MyBase.Columns("IOB1")
            Me.columnIOB2 = MyBase.Columns("IOB2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIORD = New Global.System.Data.DataColumn("IORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIORD)
            Me.columnINLA = New Global.System.Data.DataColumn("INLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINLA)
            Me.columnILIN = New Global.System.Data.DataColumn("ILIN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILIN)
            Me.columnIFEI = New Global.System.Data.DataColumn("IFEI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEI)
            Me.columnIPRO = New Global.System.Data.DataColumn("IPRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRO)
            Me.columnIEMP = New Global.System.Data.DataColumn("IEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEMP)
            Me.columnIREM = New Global.System.Data.DataColumn("IREM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREM)
            Me.columnIPRE = New Global.System.Data.DataColumn("IPRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRE)
            Me.columnIESP = New Global.System.Data.DataColumn("IESP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIESP)
            Me.columnIVAR = New Global.System.Data.DataColumn("IVAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVAR)
            Me.columnIFEM = New Global.System.Data.DataColumn("IFEM", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEM)
            Me.columnILOC = New Global.System.Data.DataColumn("ILOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILOC)
            Me.columnIREG = New Global.System.Data.DataColumn("IREG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREG)
            Me.columnICUA = New Global.System.Data.DataColumn("ICUA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICUA)
            Me.columnIEDA = New Global.System.Data.DataColumn("IEDA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEDA)
            Me.columnIUNO = New Global.System.Data.DataColumn("IUNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIUNO)
            Me.columnIDOS = New Global.System.Data.DataColumn("IDOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDOS)
            Me.columnITRE = New Global.System.Data.DataColumn("ITRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITRE)
            Me.columnICUAT = New Global.System.Data.DataColumn("ICUAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICUAT)
            Me.columnICIN = New Global.System.Data.DataColumn("ICIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICIN)
            Me.columnISEI = New Global.System.Data.DataColumn("ISEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISEI)
            Me.columnISIE = New Global.System.Data.DataColumn("ISIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISIE)
            Me.columnIOCH = New Global.System.Data.DataColumn("IOCH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOCH)
            Me.columnINUE = New Global.System.Data.DataColumn("INUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINUE)
            Me.columnIDIE = New Global.System.Data.DataColumn("IDIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDIE)
            Me.columnIONC = New Global.System.Data.DataColumn("IONC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIONC)
            Me.columnIDOC = New Global.System.Data.DataColumn("IDOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDOC)
            Me.columnITRC = New Global.System.Data.DataColumn("ITRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITRC)
            Me.columnICAT = New Global.System.Data.DataColumn("ICAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICAT)
            Me.columnIQUI = New Global.System.Data.DataColumn("IQUI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIQUI)
            Me.columnIDI6 = New Global.System.Data.DataColumn("IDI6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDI6)
            Me.columnIDI7 = New Global.System.Data.DataColumn("IDI7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDI7)
            Me.columnIDI8 = New Global.System.Data.DataColumn("IDI8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDI8)
            Me.columnIDI9 = New Global.System.Data.DataColumn("IDI9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDI9)
            Me.columnIVE0 = New Global.System.Data.DataColumn("IVE0", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVE0)
            Me.columnIVE1 = New Global.System.Data.DataColumn("IVE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVE1)
            Me.columnIVE2 = New Global.System.Data.DataColumn("IVE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVE2)
            Me.columnIVE3 = New Global.System.Data.DataColumn("IVE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVE3)
            Me.columnIVE4 = New Global.System.Data.DataColumn("IVE4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVE4)
            Me.columnNROYEM = New Global.System.Data.DataColumn("NROYEM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNROYEM)
            Me.columnNOBSERVA = New Global.System.Data.DataColumn("NOBSERVA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBSERVA)
            Me.columnNFRUTA = New Global.System.Data.DataColumn("NFRUTA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNFRUTA)
            Me.columnPORCFRUTA = New Global.System.Data.DataColumn("PORCFRUTA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPORCFRUTA)
            Me.columnPORCACUM = New Global.System.Data.DataColumn("PORCACUM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPORCACUM)
            Me.columnVEGETA1 = New Global.System.Data.DataColumn("VEGETA1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEGETA1)
            Me.columnVEGETA2 = New Global.System.Data.DataColumn("VEGETA2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEGETA2)
            Me.columnFRUSEC1 = New Global.System.Data.DataColumn("FRUSEC1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRUSEC1)
            Me.columnFRUSEC2 = New Global.System.Data.DataColumn("FRUSEC2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRUSEC2)
            Me.columnVEGSEC1 = New Global.System.Data.DataColumn("VEGSEC1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEGSEC1)
            Me.columnVEGSEC2 = New Global.System.Data.DataColumn("VEGSEC2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEGSEC2)
            Me.columnMUERTA1 = New Global.System.Data.DataColumn("MUERTA1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUERTA1)
            Me.columnMUERTA2 = New Global.System.Data.DataColumn("MUERTA2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUERTA2)
            Me.columnAUSENTE1 = New Global.System.Data.DataColumn("AUSENTE1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUSENTE1)
            Me.columnAUSENTE2 = New Global.System.Data.DataColumn("AUSENTE2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUSENTE2)
            Me.columnIOB1 = New Global.System.Data.DataColumn("IOB1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOB1)
            Me.columnIOB2 = New Global.System.Data.DataColumn("IOB2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOB2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey20", New Global.System.Data.DataColumn() {Me.columnIORD, Me.columnINLA, Me.columnILIN}, true))
            Me.columnIORD.AllowDBNull = false
            Me.columnINLA.AllowDBNull = false
            Me.columnILIN.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMYEMA3Row() As MYEMA3Row
            Return CType(Me.NewRow,MYEMA3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MYEMA3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MYEMA3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MYEMA3RowChangedEvent) Is Nothing) Then
                RaiseEvent MYEMA3RowChanged(Me, New MYEMA3RowChangeEvent(CType(e.Row,MYEMA3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MYEMA3RowChangingEvent) Is Nothing) Then
                RaiseEvent MYEMA3RowChanging(Me, New MYEMA3RowChangeEvent(CType(e.Row,MYEMA3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MYEMA3RowDeletedEvent) Is Nothing) Then
                RaiseEvent MYEMA3RowDeleted(Me, New MYEMA3RowChangeEvent(CType(e.Row,MYEMA3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MYEMA3RowDeletingEvent) Is Nothing) Then
                RaiseEvent MYEMA3RowDeleting(Me, New MYEMA3RowChangeEvent(CType(e.Row,MYEMA3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMYEMA3Row(ByVal row As MYEMA3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MYEMA3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DIG_YEMASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnYEM_YEMA As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR1 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR2 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR3 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR4 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR5 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR6 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR7 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR8 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR9 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR10 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR11 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR12 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR13 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR14 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR15 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR16 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR17 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR18 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR19 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR20 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR21 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR22 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR23 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR24 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR25 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR26 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR27 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR28 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR29 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR30 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR31 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR32 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR33 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR34 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR35 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR36 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR37 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR38 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR39 As Global.System.Data.DataColumn
        
        Private columnYEM_CARGADOR40 As Global.System.Data.DataColumn
        
        Private columnYEM_OBSERVADAS As Global.System.Data.DataColumn
        
        Private columnYEM_FRUTALES As Global.System.Data.DataColumn
        
        Private columnYEM_POROBSERVADAS As Global.System.Data.DataColumn
        
        Private columnYEM_PORACUMULADA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DIG_YEMAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_YEMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_YEMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR16Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR16
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR17Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR17
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR18Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR18
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR19Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR19
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR21Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR21
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR23Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR23
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR24Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR24
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR25Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR25
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR26Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR26
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR27Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR27
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR28Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR28
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR29Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR29
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR30Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR30
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR31Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR31
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR32Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR32
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR33Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR33
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR34Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR34
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR35Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR35
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR36Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR36
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR37Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR37
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR38Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR38
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR39Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR39
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_CARGADOR40Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_CARGADOR40
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_OBSERVADASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_OBSERVADAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_FRUTALESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_FRUTALES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_POROBSERVADASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_POROBSERVADAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEM_PORACUMULADAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEM_PORACUMULADA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DIG_YEMASRow
            Get
                Return CType(Me.Rows(index),DIG_YEMASRow)
            End Get
        End Property
        
        Public Event DIG_YEMASRowChanging As DIG_YEMASRowChangeEventHandler
        
        Public Event DIG_YEMASRowChanged As DIG_YEMASRowChangeEventHandler
        
        Public Event DIG_YEMASRowDeleting As DIG_YEMASRowChangeEventHandler
        
        Public Event DIG_YEMASRowDeleted As DIG_YEMASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDIG_YEMASRow(ByVal row As DIG_YEMASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDIG_YEMASRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal YEM_YEMA As Integer,  _
                    ByVal YEM_CARGADOR1 As String,  _
                    ByVal YEM_CARGADOR2 As String,  _
                    ByVal YEM_CARGADOR3 As String,  _
                    ByVal YEM_CARGADOR4 As String,  _
                    ByVal YEM_CARGADOR5 As String,  _
                    ByVal YEM_CARGADOR6 As String,  _
                    ByVal YEM_CARGADOR7 As String,  _
                    ByVal YEM_CARGADOR8 As String,  _
                    ByVal YEM_CARGADOR9 As String,  _
                    ByVal YEM_CARGADOR10 As String,  _
                    ByVal YEM_CARGADOR11 As String,  _
                    ByVal YEM_CARGADOR12 As String,  _
                    ByVal YEM_CARGADOR13 As String,  _
                    ByVal YEM_CARGADOR14 As String,  _
                    ByVal YEM_CARGADOR15 As String,  _
                    ByVal YEM_CARGADOR16 As String,  _
                    ByVal YEM_CARGADOR17 As String,  _
                    ByVal YEM_CARGADOR18 As String,  _
                    ByVal YEM_CARGADOR19 As String,  _
                    ByVal YEM_CARGADOR20 As String,  _
                    ByVal YEM_CARGADOR21 As String,  _
                    ByVal YEM_CARGADOR22 As String,  _
                    ByVal YEM_CARGADOR23 As String,  _
                    ByVal YEM_CARGADOR24 As String,  _
                    ByVal YEM_CARGADOR25 As String,  _
                    ByVal YEM_CARGADOR26 As String,  _
                    ByVal YEM_CARGADOR27 As String,  _
                    ByVal YEM_CARGADOR28 As String,  _
                    ByVal YEM_CARGADOR29 As String,  _
                    ByVal YEM_CARGADOR30 As String,  _
                    ByVal YEM_CARGADOR31 As String,  _
                    ByVal YEM_CARGADOR32 As String,  _
                    ByVal YEM_CARGADOR33 As String,  _
                    ByVal YEM_CARGADOR34 As String,  _
                    ByVal YEM_CARGADOR35 As String,  _
                    ByVal YEM_CARGADOR36 As String,  _
                    ByVal YEM_CARGADOR37 As String,  _
                    ByVal YEM_CARGADOR38 As String,  _
                    ByVal YEM_CARGADOR39 As String,  _
                    ByVal YEM_CARGADOR40 As String,  _
                    ByVal YEM_OBSERVADAS As Integer,  _
                    ByVal YEM_FRUTALES As Integer,  _
                    ByVal YEM_POROBSERVADAS As Double,  _
                    ByVal YEM_PORACUMULADA As Double) As DIG_YEMASRow
            Dim rowDIG_YEMASRow As DIG_YEMASRow = CType(Me.NewRow,DIG_YEMASRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, YEM_YEMA, YEM_CARGADOR1, YEM_CARGADOR2, YEM_CARGADOR3, YEM_CARGADOR4, YEM_CARGADOR5, YEM_CARGADOR6, YEM_CARGADOR7, YEM_CARGADOR8, YEM_CARGADOR9, YEM_CARGADOR10, YEM_CARGADOR11, YEM_CARGADOR12, YEM_CARGADOR13, YEM_CARGADOR14, YEM_CARGADOR15, YEM_CARGADOR16, YEM_CARGADOR17, YEM_CARGADOR18, YEM_CARGADOR19, YEM_CARGADOR20, YEM_CARGADOR21, YEM_CARGADOR22, YEM_CARGADOR23, YEM_CARGADOR24, YEM_CARGADOR25, YEM_CARGADOR26, YEM_CARGADOR27, YEM_CARGADOR28, YEM_CARGADOR29, YEM_CARGADOR30, YEM_CARGADOR31, YEM_CARGADOR32, YEM_CARGADOR33, YEM_CARGADOR34, YEM_CARGADOR35, YEM_CARGADOR36, YEM_CARGADOR37, YEM_CARGADOR38, YEM_CARGADOR39, YEM_CARGADOR40, YEM_OBSERVADAS, YEM_FRUTALES, YEM_POROBSERVADAS, YEM_PORACUMULADA}
            rowDIG_YEMASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDIG_YEMASRow)
            Return rowDIG_YEMASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLABYEM_YEMA(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer, ByVal YEM_YEMA As Integer) As DIG_YEMASRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB, YEM_YEMA}),DIG_YEMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DIG_YEMASDataTable = CType(MyBase.Clone,DIG_YEMASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DIG_YEMASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnYEM_YEMA = MyBase.Columns("YEM_YEMA")
            Me.columnYEM_CARGADOR1 = MyBase.Columns("YEM_CARGADOR1")
            Me.columnYEM_CARGADOR2 = MyBase.Columns("YEM_CARGADOR2")
            Me.columnYEM_CARGADOR3 = MyBase.Columns("YEM_CARGADOR3")
            Me.columnYEM_CARGADOR4 = MyBase.Columns("YEM_CARGADOR4")
            Me.columnYEM_CARGADOR5 = MyBase.Columns("YEM_CARGADOR5")
            Me.columnYEM_CARGADOR6 = MyBase.Columns("YEM_CARGADOR6")
            Me.columnYEM_CARGADOR7 = MyBase.Columns("YEM_CARGADOR7")
            Me.columnYEM_CARGADOR8 = MyBase.Columns("YEM_CARGADOR8")
            Me.columnYEM_CARGADOR9 = MyBase.Columns("YEM_CARGADOR9")
            Me.columnYEM_CARGADOR10 = MyBase.Columns("YEM_CARGADOR10")
            Me.columnYEM_CARGADOR11 = MyBase.Columns("YEM_CARGADOR11")
            Me.columnYEM_CARGADOR12 = MyBase.Columns("YEM_CARGADOR12")
            Me.columnYEM_CARGADOR13 = MyBase.Columns("YEM_CARGADOR13")
            Me.columnYEM_CARGADOR14 = MyBase.Columns("YEM_CARGADOR14")
            Me.columnYEM_CARGADOR15 = MyBase.Columns("YEM_CARGADOR15")
            Me.columnYEM_CARGADOR16 = MyBase.Columns("YEM_CARGADOR16")
            Me.columnYEM_CARGADOR17 = MyBase.Columns("YEM_CARGADOR17")
            Me.columnYEM_CARGADOR18 = MyBase.Columns("YEM_CARGADOR18")
            Me.columnYEM_CARGADOR19 = MyBase.Columns("YEM_CARGADOR19")
            Me.columnYEM_CARGADOR20 = MyBase.Columns("YEM_CARGADOR20")
            Me.columnYEM_CARGADOR21 = MyBase.Columns("YEM_CARGADOR21")
            Me.columnYEM_CARGADOR22 = MyBase.Columns("YEM_CARGADOR22")
            Me.columnYEM_CARGADOR23 = MyBase.Columns("YEM_CARGADOR23")
            Me.columnYEM_CARGADOR24 = MyBase.Columns("YEM_CARGADOR24")
            Me.columnYEM_CARGADOR25 = MyBase.Columns("YEM_CARGADOR25")
            Me.columnYEM_CARGADOR26 = MyBase.Columns("YEM_CARGADOR26")
            Me.columnYEM_CARGADOR27 = MyBase.Columns("YEM_CARGADOR27")
            Me.columnYEM_CARGADOR28 = MyBase.Columns("YEM_CARGADOR28")
            Me.columnYEM_CARGADOR29 = MyBase.Columns("YEM_CARGADOR29")
            Me.columnYEM_CARGADOR30 = MyBase.Columns("YEM_CARGADOR30")
            Me.columnYEM_CARGADOR31 = MyBase.Columns("YEM_CARGADOR31")
            Me.columnYEM_CARGADOR32 = MyBase.Columns("YEM_CARGADOR32")
            Me.columnYEM_CARGADOR33 = MyBase.Columns("YEM_CARGADOR33")
            Me.columnYEM_CARGADOR34 = MyBase.Columns("YEM_CARGADOR34")
            Me.columnYEM_CARGADOR35 = MyBase.Columns("YEM_CARGADOR35")
            Me.columnYEM_CARGADOR36 = MyBase.Columns("YEM_CARGADOR36")
            Me.columnYEM_CARGADOR37 = MyBase.Columns("YEM_CARGADOR37")
            Me.columnYEM_CARGADOR38 = MyBase.Columns("YEM_CARGADOR38")
            Me.columnYEM_CARGADOR39 = MyBase.Columns("YEM_CARGADOR39")
            Me.columnYEM_CARGADOR40 = MyBase.Columns("YEM_CARGADOR40")
            Me.columnYEM_OBSERVADAS = MyBase.Columns("YEM_OBSERVADAS")
            Me.columnYEM_FRUTALES = MyBase.Columns("YEM_FRUTALES")
            Me.columnYEM_POROBSERVADAS = MyBase.Columns("YEM_POROBSERVADAS")
            Me.columnYEM_PORACUMULADA = MyBase.Columns("YEM_PORACUMULADA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnYEM_YEMA = New Global.System.Data.DataColumn("YEM_YEMA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_YEMA)
            Me.columnYEM_CARGADOR1 = New Global.System.Data.DataColumn("YEM_CARGADOR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR1)
            Me.columnYEM_CARGADOR2 = New Global.System.Data.DataColumn("YEM_CARGADOR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR2)
            Me.columnYEM_CARGADOR3 = New Global.System.Data.DataColumn("YEM_CARGADOR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR3)
            Me.columnYEM_CARGADOR4 = New Global.System.Data.DataColumn("YEM_CARGADOR4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR4)
            Me.columnYEM_CARGADOR5 = New Global.System.Data.DataColumn("YEM_CARGADOR5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR5)
            Me.columnYEM_CARGADOR6 = New Global.System.Data.DataColumn("YEM_CARGADOR6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR6)
            Me.columnYEM_CARGADOR7 = New Global.System.Data.DataColumn("YEM_CARGADOR7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR7)
            Me.columnYEM_CARGADOR8 = New Global.System.Data.DataColumn("YEM_CARGADOR8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR8)
            Me.columnYEM_CARGADOR9 = New Global.System.Data.DataColumn("YEM_CARGADOR9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR9)
            Me.columnYEM_CARGADOR10 = New Global.System.Data.DataColumn("YEM_CARGADOR10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR10)
            Me.columnYEM_CARGADOR11 = New Global.System.Data.DataColumn("YEM_CARGADOR11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR11)
            Me.columnYEM_CARGADOR12 = New Global.System.Data.DataColumn("YEM_CARGADOR12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR12)
            Me.columnYEM_CARGADOR13 = New Global.System.Data.DataColumn("YEM_CARGADOR13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR13)
            Me.columnYEM_CARGADOR14 = New Global.System.Data.DataColumn("YEM_CARGADOR14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR14)
            Me.columnYEM_CARGADOR15 = New Global.System.Data.DataColumn("YEM_CARGADOR15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR15)
            Me.columnYEM_CARGADOR16 = New Global.System.Data.DataColumn("YEM_CARGADOR16", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR16)
            Me.columnYEM_CARGADOR17 = New Global.System.Data.DataColumn("YEM_CARGADOR17", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR17)
            Me.columnYEM_CARGADOR18 = New Global.System.Data.DataColumn("YEM_CARGADOR18", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR18)
            Me.columnYEM_CARGADOR19 = New Global.System.Data.DataColumn("YEM_CARGADOR19", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR19)
            Me.columnYEM_CARGADOR20 = New Global.System.Data.DataColumn("YEM_CARGADOR20", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR20)
            Me.columnYEM_CARGADOR21 = New Global.System.Data.DataColumn("YEM_CARGADOR21", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR21)
            Me.columnYEM_CARGADOR22 = New Global.System.Data.DataColumn("YEM_CARGADOR22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR22)
            Me.columnYEM_CARGADOR23 = New Global.System.Data.DataColumn("YEM_CARGADOR23", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR23)
            Me.columnYEM_CARGADOR24 = New Global.System.Data.DataColumn("YEM_CARGADOR24", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR24)
            Me.columnYEM_CARGADOR25 = New Global.System.Data.DataColumn("YEM_CARGADOR25", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR25)
            Me.columnYEM_CARGADOR26 = New Global.System.Data.DataColumn("YEM_CARGADOR26", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR26)
            Me.columnYEM_CARGADOR27 = New Global.System.Data.DataColumn("YEM_CARGADOR27", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR27)
            Me.columnYEM_CARGADOR28 = New Global.System.Data.DataColumn("YEM_CARGADOR28", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR28)
            Me.columnYEM_CARGADOR29 = New Global.System.Data.DataColumn("YEM_CARGADOR29", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR29)
            Me.columnYEM_CARGADOR30 = New Global.System.Data.DataColumn("YEM_CARGADOR30", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR30)
            Me.columnYEM_CARGADOR31 = New Global.System.Data.DataColumn("YEM_CARGADOR31", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR31)
            Me.columnYEM_CARGADOR32 = New Global.System.Data.DataColumn("YEM_CARGADOR32", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR32)
            Me.columnYEM_CARGADOR33 = New Global.System.Data.DataColumn("YEM_CARGADOR33", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR33)
            Me.columnYEM_CARGADOR34 = New Global.System.Data.DataColumn("YEM_CARGADOR34", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR34)
            Me.columnYEM_CARGADOR35 = New Global.System.Data.DataColumn("YEM_CARGADOR35", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR35)
            Me.columnYEM_CARGADOR36 = New Global.System.Data.DataColumn("YEM_CARGADOR36", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR36)
            Me.columnYEM_CARGADOR37 = New Global.System.Data.DataColumn("YEM_CARGADOR37", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR37)
            Me.columnYEM_CARGADOR38 = New Global.System.Data.DataColumn("YEM_CARGADOR38", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR38)
            Me.columnYEM_CARGADOR39 = New Global.System.Data.DataColumn("YEM_CARGADOR39", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR39)
            Me.columnYEM_CARGADOR40 = New Global.System.Data.DataColumn("YEM_CARGADOR40", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_CARGADOR40)
            Me.columnYEM_OBSERVADAS = New Global.System.Data.DataColumn("YEM_OBSERVADAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_OBSERVADAS)
            Me.columnYEM_FRUTALES = New Global.System.Data.DataColumn("YEM_FRUTALES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_FRUTALES)
            Me.columnYEM_POROBSERVADAS = New Global.System.Data.DataColumn("YEM_POROBSERVADAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_POROBSERVADAS)
            Me.columnYEM_PORACUMULADA = New Global.System.Data.DataColumn("YEM_PORACUMULADA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEM_PORACUMULADA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey14", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB, Me.columnYEM_YEMA}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnYEM_YEMA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDIG_YEMASRow() As DIG_YEMASRow
            Return CType(Me.NewRow,DIG_YEMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DIG_YEMASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DIG_YEMASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DIG_YEMASRowChangedEvent) Is Nothing) Then
                RaiseEvent DIG_YEMASRowChanged(Me, New DIG_YEMASRowChangeEvent(CType(e.Row,DIG_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DIG_YEMASRowChangingEvent) Is Nothing) Then
                RaiseEvent DIG_YEMASRowChanging(Me, New DIG_YEMASRowChangeEvent(CType(e.Row,DIG_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DIG_YEMASRowDeletedEvent) Is Nothing) Then
                RaiseEvent DIG_YEMASRowDeleted(Me, New DIG_YEMASRowChangeEvent(CType(e.Row,DIG_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DIG_YEMASRowDeletingEvent) Is Nothing) Then
                RaiseEvent DIG_YEMASRowDeleting(Me, New DIG_YEMASRowChangeEvent(CType(e.Row,DIG_YEMASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDIG_YEMASRow(ByVal row As DIG_YEMASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DIG_YEMASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class YEMAS_NLABDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "YEMAS_NLAB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As YEMAS_NLABRow
            Get
                Return CType(Me.Rows(index),YEMAS_NLABRow)
            End Get
        End Property
        
        Public Event YEMAS_NLABRowChanging As YEMAS_NLABRowChangeEventHandler
        
        Public Event YEMAS_NLABRowChanged As YEMAS_NLABRowChangeEventHandler
        
        Public Event YEMAS_NLABRowDeleting As YEMAS_NLABRowChangeEventHandler
        
        Public Event YEMAS_NLABRowDeleted As YEMAS_NLABRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddYEMAS_NLABRow(ByVal row As YEMAS_NLABRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddYEMAS_NLABRow(ByVal OT_NLAB As Integer) As YEMAS_NLABRow
            Dim rowYEMAS_NLABRow As YEMAS_NLABRow = CType(Me.NewRow,YEMAS_NLABRow)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB}
            rowYEMAS_NLABRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowYEMAS_NLABRow)
            Return rowYEMAS_NLABRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NLAB(ByVal OT_NLAB As Integer) As YEMAS_NLABRow
            Return CType(Me.Rows.Find(New Object() {OT_NLAB}),YEMAS_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As YEMAS_NLABDataTable = CType(MyBase.Clone,YEMAS_NLABDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New YEMAS_NLABDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey15", New Global.System.Data.DataColumn() {Me.columnOT_NLAB}, true))
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnOT_NLAB.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewYEMAS_NLABRow() As YEMAS_NLABRow
            Return CType(Me.NewRow,YEMAS_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New YEMAS_NLABRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(YEMAS_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YEMAS_NLABRowChangedEvent) Is Nothing) Then
                RaiseEvent YEMAS_NLABRowChanged(Me, New YEMAS_NLABRowChangeEvent(CType(e.Row,YEMAS_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YEMAS_NLABRowChangingEvent) Is Nothing) Then
                RaiseEvent YEMAS_NLABRowChanging(Me, New YEMAS_NLABRowChangeEvent(CType(e.Row,YEMAS_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YEMAS_NLABRowDeletedEvent) Is Nothing) Then
                RaiseEvent YEMAS_NLABRowDeleted(Me, New YEMAS_NLABRowChangeEvent(CType(e.Row,YEMAS_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YEMAS_NLABRowDeletingEvent) Is Nothing) Then
                RaiseEvent YEMAS_NLABRowDeleting(Me, New YEMAS_NLABRowChangeEvent(CType(e.Row,YEMAS_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveYEMAS_NLABRow(ByVal row As YEMAS_NLABRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "YEMAS_NLABDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ESTIMADOBRODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnCARGADOR_DESDE As Global.System.Data.DataColumn
        
        Private columnCARGADOR_HASTA As Global.System.Data.DataColumn
        
        Private columnYEMA_DESDE As Global.System.Data.DataColumn
        
        Private columnYEMA_HASTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ESTIMADOBRO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARGADOR_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARGADOR_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARGADOR_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARGADOR_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMA_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMA_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMA_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMA_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ESTIMADOBRORow
            Get
                Return CType(Me.Rows(index),ESTIMADOBRORow)
            End Get
        End Property
        
        Public Event ESTIMADOBRORowChanging As ESTIMADOBRORowChangeEventHandler
        
        Public Event ESTIMADOBRORowChanged As ESTIMADOBRORowChangeEventHandler
        
        Public Event ESTIMADOBRORowDeleting As ESTIMADOBRORowChangeEventHandler
        
        Public Event ESTIMADOBRORowDeleted As ESTIMADOBRORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddESTIMADOBRORow(ByVal row As ESTIMADOBRORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddESTIMADOBRORow(ByVal OT_NLAB As Integer, ByVal CARGADOR_DESDE As Integer, ByVal CARGADOR_HASTA As Integer, ByVal YEMA_DESDE As Integer, ByVal YEMA_HASTA As Integer) As ESTIMADOBRORow
            Dim rowESTIMADOBRORow As ESTIMADOBRORow = CType(Me.NewRow,ESTIMADOBRORow)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB, CARGADOR_DESDE, CARGADOR_HASTA, YEMA_DESDE, YEMA_HASTA}
            rowESTIMADOBRORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowESTIMADOBRORow)
            Return rowESTIMADOBRORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NLAB(ByVal OT_NLAB As Integer) As ESTIMADOBRORow
            Return CType(Me.Rows.Find(New Object() {OT_NLAB}),ESTIMADOBRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ESTIMADOBRODataTable = CType(MyBase.Clone,ESTIMADOBRODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ESTIMADOBRODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnCARGADOR_DESDE = MyBase.Columns("CARGADOR_DESDE")
            Me.columnCARGADOR_HASTA = MyBase.Columns("CARGADOR_HASTA")
            Me.columnYEMA_DESDE = MyBase.Columns("YEMA_DESDE")
            Me.columnYEMA_HASTA = MyBase.Columns("YEMA_HASTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnCARGADOR_DESDE = New Global.System.Data.DataColumn("CARGADOR_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARGADOR_DESDE)
            Me.columnCARGADOR_HASTA = New Global.System.Data.DataColumn("CARGADOR_HASTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARGADOR_HASTA)
            Me.columnYEMA_DESDE = New Global.System.Data.DataColumn("YEMA_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMA_DESDE)
            Me.columnYEMA_HASTA = New Global.System.Data.DataColumn("YEMA_HASTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMA_HASTA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey21", New Global.System.Data.DataColumn() {Me.columnOT_NLAB}, true))
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnOT_NLAB.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewESTIMADOBRORow() As ESTIMADOBRORow
            Return CType(Me.NewRow,ESTIMADOBRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ESTIMADOBRORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ESTIMADOBRORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ESTIMADOBRORowChangedEvent) Is Nothing) Then
                RaiseEvent ESTIMADOBRORowChanged(Me, New ESTIMADOBRORowChangeEvent(CType(e.Row,ESTIMADOBRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ESTIMADOBRORowChangingEvent) Is Nothing) Then
                RaiseEvent ESTIMADOBRORowChanging(Me, New ESTIMADOBRORowChangeEvent(CType(e.Row,ESTIMADOBRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ESTIMADOBRORowDeletedEvent) Is Nothing) Then
                RaiseEvent ESTIMADOBRORowDeleted(Me, New ESTIMADOBRORowChangeEvent(CType(e.Row,ESTIMADOBRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ESTIMADOBRORowDeletingEvent) Is Nothing) Then
                RaiseEvent ESTIMADOBRORowDeleting(Me, New ESTIMADOBRORowChangeEvent(CType(e.Row,ESTIMADOBRORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveESTIMADOBRORow(ByVal row As ESTIMADOBRORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ESTIMADOBRODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LARGO_CARGADORDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnYEMA_DESDE As Global.System.Data.DataColumn
        
        Private columnYEMA_HASTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LARGO_CARGADOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMA_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMA_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEMA_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEMA_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LARGO_CARGADORRow
            Get
                Return CType(Me.Rows(index),LARGO_CARGADORRow)
            End Get
        End Property
        
        Public Event LARGO_CARGADORRowChanging As LARGO_CARGADORRowChangeEventHandler
        
        Public Event LARGO_CARGADORRowChanged As LARGO_CARGADORRowChangeEventHandler
        
        Public Event LARGO_CARGADORRowDeleting As LARGO_CARGADORRowChangeEventHandler
        
        Public Event LARGO_CARGADORRowDeleted As LARGO_CARGADORRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLARGO_CARGADORRow(ByVal row As LARGO_CARGADORRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLARGO_CARGADORRow(ByVal OT_NLAB As Integer, ByVal YEMA_DESDE As Integer, ByVal YEMA_HASTA As Integer) As LARGO_CARGADORRow
            Dim rowLARGO_CARGADORRow As LARGO_CARGADORRow = CType(Me.NewRow,LARGO_CARGADORRow)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB, YEMA_DESDE, YEMA_HASTA}
            rowLARGO_CARGADORRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLARGO_CARGADORRow)
            Return rowLARGO_CARGADORRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NLAB(ByVal OT_NLAB As Integer) As LARGO_CARGADORRow
            Return CType(Me.Rows.Find(New Object() {OT_NLAB}),LARGO_CARGADORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LARGO_CARGADORDataTable = CType(MyBase.Clone,LARGO_CARGADORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LARGO_CARGADORDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnYEMA_DESDE = MyBase.Columns("YEMA_DESDE")
            Me.columnYEMA_HASTA = MyBase.Columns("YEMA_HASTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnYEMA_DESDE = New Global.System.Data.DataColumn("YEMA_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMA_DESDE)
            Me.columnYEMA_HASTA = New Global.System.Data.DataColumn("YEMA_HASTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEMA_HASTA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey22", New Global.System.Data.DataColumn() {Me.columnOT_NLAB}, true))
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnOT_NLAB.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLARGO_CARGADORRow() As LARGO_CARGADORRow
            Return CType(Me.NewRow,LARGO_CARGADORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LARGO_CARGADORRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LARGO_CARGADORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LARGO_CARGADORRowChangedEvent) Is Nothing) Then
                RaiseEvent LARGO_CARGADORRowChanged(Me, New LARGO_CARGADORRowChangeEvent(CType(e.Row,LARGO_CARGADORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LARGO_CARGADORRowChangingEvent) Is Nothing) Then
                RaiseEvent LARGO_CARGADORRowChanging(Me, New LARGO_CARGADORRowChangeEvent(CType(e.Row,LARGO_CARGADORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LARGO_CARGADORRowDeletedEvent) Is Nothing) Then
                RaiseEvent LARGO_CARGADORRowDeleted(Me, New LARGO_CARGADORRowChangeEvent(CType(e.Row,LARGO_CARGADORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LARGO_CARGADORRowDeletingEvent) Is Nothing) Then
                RaiseEvent LARGO_CARGADORRowDeleting(Me, New LARGO_CARGADORRowChangeEvent(CType(e.Row,LARGO_CARGADORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLARGO_CARGADORRow(ByVal row As LARGO_CARGADORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LARGO_CARGADORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS_ELEMENTOS_PASODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS_ELEMENTOS_PASO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS_ELEMENTOS_PASORow
            Get
                Return CType(Me.Rows(index),ANALISIS_ELEMENTOS_PASORow)
            End Get
        End Property
        
        Public Event ANALISIS_ELEMENTOS_PASORowChanging As ANALISIS_ELEMENTOS_PASORowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASORowChanged As ANALISIS_ELEMENTOS_PASORowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASORowDeleting As ANALISIS_ELEMENTOS_PASORowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASORowDeleted As ANALISIS_ELEMENTOS_PASORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS_ELEMENTOS_PASORow(ByVal row As ANALISIS_ELEMENTOS_PASORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS_ELEMENTOS_PASORow(ByVal ANA_CODIGO As Double, ByVal ELE_CODIGO As String) As ANALISIS_ELEMENTOS_PASORow
            Dim rowANALISIS_ELEMENTOS_PASORow As ANALISIS_ELEMENTOS_PASORow = CType(Me.NewRow,ANALISIS_ELEMENTOS_PASORow)
            Dim columnValuesArray() As Object = New Object() {ANA_CODIGO, ELE_CODIGO}
            rowANALISIS_ELEMENTOS_PASORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS_ELEMENTOS_PASORow)
            Return rowANALISIS_ELEMENTOS_PASORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByANA_CODIGOELE_CODIGO(ByVal ANA_CODIGO As Double, ByVal ELE_CODIGO As String) As ANALISIS_ELEMENTOS_PASORow
            Return CType(Me.Rows.Find(New Object() {ANA_CODIGO, ELE_CODIGO}),ANALISIS_ELEMENTOS_PASORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS_ELEMENTOS_PASODataTable = CType(MyBase.Clone,ANALISIS_ELEMENTOS_PASODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS_ELEMENTOS_PASODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey30", New Global.System.Data.DataColumn() {Me.columnANA_CODIGO, Me.columnELE_CODIGO}, true))
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS_ELEMENTOS_PASORow() As ANALISIS_ELEMENTOS_PASORow
            Return CType(Me.NewRow,ANALISIS_ELEMENTOS_PASORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS_ELEMENTOS_PASORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS_ELEMENTOS_PASORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASORowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASORowChanged(Me, New ANALISIS_ELEMENTOS_PASORowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASORowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASORowChanging(Me, New ANALISIS_ELEMENTOS_PASORowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASORowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASORowDeleted(Me, New ANALISIS_ELEMENTOS_PASORowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASORowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASORowDeleting(Me, New ANALISIS_ELEMENTOS_PASORowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS_ELEMENTOS_PASORow(ByVal row As ANALISIS_ELEMENTOS_PASORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS_ELEMENTOS_PASODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTEST_NLABDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnOTC_NLAB_DESDE As Global.System.Data.DataColumn
        
        Private columnOTC_NLAB_HASTA As Global.System.Data.DataColumn
        
        Private columnOT_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTEST_NLAB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_NLAB_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_NLAB_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_NLAB_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_NLAB_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTEST_NLABRow
            Get
                Return CType(Me.Rows(index),OTEST_NLABRow)
            End Get
        End Property
        
        Public Event OTEST_NLABRowChanging As OTEST_NLABRowChangeEventHandler
        
        Public Event OTEST_NLABRowChanged As OTEST_NLABRowChangeEventHandler
        
        Public Event OTEST_NLABRowDeleting As OTEST_NLABRowChangeEventHandler
        
        Public Event OTEST_NLABRowDeleted As OTEST_NLABRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOTEST_NLABRow(ByVal row As OTEST_NLABRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOTEST_NLABRow(ByVal OT_NUMERO As Integer, ByVal TMU_CODIGO As Integer, ByVal OT_NLAB As Integer, ByVal OTC_NLAB_DESDE As Integer, ByVal OTC_NLAB_HASTA As Integer, ByVal OT_ESTADO As String) As OTEST_NLABRow
            Dim rowOTEST_NLABRow As OTEST_NLABRow = CType(Me.NewRow,OTEST_NLABRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, TMU_CODIGO, OT_NLAB, OTC_NLAB_DESDE, OTC_NLAB_HASTA, OT_ESTADO}
            rowOTEST_NLABRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTEST_NLABRow)
            Return rowOTEST_NLABRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROTMU_CODIGOOT_NLAB(ByVal OT_NUMERO As Integer, ByVal TMU_CODIGO As Integer, ByVal OT_NLAB As Integer) As OTEST_NLABRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, TMU_CODIGO, OT_NLAB}),OTEST_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTEST_NLABDataTable = CType(MyBase.Clone,OTEST_NLABDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTEST_NLABDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnOTC_NLAB_DESDE = MyBase.Columns("OTC_NLAB_DESDE")
            Me.columnOTC_NLAB_HASTA = MyBase.Columns("OTC_NLAB_HASTA")
            Me.columnOT_ESTADO = MyBase.Columns("OT_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnOTC_NLAB_DESDE = New Global.System.Data.DataColumn("OTC_NLAB_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_NLAB_DESDE)
            Me.columnOTC_NLAB_HASTA = New Global.System.Data.DataColumn("OTC_NLAB_HASTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_NLAB_HASTA)
            Me.columnOT_ESTADO = New Global.System.Data.DataColumn("OT_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey25", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnTMU_CODIGO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOTEST_NLABRow() As OTEST_NLABRow
            Return CType(Me.NewRow,OTEST_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTEST_NLABRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTEST_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTEST_NLABRowChangedEvent) Is Nothing) Then
                RaiseEvent OTEST_NLABRowChanged(Me, New OTEST_NLABRowChangeEvent(CType(e.Row,OTEST_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTEST_NLABRowChangingEvent) Is Nothing) Then
                RaiseEvent OTEST_NLABRowChanging(Me, New OTEST_NLABRowChangeEvent(CType(e.Row,OTEST_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTEST_NLABRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTEST_NLABRowDeleted(Me, New OTEST_NLABRowChangeEvent(CType(e.Row,OTEST_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTEST_NLABRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTEST_NLABRowDeleting(Me, New OTEST_NLABRowChangeEvent(CType(e.Row,OTEST_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOTEST_NLABRow(ByVal row As OTEST_NLABRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTEST_NLABDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_CODIFICACIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnMUESTRA As Global.System.Data.DataColumn
        
        Private columnOTC_NLAB_DESDE As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnOTC_CANT_MUESTRAS As Global.System.Data.DataColumn
        
        Private columnOTC_NLAB_HASTA As Global.System.Data.DataColumn
        
        Private columnOTC_PRECIOUN As Global.System.Data.DataColumn
        
        Private columnOTC_PRECIONET As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_CODIFICACION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_NLAB_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_NLAB_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_CANT_MUESTRASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_CANT_MUESTRAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_NLAB_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_NLAB_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_PRECIOUNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_PRECIOUN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_PRECIONETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_PRECIONET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_CODIFICACIONRow
            Get
                Return CType(Me.Rows(index),OT_CODIFICACIONRow)
            End Get
        End Property
        
        Public Event OT_CODIFICACIONRowChanging As OT_CODIFICACIONRowChangeEventHandler
        
        Public Event OT_CODIFICACIONRowChanged As OT_CODIFICACIONRowChangeEventHandler
        
        Public Event OT_CODIFICACIONRowDeleting As OT_CODIFICACIONRowChangeEventHandler
        
        Public Event OT_CODIFICACIONRowDeleted As OT_CODIFICACIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_CODIFICACIONRow(ByVal row As OT_CODIFICACIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_CODIFICACIONRow(ByVal OT_NUMERO As Integer, ByVal MUESTRA As String, ByVal OTC_NLAB_DESDE As Integer, ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal OTC_CANT_MUESTRAS As Integer, ByVal OTC_NLAB_HASTA As Integer, ByVal OTC_PRECIOUN As Integer, ByVal OTC_PRECIONET As Integer) As OT_CODIFICACIONRow
            Dim rowOT_CODIFICACIONRow As OT_CODIFICACIONRow = CType(Me.NewRow,OT_CODIFICACIONRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, MUESTRA, OTC_NLAB_DESDE, ANA_CODIGO, ANA_ANALISIS, OTC_CANT_MUESTRAS, OTC_NLAB_HASTA, OTC_PRECIOUN, OTC_PRECIONET}
            rowOT_CODIFICACIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_CODIFICACIONRow)
            Return rowOT_CODIFICACIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROMUESTRAOTC_NLAB_DESDEANA_CODIGO(ByVal OT_NUMERO As Integer, ByVal MUESTRA As String, ByVal OTC_NLAB_DESDE As Integer, ByVal ANA_CODIGO As Double) As OT_CODIFICACIONRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, MUESTRA, OTC_NLAB_DESDE, ANA_CODIGO}),OT_CODIFICACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_CODIFICACIONDataTable = CType(MyBase.Clone,OT_CODIFICACIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_CODIFICACIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnMUESTRA = MyBase.Columns("MUESTRA")
            Me.columnOTC_NLAB_DESDE = MyBase.Columns("OTC_NLAB_DESDE")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnOTC_CANT_MUESTRAS = MyBase.Columns("OTC_CANT_MUESTRAS")
            Me.columnOTC_NLAB_HASTA = MyBase.Columns("OTC_NLAB_HASTA")
            Me.columnOTC_PRECIOUN = MyBase.Columns("OTC_PRECIOUN")
            Me.columnOTC_PRECIONET = MyBase.Columns("OTC_PRECIONET")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnMUESTRA = New Global.System.Data.DataColumn("MUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUESTRA)
            Me.columnOTC_NLAB_DESDE = New Global.System.Data.DataColumn("OTC_NLAB_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_NLAB_DESDE)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnOTC_CANT_MUESTRAS = New Global.System.Data.DataColumn("OTC_CANT_MUESTRAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_CANT_MUESTRAS)
            Me.columnOTC_NLAB_HASTA = New Global.System.Data.DataColumn("OTC_NLAB_HASTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_NLAB_HASTA)
            Me.columnOTC_PRECIOUN = New Global.System.Data.DataColumn("OTC_PRECIOUN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_PRECIOUN)
            Me.columnOTC_PRECIONET = New Global.System.Data.DataColumn("OTC_PRECIONET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_PRECIONET)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey27", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnMUESTRA, Me.columnOTC_NLAB_DESDE, Me.columnANA_CODIGO}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnMUESTRA.AllowDBNull = false
            Me.columnOTC_NLAB_DESDE.AllowDBNull = false
            Me.columnANA_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_CODIFICACIONRow() As OT_CODIFICACIONRow
            Return CType(Me.NewRow,OT_CODIFICACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_CODIFICACIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_CODIFICACIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_CODIFICACIONRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACIONRowChanged(Me, New OT_CODIFICACIONRowChangeEvent(CType(e.Row,OT_CODIFICACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_CODIFICACIONRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACIONRowChanging(Me, New OT_CODIFICACIONRowChangeEvent(CType(e.Row,OT_CODIFICACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_CODIFICACIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACIONRowDeleted(Me, New OT_CODIFICACIONRowChangeEvent(CType(e.Row,OT_CODIFICACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_CODIFICACIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACIONRowDeleting(Me, New OT_CODIFICACIONRowChangeEvent(CType(e.Row,OT_CODIFICACIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_CODIFICACIONRow(ByVal row As OT_CODIFICACIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_CODIFICACIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DIGITA_RESULTADOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnDIGRES_FECHA As Global.System.Data.DataColumn
        
        Private columnDIGRES_ANALIZADO_POR As Global.System.Data.DataColumn
        
        Private columnDIGRES_DIGITADO_POR As Global.System.Data.DataColumn
        
        Private columnDIGRES_BLANCO As Global.System.Data.DataColumn
        
        Private columnDIGRES_FACTOR As Global.System.Data.DataColumn
        
        Private columnDIGRES_LECTURA As Global.System.Data.DataColumn
        
        Private columnDIGRES_RESULTADO As Global.System.Data.DataColumn
        
        Private columnELE_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DIGITA_RESULTADOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_ANALIZADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_ANALIZADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_DIGITADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_DIGITADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_BLANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_BLANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_FACTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_FACTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_LECTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_LECTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_RESULTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_RESULTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DIGITA_RESULTADOSRow
            Get
                Return CType(Me.Rows(index),DIGITA_RESULTADOSRow)
            End Get
        End Property
        
        Public Event DIGITA_RESULTADOSRowChanging As DIGITA_RESULTADOSRowChangeEventHandler
        
        Public Event DIGITA_RESULTADOSRowChanged As DIGITA_RESULTADOSRowChangeEventHandler
        
        Public Event DIGITA_RESULTADOSRowDeleting As DIGITA_RESULTADOSRowChangeEventHandler
        
        Public Event DIGITA_RESULTADOSRowDeleted As DIGITA_RESULTADOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDIGITA_RESULTADOSRow(ByVal row As DIGITA_RESULTADOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDIGITA_RESULTADOSRow(ByVal OT_NUMERO As Integer, ByVal TMU_CODIGO As Integer, ByVal OT_NLAB As Integer, ByVal ANA_CODIGO As Double, ByVal ELE_CODIGO As String, ByVal DIGRES_FECHA As Date, ByVal DIGRES_ANALIZADO_POR As String, ByVal DIGRES_DIGITADO_POR As String, ByVal DIGRES_BLANCO As Double, ByVal DIGRES_FACTOR As Double, ByVal DIGRES_LECTURA As Double, ByVal DIGRES_RESULTADO As Double, ByVal ELE_ESTADO As String) As DIGITA_RESULTADOSRow
            Dim rowDIGITA_RESULTADOSRow As DIGITA_RESULTADOSRow = CType(Me.NewRow,DIGITA_RESULTADOSRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, TMU_CODIGO, OT_NLAB, ANA_CODIGO, ELE_CODIGO, DIGRES_FECHA, DIGRES_ANALIZADO_POR, DIGRES_DIGITADO_POR, DIGRES_BLANCO, DIGRES_FACTOR, DIGRES_LECTURA, DIGRES_RESULTADO, ELE_ESTADO}
            rowDIGITA_RESULTADOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDIGITA_RESULTADOSRow)
            Return rowDIGITA_RESULTADOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROTMU_CODIGOOT_NLABANA_CODIGOELE_CODIGO(ByVal OT_NUMERO As Integer, ByVal TMU_CODIGO As Integer, ByVal OT_NLAB As Integer, ByVal ANA_CODIGO As Double, ByVal ELE_CODIGO As String) As DIGITA_RESULTADOSRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, TMU_CODIGO, OT_NLAB, ANA_CODIGO, ELE_CODIGO}),DIGITA_RESULTADOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DIGITA_RESULTADOSDataTable = CType(MyBase.Clone,DIGITA_RESULTADOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DIGITA_RESULTADOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnDIGRES_FECHA = MyBase.Columns("DIGRES_FECHA")
            Me.columnDIGRES_ANALIZADO_POR = MyBase.Columns("DIGRES_ANALIZADO_POR")
            Me.columnDIGRES_DIGITADO_POR = MyBase.Columns("DIGRES_DIGITADO_POR")
            Me.columnDIGRES_BLANCO = MyBase.Columns("DIGRES_BLANCO")
            Me.columnDIGRES_FACTOR = MyBase.Columns("DIGRES_FACTOR")
            Me.columnDIGRES_LECTURA = MyBase.Columns("DIGRES_LECTURA")
            Me.columnDIGRES_RESULTADO = MyBase.Columns("DIGRES_RESULTADO")
            Me.columnELE_ESTADO = MyBase.Columns("ELE_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnDIGRES_FECHA = New Global.System.Data.DataColumn("DIGRES_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_FECHA)
            Me.columnDIGRES_ANALIZADO_POR = New Global.System.Data.DataColumn("DIGRES_ANALIZADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_ANALIZADO_POR)
            Me.columnDIGRES_DIGITADO_POR = New Global.System.Data.DataColumn("DIGRES_DIGITADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_DIGITADO_POR)
            Me.columnDIGRES_BLANCO = New Global.System.Data.DataColumn("DIGRES_BLANCO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_BLANCO)
            Me.columnDIGRES_FACTOR = New Global.System.Data.DataColumn("DIGRES_FACTOR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_FACTOR)
            Me.columnDIGRES_LECTURA = New Global.System.Data.DataColumn("DIGRES_LECTURA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_LECTURA)
            Me.columnDIGRES_RESULTADO = New Global.System.Data.DataColumn("DIGRES_RESULTADO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_RESULTADO)
            Me.columnELE_ESTADO = New Global.System.Data.DataColumn("ELE_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey26", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnTMU_CODIGO, Me.columnOT_NLAB, Me.columnANA_CODIGO, Me.columnELE_CODIGO}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDIGITA_RESULTADOSRow() As DIGITA_RESULTADOSRow
            Return CType(Me.NewRow,DIGITA_RESULTADOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DIGITA_RESULTADOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DIGITA_RESULTADOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DIGITA_RESULTADOSRowChangedEvent) Is Nothing) Then
                RaiseEvent DIGITA_RESULTADOSRowChanged(Me, New DIGITA_RESULTADOSRowChangeEvent(CType(e.Row,DIGITA_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DIGITA_RESULTADOSRowChangingEvent) Is Nothing) Then
                RaiseEvent DIGITA_RESULTADOSRowChanging(Me, New DIGITA_RESULTADOSRowChangeEvent(CType(e.Row,DIGITA_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DIGITA_RESULTADOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DIGITA_RESULTADOSRowDeleted(Me, New DIGITA_RESULTADOSRowChangeEvent(CType(e.Row,DIGITA_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DIGITA_RESULTADOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DIGITA_RESULTADOSRowDeleting(Me, New DIGITA_RESULTADOSRowChangeEvent(CType(e.Row,DIGITA_RESULTADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDIGITA_RESULTADOSRow(ByVal row As DIGITA_RESULTADOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DIGITA_RESULTADOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DUPLICA_RESULTADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        Private columnNUMERO_DIGITACION As Global.System.Data.DataColumn
        
        Private columnDIGRES_FECHA As Global.System.Data.DataColumn
        
        Private columnDIGRES_NLAB_DESDE As Global.System.Data.DataColumn
        
        Private columnDIGRES_NLAB_HASTA As Global.System.Data.DataColumn
        
        Private columnDIGRES_ANALIZADO_POR As Global.System.Data.DataColumn
        
        Private columnDIGRES_DIGITADO_POR As Global.System.Data.DataColumn
        
        Private columnDIGRES_BLANCO As Global.System.Data.DataColumn
        
        Private columnDIGRES_FACTOR As Global.System.Data.DataColumn
        
        Private columnDIGRES_LECTURA As Global.System.Data.DataColumn
        
        Private columnDIGRES_RESULTADO As Global.System.Data.DataColumn
        
        Private columnELE_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DUPLICA_RESULTADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERO_DIGITACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERO_DIGITACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_NLAB_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_NLAB_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_NLAB_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_NLAB_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_ANALIZADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_ANALIZADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_DIGITADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_DIGITADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_BLANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_BLANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_FACTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_FACTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_LECTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_LECTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIGRES_RESULTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIGRES_RESULTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DUPLICA_RESULTADORow
            Get
                Return CType(Me.Rows(index),DUPLICA_RESULTADORow)
            End Get
        End Property
        
        Public Event DUPLICA_RESULTADORowChanging As DUPLICA_RESULTADORowChangeEventHandler
        
        Public Event DUPLICA_RESULTADORowChanged As DUPLICA_RESULTADORowChangeEventHandler
        
        Public Event DUPLICA_RESULTADORowDeleting As DUPLICA_RESULTADORowChangeEventHandler
        
        Public Event DUPLICA_RESULTADORowDeleted As DUPLICA_RESULTADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDUPLICA_RESULTADORow(ByVal row As DUPLICA_RESULTADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDUPLICA_RESULTADORow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal TMU_CODIGO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal ANA_CODIGO As Double,  _
                    ByVal ELE_CODIGO As String,  _
                    ByVal NUMERO_DIGITACION As Integer,  _
                    ByVal DIGRES_FECHA As Date,  _
                    ByVal DIGRES_NLAB_DESDE As Integer,  _
                    ByVal DIGRES_NLAB_HASTA As Integer,  _
                    ByVal DIGRES_ANALIZADO_POR As String,  _
                    ByVal DIGRES_DIGITADO_POR As String,  _
                    ByVal DIGRES_BLANCO As Double,  _
                    ByVal DIGRES_FACTOR As Double,  _
                    ByVal DIGRES_LECTURA As Double,  _
                    ByVal DIGRES_RESULTADO As Double,  _
                    ByVal ELE_ESTADO As String) As DUPLICA_RESULTADORow
            Dim rowDUPLICA_RESULTADORow As DUPLICA_RESULTADORow = CType(Me.NewRow,DUPLICA_RESULTADORow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, TMU_CODIGO, OT_NLAB, ANA_CODIGO, ELE_CODIGO, NUMERO_DIGITACION, DIGRES_FECHA, DIGRES_NLAB_DESDE, DIGRES_NLAB_HASTA, DIGRES_ANALIZADO_POR, DIGRES_DIGITADO_POR, DIGRES_BLANCO, DIGRES_FACTOR, DIGRES_LECTURA, DIGRES_RESULTADO, ELE_ESTADO}
            rowDUPLICA_RESULTADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDUPLICA_RESULTADORow)
            Return rowDUPLICA_RESULTADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROTMU_CODIGOOT_NLABANA_CODIGOELE_CODIGONUMERO_DIGITACION(ByVal OT_NUMERO As Integer, ByVal TMU_CODIGO As Integer, ByVal OT_NLAB As Integer, ByVal ANA_CODIGO As Double, ByVal ELE_CODIGO As String, ByVal NUMERO_DIGITACION As Integer) As DUPLICA_RESULTADORow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, TMU_CODIGO, OT_NLAB, ANA_CODIGO, ELE_CODIGO, NUMERO_DIGITACION}),DUPLICA_RESULTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DUPLICA_RESULTADODataTable = CType(MyBase.Clone,DUPLICA_RESULTADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DUPLICA_RESULTADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
            Me.columnNUMERO_DIGITACION = MyBase.Columns("NUMERO_DIGITACION")
            Me.columnDIGRES_FECHA = MyBase.Columns("DIGRES_FECHA")
            Me.columnDIGRES_NLAB_DESDE = MyBase.Columns("DIGRES_NLAB_DESDE")
            Me.columnDIGRES_NLAB_HASTA = MyBase.Columns("DIGRES_NLAB_HASTA")
            Me.columnDIGRES_ANALIZADO_POR = MyBase.Columns("DIGRES_ANALIZADO_POR")
            Me.columnDIGRES_DIGITADO_POR = MyBase.Columns("DIGRES_DIGITADO_POR")
            Me.columnDIGRES_BLANCO = MyBase.Columns("DIGRES_BLANCO")
            Me.columnDIGRES_FACTOR = MyBase.Columns("DIGRES_FACTOR")
            Me.columnDIGRES_LECTURA = MyBase.Columns("DIGRES_LECTURA")
            Me.columnDIGRES_RESULTADO = MyBase.Columns("DIGRES_RESULTADO")
            Me.columnELE_ESTADO = MyBase.Columns("ELE_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.columnNUMERO_DIGITACION = New Global.System.Data.DataColumn("NUMERO_DIGITACION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERO_DIGITACION)
            Me.columnDIGRES_FECHA = New Global.System.Data.DataColumn("DIGRES_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_FECHA)
            Me.columnDIGRES_NLAB_DESDE = New Global.System.Data.DataColumn("DIGRES_NLAB_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_NLAB_DESDE)
            Me.columnDIGRES_NLAB_HASTA = New Global.System.Data.DataColumn("DIGRES_NLAB_HASTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_NLAB_HASTA)
            Me.columnDIGRES_ANALIZADO_POR = New Global.System.Data.DataColumn("DIGRES_ANALIZADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_ANALIZADO_POR)
            Me.columnDIGRES_DIGITADO_POR = New Global.System.Data.DataColumn("DIGRES_DIGITADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_DIGITADO_POR)
            Me.columnDIGRES_BLANCO = New Global.System.Data.DataColumn("DIGRES_BLANCO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_BLANCO)
            Me.columnDIGRES_FACTOR = New Global.System.Data.DataColumn("DIGRES_FACTOR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_FACTOR)
            Me.columnDIGRES_LECTURA = New Global.System.Data.DataColumn("DIGRES_LECTURA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_LECTURA)
            Me.columnDIGRES_RESULTADO = New Global.System.Data.DataColumn("DIGRES_RESULTADO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIGRES_RESULTADO)
            Me.columnELE_ESTADO = New Global.System.Data.DataColumn("ELE_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey28", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnTMU_CODIGO, Me.columnOT_NLAB, Me.columnANA_CODIGO, Me.columnELE_CODIGO, Me.columnNUMERO_DIGITACION}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnANA_CODIGO.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
            Me.columnNUMERO_DIGITACION.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDUPLICA_RESULTADORow() As DUPLICA_RESULTADORow
            Return CType(Me.NewRow,DUPLICA_RESULTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DUPLICA_RESULTADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DUPLICA_RESULTADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DUPLICA_RESULTADORowChangedEvent) Is Nothing) Then
                RaiseEvent DUPLICA_RESULTADORowChanged(Me, New DUPLICA_RESULTADORowChangeEvent(CType(e.Row,DUPLICA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DUPLICA_RESULTADORowChangingEvent) Is Nothing) Then
                RaiseEvent DUPLICA_RESULTADORowChanging(Me, New DUPLICA_RESULTADORowChangeEvent(CType(e.Row,DUPLICA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DUPLICA_RESULTADORowDeletedEvent) Is Nothing) Then
                RaiseEvent DUPLICA_RESULTADORowDeleted(Me, New DUPLICA_RESULTADORowChangeEvent(CType(e.Row,DUPLICA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DUPLICA_RESULTADORowDeletingEvent) Is Nothing) Then
                RaiseEvent DUPLICA_RESULTADORowDeleting(Me, New DUPLICA_RESULTADORowChangeEvent(CType(e.Row,DUPLICA_RESULTADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDUPLICA_RESULTADORow(ByVal row As DUPLICA_RESULTADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DUPLICA_RESULTADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS_ELEMENTOS_PASO2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOTC_NLAB_DESDE As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS_ELEMENTOS_PASO2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_NLAB_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_NLAB_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS_ELEMENTOS_PASO2Row
            Get
                Return CType(Me.Rows(index),ANALISIS_ELEMENTOS_PASO2Row)
            End Get
        End Property
        
        Public Event ANALISIS_ELEMENTOS_PASO2RowChanging As ANALISIS_ELEMENTOS_PASO2RowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASO2RowChanged As ANALISIS_ELEMENTOS_PASO2RowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASO2RowDeleting As ANALISIS_ELEMENTOS_PASO2RowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASO2RowDeleted As ANALISIS_ELEMENTOS_PASO2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS_ELEMENTOS_PASO2Row(ByVal row As ANALISIS_ELEMENTOS_PASO2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS_ELEMENTOS_PASO2Row(ByVal OTC_NLAB_DESDE As Integer, ByVal ELE_CODIGO As String) As ANALISIS_ELEMENTOS_PASO2Row
            Dim rowANALISIS_ELEMENTOS_PASO2Row As ANALISIS_ELEMENTOS_PASO2Row = CType(Me.NewRow,ANALISIS_ELEMENTOS_PASO2Row)
            Dim columnValuesArray() As Object = New Object() {OTC_NLAB_DESDE, ELE_CODIGO}
            rowANALISIS_ELEMENTOS_PASO2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS_ELEMENTOS_PASO2Row)
            Return rowANALISIS_ELEMENTOS_PASO2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOTC_NLAB_DESDEELE_CODIGO(ByVal OTC_NLAB_DESDE As Integer, ByVal ELE_CODIGO As String) As ANALISIS_ELEMENTOS_PASO2Row
            Return CType(Me.Rows.Find(New Object() {OTC_NLAB_DESDE, ELE_CODIGO}),ANALISIS_ELEMENTOS_PASO2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS_ELEMENTOS_PASO2DataTable = CType(MyBase.Clone,ANALISIS_ELEMENTOS_PASO2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS_ELEMENTOS_PASO2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOTC_NLAB_DESDE = MyBase.Columns("OTC_NLAB_DESDE")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOTC_NLAB_DESDE = New Global.System.Data.DataColumn("OTC_NLAB_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_NLAB_DESDE)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey3", New Global.System.Data.DataColumn() {Me.columnOTC_NLAB_DESDE, Me.columnELE_CODIGO}, true))
            Me.columnOTC_NLAB_DESDE.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS_ELEMENTOS_PASO2Row() As ANALISIS_ELEMENTOS_PASO2Row
            Return CType(Me.NewRow,ANALISIS_ELEMENTOS_PASO2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS_ELEMENTOS_PASO2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS_ELEMENTOS_PASO2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO2RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO2RowChanged(Me, New ANALISIS_ELEMENTOS_PASO2RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO2RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO2RowChanging(Me, New ANALISIS_ELEMENTOS_PASO2RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO2RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO2RowDeleted(Me, New ANALISIS_ELEMENTOS_PASO2RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO2RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO2RowDeleting(Me, New ANALISIS_ELEMENTOS_PASO2RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS_ELEMENTOS_PASO2Row(ByVal row As ANALISIS_ELEMENTOS_PASO2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS_ELEMENTOS_PASO2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FOLIAR_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnFOLANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnFOLANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnESPECIE As Global.System.Data.DataColumn
        
        Private columnVARIEDAD As Global.System.Data.DataColumn
        
        Private columnTEJIDO As Global.System.Data.DataColumn
        
        Private columnFOLANT_EDAD As Global.System.Data.DataColumn
        
        Private columnFOLANT_CUARTEL1 As Global.System.Data.DataColumn
        
        Private columnFOLANT_CUARTEL2 As Global.System.Data.DataColumn
        
        Private columnFOLANT_RTO_ANT As Global.System.Data.DataColumn
        
        Private columnFOLANT_CARGA As Global.System.Data.DataColumn
        
        Private columnFOLANT_VIGOR As Global.System.Data.DataColumn
        
        Private columnFOLANT_DENSIDAD As Global.System.Data.DataColumn
        
        Private columnFOLANT_APARIENCIA As Global.System.Data.DataColumn
        
        Private columnFOLANT_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnFOLANT_FOTO1 As Global.System.Data.DataColumn
        
        Private columnFOLANT_FOTO2 As Global.System.Data.DataColumn
        
        Private columnFOLANT_RECOMENDACION As Global.System.Data.DataColumn
        
        Private columnFOLANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnFOLANT_FMUESTREO As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FOLIAR_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VARIEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_EDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_EDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_CUARTEL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_CUARTEL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_CUARTEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_CUARTEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_RTO_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_RTO_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_CARGAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_CARGA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_VIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_VIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_DENSIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_DENSIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_APARIENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_APARIENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_FOTO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_FOTO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_FOTO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_FOTO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_RECOMENDACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_RECOMENDACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOLANT_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOLANT_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FOLIAR_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_FOLIAR_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_FOLIAR_ANTECEDENTESRowChanging As OT_FOLIAR_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FOLIAR_ANTECEDENTESRowChanged As OT_FOLIAR_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FOLIAR_ANTECEDENTESRowDeleting As OT_FOLIAR_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FOLIAR_ANTECEDENTESRowDeleted As OT_FOLIAR_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FOLIAR_ANTECEDENTESRow(ByVal row As OT_FOLIAR_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FOLIAR_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal FOLANT_PREDIO As String,  _
                    ByVal FOLANT_LOCALIDAD As String,  _
                    ByVal ESPECIE As String,  _
                    ByVal VARIEDAD As String,  _
                    ByVal TEJIDO As String,  _
                    ByVal FOLANT_EDAD As String,  _
                    ByVal FOLANT_CUARTEL1 As String,  _
                    ByVal FOLANT_CUARTEL2 As String,  _
                    ByVal FOLANT_RTO_ANT As String,  _
                    ByVal FOLANT_CARGA As String,  _
                    ByVal FOLANT_VIGOR As String,  _
                    ByVal FOLANT_DENSIDAD As String,  _
                    ByVal FOLANT_APARIENCIA As String,  _
                    ByVal FOLANT_OBSERVACIONES As String,  _
                    ByVal FOLANT_FOTO1 As String,  _
                    ByVal FOLANT_FOTO2 As String,  _
                    ByVal FOLANT_RECOMENDACION As String,  _
                    ByVal FOLANT_MUESTREADOR As String,  _
                    ByVal FOLANT_FMUESTREO As Date,  _
                    ByVal NLAB_ESTADO As String) As OT_FOLIAR_ANTECEDENTESRow
            Dim rowOT_FOLIAR_ANTECEDENTESRow As OT_FOLIAR_ANTECEDENTESRow = CType(Me.NewRow,OT_FOLIAR_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, FOLANT_PREDIO, FOLANT_LOCALIDAD, ESPECIE, VARIEDAD, TEJIDO, FOLANT_EDAD, FOLANT_CUARTEL1, FOLANT_CUARTEL2, FOLANT_RTO_ANT, FOLANT_CARGA, FOLANT_VIGOR, FOLANT_DENSIDAD, FOLANT_APARIENCIA, FOLANT_OBSERVACIONES, FOLANT_FOTO1, FOLANT_FOTO2, FOLANT_RECOMENDACION, FOLANT_MUESTREADOR, FOLANT_FMUESTREO, NLAB_ESTADO}
            rowOT_FOLIAR_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FOLIAR_ANTECEDENTESRow)
            Return rowOT_FOLIAR_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FOLIAR_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FOLIAR_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FOLIAR_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_FOLIAR_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FOLIAR_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnFOLANT_PREDIO = MyBase.Columns("FOLANT_PREDIO")
            Me.columnFOLANT_LOCALIDAD = MyBase.Columns("FOLANT_LOCALIDAD")
            Me.columnESPECIE = MyBase.Columns("ESPECIE")
            Me.columnVARIEDAD = MyBase.Columns("VARIEDAD")
            Me.columnTEJIDO = MyBase.Columns("TEJIDO")
            Me.columnFOLANT_EDAD = MyBase.Columns("FOLANT_EDAD")
            Me.columnFOLANT_CUARTEL1 = MyBase.Columns("FOLANT_CUARTEL1")
            Me.columnFOLANT_CUARTEL2 = MyBase.Columns("FOLANT_CUARTEL2")
            Me.columnFOLANT_RTO_ANT = MyBase.Columns("FOLANT_RTO_ANT")
            Me.columnFOLANT_CARGA = MyBase.Columns("FOLANT_CARGA")
            Me.columnFOLANT_VIGOR = MyBase.Columns("FOLANT_VIGOR")
            Me.columnFOLANT_DENSIDAD = MyBase.Columns("FOLANT_DENSIDAD")
            Me.columnFOLANT_APARIENCIA = MyBase.Columns("FOLANT_APARIENCIA")
            Me.columnFOLANT_OBSERVACIONES = MyBase.Columns("FOLANT_OBSERVACIONES")
            Me.columnFOLANT_FOTO1 = MyBase.Columns("FOLANT_FOTO1")
            Me.columnFOLANT_FOTO2 = MyBase.Columns("FOLANT_FOTO2")
            Me.columnFOLANT_RECOMENDACION = MyBase.Columns("FOLANT_RECOMENDACION")
            Me.columnFOLANT_MUESTREADOR = MyBase.Columns("FOLANT_MUESTREADOR")
            Me.columnFOLANT_FMUESTREO = MyBase.Columns("FOLANT_FMUESTREO")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnFOLANT_PREDIO = New Global.System.Data.DataColumn("FOLANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_PREDIO)
            Me.columnFOLANT_LOCALIDAD = New Global.System.Data.DataColumn("FOLANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_LOCALIDAD)
            Me.columnESPECIE = New Global.System.Data.DataColumn("ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESPECIE)
            Me.columnVARIEDAD = New Global.System.Data.DataColumn("VARIEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIEDAD)
            Me.columnTEJIDO = New Global.System.Data.DataColumn("TEJIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJIDO)
            Me.columnFOLANT_EDAD = New Global.System.Data.DataColumn("FOLANT_EDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_EDAD)
            Me.columnFOLANT_CUARTEL1 = New Global.System.Data.DataColumn("FOLANT_CUARTEL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_CUARTEL1)
            Me.columnFOLANT_CUARTEL2 = New Global.System.Data.DataColumn("FOLANT_CUARTEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_CUARTEL2)
            Me.columnFOLANT_RTO_ANT = New Global.System.Data.DataColumn("FOLANT_RTO_ANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_RTO_ANT)
            Me.columnFOLANT_CARGA = New Global.System.Data.DataColumn("FOLANT_CARGA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_CARGA)
            Me.columnFOLANT_VIGOR = New Global.System.Data.DataColumn("FOLANT_VIGOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_VIGOR)
            Me.columnFOLANT_DENSIDAD = New Global.System.Data.DataColumn("FOLANT_DENSIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_DENSIDAD)
            Me.columnFOLANT_APARIENCIA = New Global.System.Data.DataColumn("FOLANT_APARIENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_APARIENCIA)
            Me.columnFOLANT_OBSERVACIONES = New Global.System.Data.DataColumn("FOLANT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_OBSERVACIONES)
            Me.columnFOLANT_FOTO1 = New Global.System.Data.DataColumn("FOLANT_FOTO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_FOTO1)
            Me.columnFOLANT_FOTO2 = New Global.System.Data.DataColumn("FOLANT_FOTO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_FOTO2)
            Me.columnFOLANT_RECOMENDACION = New Global.System.Data.DataColumn("FOLANT_RECOMENDACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_RECOMENDACION)
            Me.columnFOLANT_MUESTREADOR = New Global.System.Data.DataColumn("FOLANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_MUESTREADOR)
            Me.columnFOLANT_FMUESTREO = New Global.System.Data.DataColumn("FOLANT_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOLANT_FMUESTREO)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey2", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FOLIAR_ANTECEDENTESRow() As OT_FOLIAR_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_FOLIAR_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FOLIAR_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FOLIAR_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FOLIAR_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FOLIAR_ANTECEDENTESRowChanged(Me, New OT_FOLIAR_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FOLIAR_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FOLIAR_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FOLIAR_ANTECEDENTESRowChanging(Me, New OT_FOLIAR_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FOLIAR_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FOLIAR_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FOLIAR_ANTECEDENTESRowDeleted(Me, New OT_FOLIAR_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FOLIAR_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FOLIAR_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FOLIAR_ANTECEDENTESRowDeleting(Me, New OT_FOLIAR_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FOLIAR_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FOLIAR_ANTECEDENTESRow(ByVal row As OT_FOLIAR_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FOLIAR_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDEN_TRABAJODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnCOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_FECHA_ORDEN As Global.System.Data.DataColumn
        
        Private columnOT_FAC_RUT As Global.System.Data.DataColumn
        
        Private columnPRO_PRODUCTOR As Global.System.Data.DataColumn
        
        Private columnOT_EMPRESA As Global.System.Data.DataColumn
        
        Private columnOT_PREDIO As Global.System.Data.DataColumn
        
        Private columnOT_DIRECCION As Global.System.Data.DataColumn
        
        Private columnOT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnOT_COMUNA As Global.System.Data.DataColumn
        
        Private columnOT_CIUDAD As Global.System.Data.DataColumn
        
        Private columnOT_PROVINCIA As Global.System.Data.DataColumn
        
        Private columnOT_REGION As Global.System.Data.DataColumn
        
        Private columnOT_FONO1 As Global.System.Data.DataColumn
        
        Private columnOT_FONO2 As Global.System.Data.DataColumn
        
        Private columnOT_CELULAR1 As Global.System.Data.DataColumn
        
        Private columnOT_CELULAR2 As Global.System.Data.DataColumn
        
        Private columnOT_FAX1 As Global.System.Data.DataColumn
        
        Private columnOT_FAX2 As Global.System.Data.DataColumn
        
        Private columnOT_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnOT_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnPRO_RUT As Global.System.Data.DataColumn
        
        Private columnOT_REMITE As Global.System.Data.DataColumn
        
        Private columnOT_REM_FONO1 As Global.System.Data.DataColumn
        
        Private columnOT_REM_FONO2 As Global.System.Data.DataColumn
        
        Private columnOT_REM_CELULAR1 As Global.System.Data.DataColumn
        
        Private columnOT_REM_CELULAR2 As Global.System.Data.DataColumn
        
        Private columnOT_REM_FAX1 As Global.System.Data.DataColumn
        
        Private columnOT_REM_FAX2 As Global.System.Data.DataColumn
        
        Private columnOT_REM_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnOT_REM_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_NOMBRE As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FONO1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FONO2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_CELULAR1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_CELULAR2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FAX1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_FAX2 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnOT_SOL_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnOT_FAC_RSOCIAL As Global.System.Data.DataColumn
        
        Private columnOT_FAC_FONO1 As Global.System.Data.DataColumn
        
        Private columnOT_FAC_FONO2 As Global.System.Data.DataColumn
        
        Private columnOT_FAC_GIRO As Global.System.Data.DataColumn
        
        Private columnOT_FAC_DIRECCION As Global.System.Data.DataColumn
        
        Private columnOT_FAC_COMUNA As Global.System.Data.DataColumn
        
        Private columnOT_FAC_CIUDAD As Global.System.Data.DataColumn
        
        Private columnOT_FAC_ENCPAGO As Global.System.Data.DataColumn
        
        Private columnOT_FAC_F1PAGO As Global.System.Data.DataColumn
        
        Private columnOT_FAC_F2PAGO As Global.System.Data.DataColumn
        
        Private columnOT_FAC_OBSPAGO As Global.System.Data.DataColumn
        
        Private columnOT_FAC_CONDICION_PAGO As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_RETIRALAB As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_FONO As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_FAX As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_EMAIL As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_CORREO As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_BUS As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_OTRO As Global.System.Data.DataColumn
        
        Private columnOT_DESP_POR_OTRO_GLOSA As Global.System.Data.DataColumn
        
        Private columnOT_DESP_SENORES As Global.System.Data.DataColumn
        
        Private columnOT_DESP_ATENCION As Global.System.Data.DataColumn
        
        Private columnOT_DESP_DIRECCION As Global.System.Data.DataColumn
        
        Private columnOT_DESP_CASILLA As Global.System.Data.DataColumn
        
        Private columnOT_DESP_COMUNA As Global.System.Data.DataColumn
        
        Private columnOT_DESP_CIUDAD As Global.System.Data.DataColumn
        
        Private columnOT_DESP_FECHA As Global.System.Data.DataColumn
        
        Private columnOT_DESP_FONO1 As Global.System.Data.DataColumn
        
        Private columnOT_DESP_FONO2 As Global.System.Data.DataColumn
        
        Private columnOT_DESP_CELULAR1 As Global.System.Data.DataColumn
        
        Private columnOT_DESP_CELULAR2 As Global.System.Data.DataColumn
        
        Private columnOT_DESP_FAX1 As Global.System.Data.DataColumn
        
        Private columnOT_DESP_FAX2 As Global.System.Data.DataColumn
        
        Private columnOT_DESP_EMAIL1 As Global.System.Data.DataColumn
        
        Private columnOT_DESP_EMAIL2 As Global.System.Data.DataColumn
        
        Private columnOT_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnOT_ENTREGO As Global.System.Data.DataColumn
        
        Private columnOT_DIGITADO_POR As Global.System.Data.DataColumn
        
        Private columnOT_HORA_OT As Global.System.Data.DataColumn
        
        Private columnOT_FACTURA_PEND As Global.System.Data.DataColumn
        
        Private columnOT_SUBTOTAL As Global.System.Data.DataColumn
        
        Private columnOT_NETO As Global.System.Data.DataColumn
        
        Private columnOT_IVA As Global.System.Data.DataColumn
        
        Private columnOT_DESCUENTOPOR As Global.System.Data.DataColumn
        
        Private columnOT_DESCUENTOPESOS As Global.System.Data.DataColumn
        
        Private columnOT_MUESTREO_CANT As Global.System.Data.DataColumn
        
        Private columnOT_MUESTREO_PRECIOUN As Global.System.Data.DataColumn
        
        Private columnOT_MUESTREO As Global.System.Data.DataColumn
        
        Private columnOT_ABONO As Global.System.Data.DataColumn
        
        Private columnOT_ABONOCON As Global.System.Data.DataColumn
        
        Private columnOT_TOTAL As Global.System.Data.DataColumn
        
        Private columnFAC_NUMERO As Global.System.Data.DataColumn
        
        Private columnFAC_FECHA As Global.System.Data.DataColumn
        
        Private columnOT_ESTADO_ANA As Global.System.Data.DataColumn
        
        Private columnOT_ESTADO_PAG As Global.System.Data.DataColumn
        
        Private columnOT_ESTADO_FAC As Global.System.Data.DataColumn
        
        Private columnOT_DESP_URGENTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDEN_TRABAJO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FECHA_ORDENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FECHA_ORDEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_PRODUCTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_PRODUCTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_EMPRESAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_EMPRESA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_PROVINCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_PROVINCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REGION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_CELULAR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_CELULAR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_CELULAR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_CELULAR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAX2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAX2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRO_RUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRO_RUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REMITEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REMITE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_CELULAR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_CELULAR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_CELULAR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_CELULAR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_FAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_FAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_FAX2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_FAX2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_REM_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_REM_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_CELULAR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_CELULAR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_CELULAR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_CELULAR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_FAX2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_FAX2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SOL_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SOL_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_RSOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_RSOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_GIROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_GIRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_ENCPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_ENCPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_F1PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_F1PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_F2PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_F2PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_OBSPAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_OBSPAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FAC_CONDICION_PAGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FAC_CONDICION_PAGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_RETIRALABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_RETIRALAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_FONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_FONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_EMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_CORREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_CORREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_BUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_BUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_OTROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_OTRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_POR_OTRO_GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_POR_OTRO_GLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_SENORESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_SENORES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_ATENCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_ATENCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_CASILLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_CASILLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_COMUNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_COMUNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_CIUDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_CIUDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_FONO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_FONO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_FONO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_FONO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_CELULAR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_CELULAR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_CELULAR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_CELULAR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_FAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_FAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_FAX2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_FAX2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_EMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_EMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ENTREGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ENTREGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DIGITADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DIGITADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_HORA_OTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_HORA_OT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_FACTURA_PENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_FACTURA_PEND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_SUBTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_SUBTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NETOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NETO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_IVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESCUENTOPORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESCUENTOPOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESCUENTOPESOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESCUENTOPESOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_MUESTREO_CANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_MUESTREO_CANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_MUESTREO_PRECIOUNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_MUESTREO_PRECIOUN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_MUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_MUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ABONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ABONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ABONOCONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ABONOCON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAC_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAC_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ESTADO_ANAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ESTADO_ANA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ESTADO_PAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ESTADO_PAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_ESTADO_FACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_ESTADO_FAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_DESP_URGENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_DESP_URGENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDEN_TRABAJORow
            Get
                Return CType(Me.Rows(index),ORDEN_TRABAJORow)
            End Get
        End Property
        
        Public Event ORDEN_TRABAJORowChanging As ORDEN_TRABAJORowChangeEventHandler
        
        Public Event ORDEN_TRABAJORowChanged As ORDEN_TRABAJORowChangeEventHandler
        
        Public Event ORDEN_TRABAJORowDeleting As ORDEN_TRABAJORowChangeEventHandler
        
        Public Event ORDEN_TRABAJORowDeleted As ORDEN_TRABAJORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDEN_TRABAJORow(ByVal row As ORDEN_TRABAJORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDEN_TRABAJORow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal COT_NUMERO As Double,  _
                    ByVal OT_FECHA_ORDEN As Date,  _
                    ByVal OT_FAC_RUT As String,  _
                    ByVal PRO_PRODUCTOR As String,  _
                    ByVal OT_EMPRESA As String,  _
                    ByVal OT_PREDIO As String,  _
                    ByVal OT_DIRECCION As String,  _
                    ByVal OT_LOCALIDAD As String,  _
                    ByVal OT_COMUNA As String,  _
                    ByVal OT_CIUDAD As String,  _
                    ByVal OT_PROVINCIA As String,  _
                    ByVal OT_REGION As String,  _
                    ByVal OT_FONO1 As String,  _
                    ByVal OT_FONO2 As String,  _
                    ByVal OT_CELULAR1 As String,  _
                    ByVal OT_CELULAR2 As String,  _
                    ByVal OT_FAX1 As String,  _
                    ByVal OT_FAX2 As String,  _
                    ByVal OT_EMAIL1 As String,  _
                    ByVal OT_EMAIL2 As String,  _
                    ByVal PRO_RUT As String,  _
                    ByVal OT_REMITE As String,  _
                    ByVal OT_REM_FONO1 As String,  _
                    ByVal OT_REM_FONO2 As String,  _
                    ByVal OT_REM_CELULAR1 As String,  _
                    ByVal OT_REM_CELULAR2 As String,  _
                    ByVal OT_REM_FAX1 As String,  _
                    ByVal OT_REM_FAX2 As String,  _
                    ByVal OT_REM_EMAIL1 As String,  _
                    ByVal OT_REM_EMAIL2 As String,  _
                    ByVal OT_SOL_NOMBRE As String,  _
                    ByVal OT_SOL_FONO1 As String,  _
                    ByVal OT_SOL_FONO2 As String,  _
                    ByVal OT_SOL_CELULAR1 As String,  _
                    ByVal OT_SOL_CELULAR2 As String,  _
                    ByVal OT_SOL_FAX1 As String,  _
                    ByVal OT_SOL_FAX2 As String,  _
                    ByVal OT_SOL_EMAIL1 As String,  _
                    ByVal OT_SOL_EMAIL2 As String,  _
                    ByVal OT_FAC_RSOCIAL As String,  _
                    ByVal OT_FAC_FONO1 As String,  _
                    ByVal OT_FAC_FONO2 As String,  _
                    ByVal OT_FAC_GIRO As String,  _
                    ByVal OT_FAC_DIRECCION As String,  _
                    ByVal OT_FAC_COMUNA As String,  _
                    ByVal OT_FAC_CIUDAD As String,  _
                    ByVal OT_FAC_ENCPAGO As String,  _
                    ByVal OT_FAC_F1PAGO As String,  _
                    ByVal OT_FAC_F2PAGO As String,  _
                    ByVal OT_FAC_OBSPAGO As String,  _
                    ByVal OT_FAC_CONDICION_PAGO As String,  _
                    ByVal OT_DESP_POR_RETIRALAB As Integer,  _
                    ByVal OT_DESP_POR_FONO As Integer,  _
                    ByVal OT_DESP_POR_FAX As Integer,  _
                    ByVal OT_DESP_POR_EMAIL As Integer,  _
                    ByVal OT_DESP_POR_CORREO As Integer,  _
                    ByVal OT_DESP_POR_BUS As Integer,  _
                    ByVal OT_DESP_POR_OTRO As Integer,  _
                    ByVal OT_DESP_POR_OTRO_GLOSA As String,  _
                    ByVal OT_DESP_SENORES As String,  _
                    ByVal OT_DESP_ATENCION As String,  _
                    ByVal OT_DESP_DIRECCION As String,  _
                    ByVal OT_DESP_CASILLA As String,  _
                    ByVal OT_DESP_COMUNA As String,  _
                    ByVal OT_DESP_CIUDAD As String,  _
                    ByVal OT_DESP_FECHA As Date,  _
                    ByVal OT_DESP_FONO1 As String,  _
                    ByVal OT_DESP_FONO2 As String,  _
                    ByVal OT_DESP_CELULAR1 As String,  _
                    ByVal OT_DESP_CELULAR2 As String,  _
                    ByVal OT_DESP_FAX1 As String,  _
                    ByVal OT_DESP_FAX2 As String,  _
                    ByVal OT_DESP_EMAIL1 As String,  _
                    ByVal OT_DESP_EMAIL2 As String,  _
                    ByVal OT_OBSERVACIONES As String,  _
                    ByVal OT_ENTREGO As String,  _
                    ByVal OT_DIGITADO_POR As String,  _
                    ByVal OT_HORA_OT As Date,  _
                    ByVal OT_FACTURA_PEND As Integer,  _
                    ByVal OT_SUBTOTAL As Integer,  _
                    ByVal OT_NETO As Integer,  _
                    ByVal OT_IVA As Integer,  _
                    ByVal OT_DESCUENTOPOR As Double,  _
                    ByVal OT_DESCUENTOPESOS As Integer,  _
                    ByVal OT_MUESTREO_CANT As Integer,  _
                    ByVal OT_MUESTREO_PRECIOUN As Integer,  _
                    ByVal OT_MUESTREO As Integer,  _
                    ByVal OT_ABONO As Integer,  _
                    ByVal OT_ABONOCON As Integer,  _
                    ByVal OT_TOTAL As Integer,  _
                    ByVal FAC_NUMERO As Integer,  _
                    ByVal FAC_FECHA As Date,  _
                    ByVal OT_ESTADO_ANA As String,  _
                    ByVal OT_ESTADO_PAG As String,  _
                    ByVal OT_ESTADO_FAC As String,  _
                    ByVal OT_DESP_URGENTE As String) As ORDEN_TRABAJORow
            Dim rowORDEN_TRABAJORow As ORDEN_TRABAJORow = CType(Me.NewRow,ORDEN_TRABAJORow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, COT_NUMERO, OT_FECHA_ORDEN, OT_FAC_RUT, PRO_PRODUCTOR, OT_EMPRESA, OT_PREDIO, OT_DIRECCION, OT_LOCALIDAD, OT_COMUNA, OT_CIUDAD, OT_PROVINCIA, OT_REGION, OT_FONO1, OT_FONO2, OT_CELULAR1, OT_CELULAR2, OT_FAX1, OT_FAX2, OT_EMAIL1, OT_EMAIL2, PRO_RUT, OT_REMITE, OT_REM_FONO1, OT_REM_FONO2, OT_REM_CELULAR1, OT_REM_CELULAR2, OT_REM_FAX1, OT_REM_FAX2, OT_REM_EMAIL1, OT_REM_EMAIL2, OT_SOL_NOMBRE, OT_SOL_FONO1, OT_SOL_FONO2, OT_SOL_CELULAR1, OT_SOL_CELULAR2, OT_SOL_FAX1, OT_SOL_FAX2, OT_SOL_EMAIL1, OT_SOL_EMAIL2, OT_FAC_RSOCIAL, OT_FAC_FONO1, OT_FAC_FONO2, OT_FAC_GIRO, OT_FAC_DIRECCION, OT_FAC_COMUNA, OT_FAC_CIUDAD, OT_FAC_ENCPAGO, OT_FAC_F1PAGO, OT_FAC_F2PAGO, OT_FAC_OBSPAGO, OT_FAC_CONDICION_PAGO, OT_DESP_POR_RETIRALAB, OT_DESP_POR_FONO, OT_DESP_POR_FAX, OT_DESP_POR_EMAIL, OT_DESP_POR_CORREO, OT_DESP_POR_BUS, OT_DESP_POR_OTRO, OT_DESP_POR_OTRO_GLOSA, OT_DESP_SENORES, OT_DESP_ATENCION, OT_DESP_DIRECCION, OT_DESP_CASILLA, OT_DESP_COMUNA, OT_DESP_CIUDAD, OT_DESP_FECHA, OT_DESP_FONO1, OT_DESP_FONO2, OT_DESP_CELULAR1, OT_DESP_CELULAR2, OT_DESP_FAX1, OT_DESP_FAX2, OT_DESP_EMAIL1, OT_DESP_EMAIL2, OT_OBSERVACIONES, OT_ENTREGO, OT_DIGITADO_POR, OT_HORA_OT, OT_FACTURA_PEND, OT_SUBTOTAL, OT_NETO, OT_IVA, OT_DESCUENTOPOR, OT_DESCUENTOPESOS, OT_MUESTREO_CANT, OT_MUESTREO_PRECIOUN, OT_MUESTREO, OT_ABONO, OT_ABONOCON, OT_TOTAL, FAC_NUMERO, FAC_FECHA, OT_ESTADO_ANA, OT_ESTADO_PAG, OT_ESTADO_FAC, OT_DESP_URGENTE}
            rowORDEN_TRABAJORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDEN_TRABAJORow)
            Return rowORDEN_TRABAJORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMERO(ByVal OT_NUMERO As Integer) As ORDEN_TRABAJORow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO}),ORDEN_TRABAJORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDEN_TRABAJODataTable = CType(MyBase.Clone,ORDEN_TRABAJODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDEN_TRABAJODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnCOT_NUMERO = MyBase.Columns("COT_NUMERO")
            Me.columnOT_FECHA_ORDEN = MyBase.Columns("OT_FECHA_ORDEN")
            Me.columnOT_FAC_RUT = MyBase.Columns("OT_FAC_RUT")
            Me.columnPRO_PRODUCTOR = MyBase.Columns("PRO_PRODUCTOR")
            Me.columnOT_EMPRESA = MyBase.Columns("OT_EMPRESA")
            Me.columnOT_PREDIO = MyBase.Columns("OT_PREDIO")
            Me.columnOT_DIRECCION = MyBase.Columns("OT_DIRECCION")
            Me.columnOT_LOCALIDAD = MyBase.Columns("OT_LOCALIDAD")
            Me.columnOT_COMUNA = MyBase.Columns("OT_COMUNA")
            Me.columnOT_CIUDAD = MyBase.Columns("OT_CIUDAD")
            Me.columnOT_PROVINCIA = MyBase.Columns("OT_PROVINCIA")
            Me.columnOT_REGION = MyBase.Columns("OT_REGION")
            Me.columnOT_FONO1 = MyBase.Columns("OT_FONO1")
            Me.columnOT_FONO2 = MyBase.Columns("OT_FONO2")
            Me.columnOT_CELULAR1 = MyBase.Columns("OT_CELULAR1")
            Me.columnOT_CELULAR2 = MyBase.Columns("OT_CELULAR2")
            Me.columnOT_FAX1 = MyBase.Columns("OT_FAX1")
            Me.columnOT_FAX2 = MyBase.Columns("OT_FAX2")
            Me.columnOT_EMAIL1 = MyBase.Columns("OT_EMAIL1")
            Me.columnOT_EMAIL2 = MyBase.Columns("OT_EMAIL2")
            Me.columnPRO_RUT = MyBase.Columns("PRO_RUT")
            Me.columnOT_REMITE = MyBase.Columns("OT_REMITE")
            Me.columnOT_REM_FONO1 = MyBase.Columns("OT_REM_FONO1")
            Me.columnOT_REM_FONO2 = MyBase.Columns("OT_REM_FONO2")
            Me.columnOT_REM_CELULAR1 = MyBase.Columns("OT_REM_CELULAR1")
            Me.columnOT_REM_CELULAR2 = MyBase.Columns("OT_REM_CELULAR2")
            Me.columnOT_REM_FAX1 = MyBase.Columns("OT_REM_FAX1")
            Me.columnOT_REM_FAX2 = MyBase.Columns("OT_REM_FAX2")
            Me.columnOT_REM_EMAIL1 = MyBase.Columns("OT_REM_EMAIL1")
            Me.columnOT_REM_EMAIL2 = MyBase.Columns("OT_REM_EMAIL2")
            Me.columnOT_SOL_NOMBRE = MyBase.Columns("OT_SOL_NOMBRE")
            Me.columnOT_SOL_FONO1 = MyBase.Columns("OT_SOL_FONO1")
            Me.columnOT_SOL_FONO2 = MyBase.Columns("OT_SOL_FONO2")
            Me.columnOT_SOL_CELULAR1 = MyBase.Columns("OT_SOL_CELULAR1")
            Me.columnOT_SOL_CELULAR2 = MyBase.Columns("OT_SOL_CELULAR2")
            Me.columnOT_SOL_FAX1 = MyBase.Columns("OT_SOL_FAX1")
            Me.columnOT_SOL_FAX2 = MyBase.Columns("OT_SOL_FAX2")
            Me.columnOT_SOL_EMAIL1 = MyBase.Columns("OT_SOL_EMAIL1")
            Me.columnOT_SOL_EMAIL2 = MyBase.Columns("OT_SOL_EMAIL2")
            Me.columnOT_FAC_RSOCIAL = MyBase.Columns("OT_FAC_RSOCIAL")
            Me.columnOT_FAC_FONO1 = MyBase.Columns("OT_FAC_FONO1")
            Me.columnOT_FAC_FONO2 = MyBase.Columns("OT_FAC_FONO2")
            Me.columnOT_FAC_GIRO = MyBase.Columns("OT_FAC_GIRO")
            Me.columnOT_FAC_DIRECCION = MyBase.Columns("OT_FAC_DIRECCION")
            Me.columnOT_FAC_COMUNA = MyBase.Columns("OT_FAC_COMUNA")
            Me.columnOT_FAC_CIUDAD = MyBase.Columns("OT_FAC_CIUDAD")
            Me.columnOT_FAC_ENCPAGO = MyBase.Columns("OT_FAC_ENCPAGO")
            Me.columnOT_FAC_F1PAGO = MyBase.Columns("OT_FAC_F1PAGO")
            Me.columnOT_FAC_F2PAGO = MyBase.Columns("OT_FAC_F2PAGO")
            Me.columnOT_FAC_OBSPAGO = MyBase.Columns("OT_FAC_OBSPAGO")
            Me.columnOT_FAC_CONDICION_PAGO = MyBase.Columns("OT_FAC_CONDICION_PAGO")
            Me.columnOT_DESP_POR_RETIRALAB = MyBase.Columns("OT_DESP_POR_RETIRALAB")
            Me.columnOT_DESP_POR_FONO = MyBase.Columns("OT_DESP_POR_FONO")
            Me.columnOT_DESP_POR_FAX = MyBase.Columns("OT_DESP_POR_FAX")
            Me.columnOT_DESP_POR_EMAIL = MyBase.Columns("OT_DESP_POR_EMAIL")
            Me.columnOT_DESP_POR_CORREO = MyBase.Columns("OT_DESP_POR_CORREO")
            Me.columnOT_DESP_POR_BUS = MyBase.Columns("OT_DESP_POR_BUS")
            Me.columnOT_DESP_POR_OTRO = MyBase.Columns("OT_DESP_POR_OTRO")
            Me.columnOT_DESP_POR_OTRO_GLOSA = MyBase.Columns("OT_DESP_POR_OTRO_GLOSA")
            Me.columnOT_DESP_SENORES = MyBase.Columns("OT_DESP_SENORES")
            Me.columnOT_DESP_ATENCION = MyBase.Columns("OT_DESP_ATENCION")
            Me.columnOT_DESP_DIRECCION = MyBase.Columns("OT_DESP_DIRECCION")
            Me.columnOT_DESP_CASILLA = MyBase.Columns("OT_DESP_CASILLA")
            Me.columnOT_DESP_COMUNA = MyBase.Columns("OT_DESP_COMUNA")
            Me.columnOT_DESP_CIUDAD = MyBase.Columns("OT_DESP_CIUDAD")
            Me.columnOT_DESP_FECHA = MyBase.Columns("OT_DESP_FECHA")
            Me.columnOT_DESP_FONO1 = MyBase.Columns("OT_DESP_FONO1")
            Me.columnOT_DESP_FONO2 = MyBase.Columns("OT_DESP_FONO2")
            Me.columnOT_DESP_CELULAR1 = MyBase.Columns("OT_DESP_CELULAR1")
            Me.columnOT_DESP_CELULAR2 = MyBase.Columns("OT_DESP_CELULAR2")
            Me.columnOT_DESP_FAX1 = MyBase.Columns("OT_DESP_FAX1")
            Me.columnOT_DESP_FAX2 = MyBase.Columns("OT_DESP_FAX2")
            Me.columnOT_DESP_EMAIL1 = MyBase.Columns("OT_DESP_EMAIL1")
            Me.columnOT_DESP_EMAIL2 = MyBase.Columns("OT_DESP_EMAIL2")
            Me.columnOT_OBSERVACIONES = MyBase.Columns("OT_OBSERVACIONES")
            Me.columnOT_ENTREGO = MyBase.Columns("OT_ENTREGO")
            Me.columnOT_DIGITADO_POR = MyBase.Columns("OT_DIGITADO_POR")
            Me.columnOT_HORA_OT = MyBase.Columns("OT_HORA_OT")
            Me.columnOT_FACTURA_PEND = MyBase.Columns("OT_FACTURA_PEND")
            Me.columnOT_SUBTOTAL = MyBase.Columns("OT_SUBTOTAL")
            Me.columnOT_NETO = MyBase.Columns("OT_NETO")
            Me.columnOT_IVA = MyBase.Columns("OT_IVA")
            Me.columnOT_DESCUENTOPOR = MyBase.Columns("OT_DESCUENTOPOR")
            Me.columnOT_DESCUENTOPESOS = MyBase.Columns("OT_DESCUENTOPESOS")
            Me.columnOT_MUESTREO_CANT = MyBase.Columns("OT_MUESTREO_CANT")
            Me.columnOT_MUESTREO_PRECIOUN = MyBase.Columns("OT_MUESTREO_PRECIOUN")
            Me.columnOT_MUESTREO = MyBase.Columns("OT_MUESTREO")
            Me.columnOT_ABONO = MyBase.Columns("OT_ABONO")
            Me.columnOT_ABONOCON = MyBase.Columns("OT_ABONOCON")
            Me.columnOT_TOTAL = MyBase.Columns("OT_TOTAL")
            Me.columnFAC_NUMERO = MyBase.Columns("FAC_NUMERO")
            Me.columnFAC_FECHA = MyBase.Columns("FAC_FECHA")
            Me.columnOT_ESTADO_ANA = MyBase.Columns("OT_ESTADO_ANA")
            Me.columnOT_ESTADO_PAG = MyBase.Columns("OT_ESTADO_PAG")
            Me.columnOT_ESTADO_FAC = MyBase.Columns("OT_ESTADO_FAC")
            Me.columnOT_DESP_URGENTE = MyBase.Columns("OT_DESP_URGENTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnCOT_NUMERO = New Global.System.Data.DataColumn("COT_NUMERO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOT_NUMERO)
            Me.columnOT_FECHA_ORDEN = New Global.System.Data.DataColumn("OT_FECHA_ORDEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FECHA_ORDEN)
            Me.columnOT_FAC_RUT = New Global.System.Data.DataColumn("OT_FAC_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_RUT)
            Me.columnPRO_PRODUCTOR = New Global.System.Data.DataColumn("PRO_PRODUCTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_PRODUCTOR)
            Me.columnOT_EMPRESA = New Global.System.Data.DataColumn("OT_EMPRESA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_EMPRESA)
            Me.columnOT_PREDIO = New Global.System.Data.DataColumn("OT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_PREDIO)
            Me.columnOT_DIRECCION = New Global.System.Data.DataColumn("OT_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DIRECCION)
            Me.columnOT_LOCALIDAD = New Global.System.Data.DataColumn("OT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_LOCALIDAD)
            Me.columnOT_COMUNA = New Global.System.Data.DataColumn("OT_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_COMUNA)
            Me.columnOT_CIUDAD = New Global.System.Data.DataColumn("OT_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_CIUDAD)
            Me.columnOT_PROVINCIA = New Global.System.Data.DataColumn("OT_PROVINCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_PROVINCIA)
            Me.columnOT_REGION = New Global.System.Data.DataColumn("OT_REGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REGION)
            Me.columnOT_FONO1 = New Global.System.Data.DataColumn("OT_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FONO1)
            Me.columnOT_FONO2 = New Global.System.Data.DataColumn("OT_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FONO2)
            Me.columnOT_CELULAR1 = New Global.System.Data.DataColumn("OT_CELULAR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_CELULAR1)
            Me.columnOT_CELULAR2 = New Global.System.Data.DataColumn("OT_CELULAR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_CELULAR2)
            Me.columnOT_FAX1 = New Global.System.Data.DataColumn("OT_FAX1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAX1)
            Me.columnOT_FAX2 = New Global.System.Data.DataColumn("OT_FAX2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAX2)
            Me.columnOT_EMAIL1 = New Global.System.Data.DataColumn("OT_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_EMAIL1)
            Me.columnOT_EMAIL2 = New Global.System.Data.DataColumn("OT_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_EMAIL2)
            Me.columnPRO_RUT = New Global.System.Data.DataColumn("PRO_RUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRO_RUT)
            Me.columnOT_REMITE = New Global.System.Data.DataColumn("OT_REMITE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REMITE)
            Me.columnOT_REM_FONO1 = New Global.System.Data.DataColumn("OT_REM_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_FONO1)
            Me.columnOT_REM_FONO2 = New Global.System.Data.DataColumn("OT_REM_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_FONO2)
            Me.columnOT_REM_CELULAR1 = New Global.System.Data.DataColumn("OT_REM_CELULAR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_CELULAR1)
            Me.columnOT_REM_CELULAR2 = New Global.System.Data.DataColumn("OT_REM_CELULAR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_CELULAR2)
            Me.columnOT_REM_FAX1 = New Global.System.Data.DataColumn("OT_REM_FAX1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_FAX1)
            Me.columnOT_REM_FAX2 = New Global.System.Data.DataColumn("OT_REM_FAX2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_FAX2)
            Me.columnOT_REM_EMAIL1 = New Global.System.Data.DataColumn("OT_REM_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_EMAIL1)
            Me.columnOT_REM_EMAIL2 = New Global.System.Data.DataColumn("OT_REM_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_REM_EMAIL2)
            Me.columnOT_SOL_NOMBRE = New Global.System.Data.DataColumn("OT_SOL_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_NOMBRE)
            Me.columnOT_SOL_FONO1 = New Global.System.Data.DataColumn("OT_SOL_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FONO1)
            Me.columnOT_SOL_FONO2 = New Global.System.Data.DataColumn("OT_SOL_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FONO2)
            Me.columnOT_SOL_CELULAR1 = New Global.System.Data.DataColumn("OT_SOL_CELULAR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_CELULAR1)
            Me.columnOT_SOL_CELULAR2 = New Global.System.Data.DataColumn("OT_SOL_CELULAR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_CELULAR2)
            Me.columnOT_SOL_FAX1 = New Global.System.Data.DataColumn("OT_SOL_FAX1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FAX1)
            Me.columnOT_SOL_FAX2 = New Global.System.Data.DataColumn("OT_SOL_FAX2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_FAX2)
            Me.columnOT_SOL_EMAIL1 = New Global.System.Data.DataColumn("OT_SOL_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_EMAIL1)
            Me.columnOT_SOL_EMAIL2 = New Global.System.Data.DataColumn("OT_SOL_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SOL_EMAIL2)
            Me.columnOT_FAC_RSOCIAL = New Global.System.Data.DataColumn("OT_FAC_RSOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_RSOCIAL)
            Me.columnOT_FAC_FONO1 = New Global.System.Data.DataColumn("OT_FAC_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_FONO1)
            Me.columnOT_FAC_FONO2 = New Global.System.Data.DataColumn("OT_FAC_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_FONO2)
            Me.columnOT_FAC_GIRO = New Global.System.Data.DataColumn("OT_FAC_GIRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_GIRO)
            Me.columnOT_FAC_DIRECCION = New Global.System.Data.DataColumn("OT_FAC_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_DIRECCION)
            Me.columnOT_FAC_COMUNA = New Global.System.Data.DataColumn("OT_FAC_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_COMUNA)
            Me.columnOT_FAC_CIUDAD = New Global.System.Data.DataColumn("OT_FAC_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_CIUDAD)
            Me.columnOT_FAC_ENCPAGO = New Global.System.Data.DataColumn("OT_FAC_ENCPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_ENCPAGO)
            Me.columnOT_FAC_F1PAGO = New Global.System.Data.DataColumn("OT_FAC_F1PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_F1PAGO)
            Me.columnOT_FAC_F2PAGO = New Global.System.Data.DataColumn("OT_FAC_F2PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_F2PAGO)
            Me.columnOT_FAC_OBSPAGO = New Global.System.Data.DataColumn("OT_FAC_OBSPAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_OBSPAGO)
            Me.columnOT_FAC_CONDICION_PAGO = New Global.System.Data.DataColumn("OT_FAC_CONDICION_PAGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FAC_CONDICION_PAGO)
            Me.columnOT_DESP_POR_RETIRALAB = New Global.System.Data.DataColumn("OT_DESP_POR_RETIRALAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_RETIRALAB)
            Me.columnOT_DESP_POR_FONO = New Global.System.Data.DataColumn("OT_DESP_POR_FONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_FONO)
            Me.columnOT_DESP_POR_FAX = New Global.System.Data.DataColumn("OT_DESP_POR_FAX", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_FAX)
            Me.columnOT_DESP_POR_EMAIL = New Global.System.Data.DataColumn("OT_DESP_POR_EMAIL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_EMAIL)
            Me.columnOT_DESP_POR_CORREO = New Global.System.Data.DataColumn("OT_DESP_POR_CORREO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_CORREO)
            Me.columnOT_DESP_POR_BUS = New Global.System.Data.DataColumn("OT_DESP_POR_BUS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_BUS)
            Me.columnOT_DESP_POR_OTRO = New Global.System.Data.DataColumn("OT_DESP_POR_OTRO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_OTRO)
            Me.columnOT_DESP_POR_OTRO_GLOSA = New Global.System.Data.DataColumn("OT_DESP_POR_OTRO_GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_POR_OTRO_GLOSA)
            Me.columnOT_DESP_SENORES = New Global.System.Data.DataColumn("OT_DESP_SENORES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_SENORES)
            Me.columnOT_DESP_ATENCION = New Global.System.Data.DataColumn("OT_DESP_ATENCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_ATENCION)
            Me.columnOT_DESP_DIRECCION = New Global.System.Data.DataColumn("OT_DESP_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_DIRECCION)
            Me.columnOT_DESP_CASILLA = New Global.System.Data.DataColumn("OT_DESP_CASILLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_CASILLA)
            Me.columnOT_DESP_COMUNA = New Global.System.Data.DataColumn("OT_DESP_COMUNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_COMUNA)
            Me.columnOT_DESP_CIUDAD = New Global.System.Data.DataColumn("OT_DESP_CIUDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_CIUDAD)
            Me.columnOT_DESP_FECHA = New Global.System.Data.DataColumn("OT_DESP_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_FECHA)
            Me.columnOT_DESP_FONO1 = New Global.System.Data.DataColumn("OT_DESP_FONO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_FONO1)
            Me.columnOT_DESP_FONO2 = New Global.System.Data.DataColumn("OT_DESP_FONO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_FONO2)
            Me.columnOT_DESP_CELULAR1 = New Global.System.Data.DataColumn("OT_DESP_CELULAR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_CELULAR1)
            Me.columnOT_DESP_CELULAR2 = New Global.System.Data.DataColumn("OT_DESP_CELULAR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_CELULAR2)
            Me.columnOT_DESP_FAX1 = New Global.System.Data.DataColumn("OT_DESP_FAX1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_FAX1)
            Me.columnOT_DESP_FAX2 = New Global.System.Data.DataColumn("OT_DESP_FAX2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_FAX2)
            Me.columnOT_DESP_EMAIL1 = New Global.System.Data.DataColumn("OT_DESP_EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_EMAIL1)
            Me.columnOT_DESP_EMAIL2 = New Global.System.Data.DataColumn("OT_DESP_EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_EMAIL2)
            Me.columnOT_OBSERVACIONES = New Global.System.Data.DataColumn("OT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_OBSERVACIONES)
            Me.columnOT_ENTREGO = New Global.System.Data.DataColumn("OT_ENTREGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ENTREGO)
            Me.columnOT_DIGITADO_POR = New Global.System.Data.DataColumn("OT_DIGITADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DIGITADO_POR)
            Me.columnOT_HORA_OT = New Global.System.Data.DataColumn("OT_HORA_OT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_HORA_OT)
            Me.columnOT_FACTURA_PEND = New Global.System.Data.DataColumn("OT_FACTURA_PEND", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_FACTURA_PEND)
            Me.columnOT_SUBTOTAL = New Global.System.Data.DataColumn("OT_SUBTOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_SUBTOTAL)
            Me.columnOT_NETO = New Global.System.Data.DataColumn("OT_NETO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NETO)
            Me.columnOT_IVA = New Global.System.Data.DataColumn("OT_IVA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_IVA)
            Me.columnOT_DESCUENTOPOR = New Global.System.Data.DataColumn("OT_DESCUENTOPOR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESCUENTOPOR)
            Me.columnOT_DESCUENTOPESOS = New Global.System.Data.DataColumn("OT_DESCUENTOPESOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESCUENTOPESOS)
            Me.columnOT_MUESTREO_CANT = New Global.System.Data.DataColumn("OT_MUESTREO_CANT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_MUESTREO_CANT)
            Me.columnOT_MUESTREO_PRECIOUN = New Global.System.Data.DataColumn("OT_MUESTREO_PRECIOUN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_MUESTREO_PRECIOUN)
            Me.columnOT_MUESTREO = New Global.System.Data.DataColumn("OT_MUESTREO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_MUESTREO)
            Me.columnOT_ABONO = New Global.System.Data.DataColumn("OT_ABONO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ABONO)
            Me.columnOT_ABONOCON = New Global.System.Data.DataColumn("OT_ABONOCON", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ABONOCON)
            Me.columnOT_TOTAL = New Global.System.Data.DataColumn("OT_TOTAL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_TOTAL)
            Me.columnFAC_NUMERO = New Global.System.Data.DataColumn("FAC_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_NUMERO)
            Me.columnFAC_FECHA = New Global.System.Data.DataColumn("FAC_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAC_FECHA)
            Me.columnOT_ESTADO_ANA = New Global.System.Data.DataColumn("OT_ESTADO_ANA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ESTADO_ANA)
            Me.columnOT_ESTADO_PAG = New Global.System.Data.DataColumn("OT_ESTADO_PAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ESTADO_PAG)
            Me.columnOT_ESTADO_FAC = New Global.System.Data.DataColumn("OT_ESTADO_FAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_ESTADO_FAC)
            Me.columnOT_DESP_URGENTE = New Global.System.Data.DataColumn("OT_DESP_URGENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_DESP_URGENTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey4", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NUMERO.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDEN_TRABAJORow() As ORDEN_TRABAJORow
            Return CType(Me.NewRow,ORDEN_TRABAJORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDEN_TRABAJORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDEN_TRABAJORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDEN_TRABAJORowChangedEvent) Is Nothing) Then
                RaiseEvent ORDEN_TRABAJORowChanged(Me, New ORDEN_TRABAJORowChangeEvent(CType(e.Row,ORDEN_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDEN_TRABAJORowChangingEvent) Is Nothing) Then
                RaiseEvent ORDEN_TRABAJORowChanging(Me, New ORDEN_TRABAJORowChangeEvent(CType(e.Row,ORDEN_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDEN_TRABAJORowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDEN_TRABAJORowDeleted(Me, New ORDEN_TRABAJORowChangeEvent(CType(e.Row,ORDEN_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDEN_TRABAJORowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDEN_TRABAJORowDeleting(Me, New ORDEN_TRABAJORowChangeEvent(CType(e.Row,ORDEN_TRABAJORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDEN_TRABAJORow(ByVal row As ORDEN_TRABAJORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDEN_TRABAJODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ANALISIS_ELEMENTOS_PASO3DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTMU_CODIGO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnELE_CODIGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ANALISIS_ELEMENTOS_PASO3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMU_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMU_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELE_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELE_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ANALISIS_ELEMENTOS_PASO3Row
            Get
                Return CType(Me.Rows(index),ANALISIS_ELEMENTOS_PASO3Row)
            End Get
        End Property
        
        Public Event ANALISIS_ELEMENTOS_PASO3RowChanging As ANALISIS_ELEMENTOS_PASO3RowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASO3RowChanged As ANALISIS_ELEMENTOS_PASO3RowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASO3RowDeleting As ANALISIS_ELEMENTOS_PASO3RowChangeEventHandler
        
        Public Event ANALISIS_ELEMENTOS_PASO3RowDeleted As ANALISIS_ELEMENTOS_PASO3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddANALISIS_ELEMENTOS_PASO3Row(ByVal row As ANALISIS_ELEMENTOS_PASO3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddANALISIS_ELEMENTOS_PASO3Row(ByVal TMU_CODIGO As Integer, ByVal OT_NLAB As Integer, ByVal ELE_CODIGO As String) As ANALISIS_ELEMENTOS_PASO3Row
            Dim rowANALISIS_ELEMENTOS_PASO3Row As ANALISIS_ELEMENTOS_PASO3Row = CType(Me.NewRow,ANALISIS_ELEMENTOS_PASO3Row)
            Dim columnValuesArray() As Object = New Object() {TMU_CODIGO, OT_NLAB, ELE_CODIGO}
            rowANALISIS_ELEMENTOS_PASO3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowANALISIS_ELEMENTOS_PASO3Row)
            Return rowANALISIS_ELEMENTOS_PASO3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTMU_CODIGOOT_NLABELE_CODIGO(ByVal TMU_CODIGO As Integer, ByVal OT_NLAB As Integer, ByVal ELE_CODIGO As String) As ANALISIS_ELEMENTOS_PASO3Row
            Return CType(Me.Rows.Find(New Object() {TMU_CODIGO, OT_NLAB, ELE_CODIGO}),ANALISIS_ELEMENTOS_PASO3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ANALISIS_ELEMENTOS_PASO3DataTable = CType(MyBase.Clone,ANALISIS_ELEMENTOS_PASO3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ANALISIS_ELEMENTOS_PASO3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTMU_CODIGO = MyBase.Columns("TMU_CODIGO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnELE_CODIGO = MyBase.Columns("ELE_CODIGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTMU_CODIGO = New Global.System.Data.DataColumn("TMU_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMU_CODIGO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnELE_CODIGO = New Global.System.Data.DataColumn("ELE_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELE_CODIGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey29", New Global.System.Data.DataColumn() {Me.columnTMU_CODIGO, Me.columnOT_NLAB, Me.columnELE_CODIGO}, true))
            Me.columnTMU_CODIGO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnELE_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewANALISIS_ELEMENTOS_PASO3Row() As ANALISIS_ELEMENTOS_PASO3Row
            Return CType(Me.NewRow,ANALISIS_ELEMENTOS_PASO3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ANALISIS_ELEMENTOS_PASO3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ANALISIS_ELEMENTOS_PASO3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO3RowChangedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO3RowChanged(Me, New ANALISIS_ELEMENTOS_PASO3RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO3RowChangingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO3RowChanging(Me, New ANALISIS_ELEMENTOS_PASO3RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO3RowDeletedEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO3RowDeleted(Me, New ANALISIS_ELEMENTOS_PASO3RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ANALISIS_ELEMENTOS_PASO3RowDeletingEvent) Is Nothing) Then
                RaiseEvent ANALISIS_ELEMENTOS_PASO3RowDeleting(Me, New ANALISIS_ELEMENTOS_PASO3RowChangeEvent(CType(e.Row,ANALISIS_ELEMENTOS_PASO3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveANALISIS_ELEMENTOS_PASO3Row(ByVal row As ANALISIS_ELEMENTOS_PASO3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ANALISIS_ELEMENTOS_PASO3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_SUELO_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnSUEANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnSUEANT_FECHAMU As Global.System.Data.DataColumn
        
        Private columnSUEANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnSUEANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnSUEANT_IDENTIFICACION1 As Global.System.Data.DataColumn
        
        Private columnSUEANT_IDENTIFICACION2 As Global.System.Data.DataColumn
        
        Private columnSUEANT_CULTIVO_ANT As Global.System.Data.DataColumn
        
        Private columnSUEANT_RTO_ANT As Global.System.Data.DataColumn
        
        Private columnSUEANT_CANTIDAD_ANT As Global.System.Data.DataColumn
        
        Private columnSUEANT_UNIDAD_ANT As Global.System.Data.DataColumn
        
        Private columnSUEANT_CULTIVO_PRO As Global.System.Data.DataColumn
        
        Private columnSUEANT_RTO_ACT As Global.System.Data.DataColumn
        
        Private columnSUEANT_CANTIDAD_ACT As Global.System.Data.DataColumn
        
        Private columnSUEANT_UNIDAD_ACT As Global.System.Data.DataColumn
        
        Private columnSUEANT_TEXTURA As Global.System.Data.DataColumn
        
        Private columnSUEANT_PROFUNDIDAD As Global.System.Data.DataColumn
        
        Private columnSUEANT_DRENAJE As Global.System.Data.DataColumn
        
        Private columnSUEANT_RIEGO As Global.System.Data.DataColumn
        
        Private columnSUEANT_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnSUEANT_RECOMENDACION As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        Private columnSUEANT_PROFUNDIDADMUESTRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_SUELO_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_FECHAMUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_FECHAMU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_IDENTIFICACION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_IDENTIFICACION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_IDENTIFICACION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_IDENTIFICACION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_CULTIVO_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_CULTIVO_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_RTO_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_RTO_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_CANTIDAD_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_CANTIDAD_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_UNIDAD_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_UNIDAD_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_CULTIVO_PROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_CULTIVO_PRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_RTO_ACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_RTO_ACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_CANTIDAD_ACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_CANTIDAD_ACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_UNIDAD_ACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_UNIDAD_ACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_TEXTURAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_TEXTURA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_PROFUNDIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_PROFUNDIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_DRENAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_DRENAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_RIEGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_RIEGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_RECOMENDACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_RECOMENDACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUEANT_PROFUNDIDADMUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUEANT_PROFUNDIDADMUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_SUELO_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_SUELO_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_SUELO_ANTECEDENTESRowChanging As OT_SUELO_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_SUELO_ANTECEDENTESRowChanged As OT_SUELO_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_SUELO_ANTECEDENTESRowDeleting As OT_SUELO_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_SUELO_ANTECEDENTESRowDeleted As OT_SUELO_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_SUELO_ANTECEDENTESRow(ByVal row As OT_SUELO_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_SUELO_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal SUEANT_MUESTREADOR As String,  _
                    ByVal SUEANT_FECHAMU As Date,  _
                    ByVal SUEANT_PREDIO As String,  _
                    ByVal SUEANT_LOCALIDAD As String,  _
                    ByVal SUEANT_IDENTIFICACION1 As String,  _
                    ByVal SUEANT_IDENTIFICACION2 As String,  _
                    ByVal SUEANT_CULTIVO_ANT As String,  _
                    ByVal SUEANT_RTO_ANT As String,  _
                    ByVal SUEANT_CANTIDAD_ANT As Integer,  _
                    ByVal SUEANT_UNIDAD_ANT As String,  _
                    ByVal SUEANT_CULTIVO_PRO As String,  _
                    ByVal SUEANT_RTO_ACT As String,  _
                    ByVal SUEANT_CANTIDAD_ACT As Integer,  _
                    ByVal SUEANT_UNIDAD_ACT As String,  _
                    ByVal SUEANT_TEXTURA As String,  _
                    ByVal SUEANT_PROFUNDIDAD As String,  _
                    ByVal SUEANT_DRENAJE As String,  _
                    ByVal SUEANT_RIEGO As String,  _
                    ByVal SUEANT_OBSERVACIONES As String,  _
                    ByVal SUEANT_RECOMENDACION As String,  _
                    ByVal NLAB_ESTADO As String,  _
                    ByVal SUEANT_PROFUNDIDADMUESTRA As String) As OT_SUELO_ANTECEDENTESRow
            Dim rowOT_SUELO_ANTECEDENTESRow As OT_SUELO_ANTECEDENTESRow = CType(Me.NewRow,OT_SUELO_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, SUEANT_MUESTREADOR, SUEANT_FECHAMU, SUEANT_PREDIO, SUEANT_LOCALIDAD, SUEANT_IDENTIFICACION1, SUEANT_IDENTIFICACION2, SUEANT_CULTIVO_ANT, SUEANT_RTO_ANT, SUEANT_CANTIDAD_ANT, SUEANT_UNIDAD_ANT, SUEANT_CULTIVO_PRO, SUEANT_RTO_ACT, SUEANT_CANTIDAD_ACT, SUEANT_UNIDAD_ACT, SUEANT_TEXTURA, SUEANT_PROFUNDIDAD, SUEANT_DRENAJE, SUEANT_RIEGO, SUEANT_OBSERVACIONES, SUEANT_RECOMENDACION, NLAB_ESTADO, SUEANT_PROFUNDIDADMUESTRA}
            rowOT_SUELO_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_SUELO_ANTECEDENTESRow)
            Return rowOT_SUELO_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_SUELO_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_SUELO_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_SUELO_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_SUELO_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_SUELO_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnSUEANT_MUESTREADOR = MyBase.Columns("SUEANT_MUESTREADOR")
            Me.columnSUEANT_FECHAMU = MyBase.Columns("SUEANT_FECHAMU")
            Me.columnSUEANT_PREDIO = MyBase.Columns("SUEANT_PREDIO")
            Me.columnSUEANT_LOCALIDAD = MyBase.Columns("SUEANT_LOCALIDAD")
            Me.columnSUEANT_IDENTIFICACION1 = MyBase.Columns("SUEANT_IDENTIFICACION1")
            Me.columnSUEANT_IDENTIFICACION2 = MyBase.Columns("SUEANT_IDENTIFICACION2")
            Me.columnSUEANT_CULTIVO_ANT = MyBase.Columns("SUEANT_CULTIVO_ANT")
            Me.columnSUEANT_RTO_ANT = MyBase.Columns("SUEANT_RTO_ANT")
            Me.columnSUEANT_CANTIDAD_ANT = MyBase.Columns("SUEANT_CANTIDAD_ANT")
            Me.columnSUEANT_UNIDAD_ANT = MyBase.Columns("SUEANT_UNIDAD_ANT")
            Me.columnSUEANT_CULTIVO_PRO = MyBase.Columns("SUEANT_CULTIVO_PRO")
            Me.columnSUEANT_RTO_ACT = MyBase.Columns("SUEANT_RTO_ACT")
            Me.columnSUEANT_CANTIDAD_ACT = MyBase.Columns("SUEANT_CANTIDAD_ACT")
            Me.columnSUEANT_UNIDAD_ACT = MyBase.Columns("SUEANT_UNIDAD_ACT")
            Me.columnSUEANT_TEXTURA = MyBase.Columns("SUEANT_TEXTURA")
            Me.columnSUEANT_PROFUNDIDAD = MyBase.Columns("SUEANT_PROFUNDIDAD")
            Me.columnSUEANT_DRENAJE = MyBase.Columns("SUEANT_DRENAJE")
            Me.columnSUEANT_RIEGO = MyBase.Columns("SUEANT_RIEGO")
            Me.columnSUEANT_OBSERVACIONES = MyBase.Columns("SUEANT_OBSERVACIONES")
            Me.columnSUEANT_RECOMENDACION = MyBase.Columns("SUEANT_RECOMENDACION")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
            Me.columnSUEANT_PROFUNDIDADMUESTRA = MyBase.Columns("SUEANT_PROFUNDIDADMUESTRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnSUEANT_MUESTREADOR = New Global.System.Data.DataColumn("SUEANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_MUESTREADOR)
            Me.columnSUEANT_FECHAMU = New Global.System.Data.DataColumn("SUEANT_FECHAMU", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_FECHAMU)
            Me.columnSUEANT_PREDIO = New Global.System.Data.DataColumn("SUEANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_PREDIO)
            Me.columnSUEANT_LOCALIDAD = New Global.System.Data.DataColumn("SUEANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_LOCALIDAD)
            Me.columnSUEANT_IDENTIFICACION1 = New Global.System.Data.DataColumn("SUEANT_IDENTIFICACION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_IDENTIFICACION1)
            Me.columnSUEANT_IDENTIFICACION2 = New Global.System.Data.DataColumn("SUEANT_IDENTIFICACION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_IDENTIFICACION2)
            Me.columnSUEANT_CULTIVO_ANT = New Global.System.Data.DataColumn("SUEANT_CULTIVO_ANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_CULTIVO_ANT)
            Me.columnSUEANT_RTO_ANT = New Global.System.Data.DataColumn("SUEANT_RTO_ANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_RTO_ANT)
            Me.columnSUEANT_CANTIDAD_ANT = New Global.System.Data.DataColumn("SUEANT_CANTIDAD_ANT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_CANTIDAD_ANT)
            Me.columnSUEANT_UNIDAD_ANT = New Global.System.Data.DataColumn("SUEANT_UNIDAD_ANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_UNIDAD_ANT)
            Me.columnSUEANT_CULTIVO_PRO = New Global.System.Data.DataColumn("SUEANT_CULTIVO_PRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_CULTIVO_PRO)
            Me.columnSUEANT_RTO_ACT = New Global.System.Data.DataColumn("SUEANT_RTO_ACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_RTO_ACT)
            Me.columnSUEANT_CANTIDAD_ACT = New Global.System.Data.DataColumn("SUEANT_CANTIDAD_ACT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_CANTIDAD_ACT)
            Me.columnSUEANT_UNIDAD_ACT = New Global.System.Data.DataColumn("SUEANT_UNIDAD_ACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_UNIDAD_ACT)
            Me.columnSUEANT_TEXTURA = New Global.System.Data.DataColumn("SUEANT_TEXTURA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_TEXTURA)
            Me.columnSUEANT_PROFUNDIDAD = New Global.System.Data.DataColumn("SUEANT_PROFUNDIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_PROFUNDIDAD)
            Me.columnSUEANT_DRENAJE = New Global.System.Data.DataColumn("SUEANT_DRENAJE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_DRENAJE)
            Me.columnSUEANT_RIEGO = New Global.System.Data.DataColumn("SUEANT_RIEGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_RIEGO)
            Me.columnSUEANT_OBSERVACIONES = New Global.System.Data.DataColumn("SUEANT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_OBSERVACIONES)
            Me.columnSUEANT_RECOMENDACION = New Global.System.Data.DataColumn("SUEANT_RECOMENDACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_RECOMENDACION)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.columnSUEANT_PROFUNDIDADMUESTRA = New Global.System.Data.DataColumn("SUEANT_PROFUNDIDADMUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUEANT_PROFUNDIDADMUESTRA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey7", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_SUELO_ANTECEDENTESRow() As OT_SUELO_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_SUELO_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_SUELO_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_SUELO_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_SUELO_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_SUELO_ANTECEDENTESRowChanged(Me, New OT_SUELO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_SUELO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_SUELO_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_SUELO_ANTECEDENTESRowChanging(Me, New OT_SUELO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_SUELO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_SUELO_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_SUELO_ANTECEDENTESRowDeleted(Me, New OT_SUELO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_SUELO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_SUELO_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_SUELO_ANTECEDENTESRowDeleting(Me, New OT_SUELO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_SUELO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_SUELO_ANTECEDENTESRow(ByVal row As OT_SUELO_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_SUELO_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_TEJIDOS_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnTEJANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnTEJANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnESPECIE As Global.System.Data.DataColumn
        
        Private columnVARIEDAD As Global.System.Data.DataColumn
        
        Private columnTEJIDO As Global.System.Data.DataColumn
        
        Private columnTEJANT_EDAD As Global.System.Data.DataColumn
        
        Private columnTEJANT_CUARTEL1 As Global.System.Data.DataColumn
        
        Private columnTEJANT_CUARTEL2 As Global.System.Data.DataColumn
        
        Private columnTEJANT_RTO_ANT As Global.System.Data.DataColumn
        
        Private columnTEJANT_CARGA As Global.System.Data.DataColumn
        
        Private columnTEJANT_VIGOR As Global.System.Data.DataColumn
        
        Private columnTEJANT_DENSIDAD As Global.System.Data.DataColumn
        
        Private columnTEJANT_APARIENCIA As Global.System.Data.DataColumn
        
        Private columnTEJANT_OBSERVACIONES As Global.System.Data.DataColumn
        
        Private columnTEJANT_FOTO1 As Global.System.Data.DataColumn
        
        Private columnTEJANT_FOTO2 As Global.System.Data.DataColumn
        
        Private columnTEJANT_RECOMENDACION As Global.System.Data.DataColumn
        
        Private columnTEJANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnTEJANT_FMUESTREO As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_TEJIDOS_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VARIEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_EDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_EDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_CUARTEL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_CUARTEL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_CUARTEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_CUARTEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_RTO_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_RTO_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_CARGAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_CARGA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_VIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_VIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_DENSIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_DENSIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_APARIENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_APARIENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_FOTO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_FOTO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_FOTO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_FOTO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_RECOMENDACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_RECOMENDACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEJANT_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEJANT_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_TEJIDOS_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_TEJIDOS_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_TEJIDOS_ANTECEDENTESRowChanging As OT_TEJIDOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_TEJIDOS_ANTECEDENTESRowChanged As OT_TEJIDOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_TEJIDOS_ANTECEDENTESRowDeleting As OT_TEJIDOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_TEJIDOS_ANTECEDENTESRowDeleted As OT_TEJIDOS_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_TEJIDOS_ANTECEDENTESRow(ByVal row As OT_TEJIDOS_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_TEJIDOS_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal TEJANT_PREDIO As String,  _
                    ByVal TEJANT_LOCALIDAD As String,  _
                    ByVal ESPECIE As String,  _
                    ByVal VARIEDAD As String,  _
                    ByVal TEJIDO As String,  _
                    ByVal TEJANT_EDAD As String,  _
                    ByVal TEJANT_CUARTEL1 As String,  _
                    ByVal TEJANT_CUARTEL2 As String,  _
                    ByVal TEJANT_RTO_ANT As String,  _
                    ByVal TEJANT_CARGA As String,  _
                    ByVal TEJANT_VIGOR As String,  _
                    ByVal TEJANT_DENSIDAD As String,  _
                    ByVal TEJANT_APARIENCIA As String,  _
                    ByVal TEJANT_OBSERVACIONES As String,  _
                    ByVal TEJANT_FOTO1 As String,  _
                    ByVal TEJANT_FOTO2 As String,  _
                    ByVal TEJANT_RECOMENDACION As String,  _
                    ByVal TEJANT_MUESTREADOR As String,  _
                    ByVal TEJANT_FMUESTREO As Date,  _
                    ByVal NLAB_ESTADO As String) As OT_TEJIDOS_ANTECEDENTESRow
            Dim rowOT_TEJIDOS_ANTECEDENTESRow As OT_TEJIDOS_ANTECEDENTESRow = CType(Me.NewRow,OT_TEJIDOS_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, TEJANT_PREDIO, TEJANT_LOCALIDAD, ESPECIE, VARIEDAD, TEJIDO, TEJANT_EDAD, TEJANT_CUARTEL1, TEJANT_CUARTEL2, TEJANT_RTO_ANT, TEJANT_CARGA, TEJANT_VIGOR, TEJANT_DENSIDAD, TEJANT_APARIENCIA, TEJANT_OBSERVACIONES, TEJANT_FOTO1, TEJANT_FOTO2, TEJANT_RECOMENDACION, TEJANT_MUESTREADOR, TEJANT_FMUESTREO, NLAB_ESTADO}
            rowOT_TEJIDOS_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_TEJIDOS_ANTECEDENTESRow)
            Return rowOT_TEJIDOS_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_TEJIDOS_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_TEJIDOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_TEJIDOS_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_TEJIDOS_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_TEJIDOS_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnTEJANT_PREDIO = MyBase.Columns("TEJANT_PREDIO")
            Me.columnTEJANT_LOCALIDAD = MyBase.Columns("TEJANT_LOCALIDAD")
            Me.columnESPECIE = MyBase.Columns("ESPECIE")
            Me.columnVARIEDAD = MyBase.Columns("VARIEDAD")
            Me.columnTEJIDO = MyBase.Columns("TEJIDO")
            Me.columnTEJANT_EDAD = MyBase.Columns("TEJANT_EDAD")
            Me.columnTEJANT_CUARTEL1 = MyBase.Columns("TEJANT_CUARTEL1")
            Me.columnTEJANT_CUARTEL2 = MyBase.Columns("TEJANT_CUARTEL2")
            Me.columnTEJANT_RTO_ANT = MyBase.Columns("TEJANT_RTO_ANT")
            Me.columnTEJANT_CARGA = MyBase.Columns("TEJANT_CARGA")
            Me.columnTEJANT_VIGOR = MyBase.Columns("TEJANT_VIGOR")
            Me.columnTEJANT_DENSIDAD = MyBase.Columns("TEJANT_DENSIDAD")
            Me.columnTEJANT_APARIENCIA = MyBase.Columns("TEJANT_APARIENCIA")
            Me.columnTEJANT_OBSERVACIONES = MyBase.Columns("TEJANT_OBSERVACIONES")
            Me.columnTEJANT_FOTO1 = MyBase.Columns("TEJANT_FOTO1")
            Me.columnTEJANT_FOTO2 = MyBase.Columns("TEJANT_FOTO2")
            Me.columnTEJANT_RECOMENDACION = MyBase.Columns("TEJANT_RECOMENDACION")
            Me.columnTEJANT_MUESTREADOR = MyBase.Columns("TEJANT_MUESTREADOR")
            Me.columnTEJANT_FMUESTREO = MyBase.Columns("TEJANT_FMUESTREO")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnTEJANT_PREDIO = New Global.System.Data.DataColumn("TEJANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_PREDIO)
            Me.columnTEJANT_LOCALIDAD = New Global.System.Data.DataColumn("TEJANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_LOCALIDAD)
            Me.columnESPECIE = New Global.System.Data.DataColumn("ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESPECIE)
            Me.columnVARIEDAD = New Global.System.Data.DataColumn("VARIEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIEDAD)
            Me.columnTEJIDO = New Global.System.Data.DataColumn("TEJIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJIDO)
            Me.columnTEJANT_EDAD = New Global.System.Data.DataColumn("TEJANT_EDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_EDAD)
            Me.columnTEJANT_CUARTEL1 = New Global.System.Data.DataColumn("TEJANT_CUARTEL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_CUARTEL1)
            Me.columnTEJANT_CUARTEL2 = New Global.System.Data.DataColumn("TEJANT_CUARTEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_CUARTEL2)
            Me.columnTEJANT_RTO_ANT = New Global.System.Data.DataColumn("TEJANT_RTO_ANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_RTO_ANT)
            Me.columnTEJANT_CARGA = New Global.System.Data.DataColumn("TEJANT_CARGA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_CARGA)
            Me.columnTEJANT_VIGOR = New Global.System.Data.DataColumn("TEJANT_VIGOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_VIGOR)
            Me.columnTEJANT_DENSIDAD = New Global.System.Data.DataColumn("TEJANT_DENSIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_DENSIDAD)
            Me.columnTEJANT_APARIENCIA = New Global.System.Data.DataColumn("TEJANT_APARIENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_APARIENCIA)
            Me.columnTEJANT_OBSERVACIONES = New Global.System.Data.DataColumn("TEJANT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_OBSERVACIONES)
            Me.columnTEJANT_FOTO1 = New Global.System.Data.DataColumn("TEJANT_FOTO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_FOTO1)
            Me.columnTEJANT_FOTO2 = New Global.System.Data.DataColumn("TEJANT_FOTO2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_FOTO2)
            Me.columnTEJANT_RECOMENDACION = New Global.System.Data.DataColumn("TEJANT_RECOMENDACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_RECOMENDACION)
            Me.columnTEJANT_MUESTREADOR = New Global.System.Data.DataColumn("TEJANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_MUESTREADOR)
            Me.columnTEJANT_FMUESTREO = New Global.System.Data.DataColumn("TEJANT_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEJANT_FMUESTREO)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey24", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_TEJIDOS_ANTECEDENTESRow() As OT_TEJIDOS_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_TEJIDOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_TEJIDOS_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_TEJIDOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_TEJIDOS_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_TEJIDOS_ANTECEDENTESRowChanged(Me, New OT_TEJIDOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_TEJIDOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_TEJIDOS_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_TEJIDOS_ANTECEDENTESRowChanging(Me, New OT_TEJIDOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_TEJIDOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_TEJIDOS_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_TEJIDOS_ANTECEDENTESRowDeleted(Me, New OT_TEJIDOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_TEJIDOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_TEJIDOS_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_TEJIDOS_ANTECEDENTESRowDeleting(Me, New OT_TEJIDOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_TEJIDOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_TEJIDOS_ANTECEDENTESRow(ByVal row As OT_TEJIDOS_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_TEJIDOS_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_AGUA_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnAGUANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnAGUANT_FECHAMU As Global.System.Data.DataColumn
        
        Private columnAGUANT_HORA_MUESTREO As Global.System.Data.DataColumn
        
        Private columnAGUANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnAGUANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnAGUANT_ORIGEN As Global.System.Data.DataColumn
        
        Private columnAGUANT_ORIGEN_DESCR As Global.System.Data.DataColumn
        
        Private columnAGUANT_TIPO_MU As Global.System.Data.DataColumn
        
        Private columnAGUANT_TIPO_MDESCR As Global.System.Data.DataColumn
        
        Private columnAGUANT_TIPO_RECIP As Global.System.Data.DataColumn
        
        Private columnAGUANT_DETALLE As Global.System.Data.DataColumn
        
        Private columnAGUANT_VOLUMEN_MU As Global.System.Data.DataColumn
        
        Private columnAGUANT_ESTADO As Global.System.Data.DataColumn
        
        Private columnAGUANT_PRESERVANTES As Global.System.Data.DataColumn
        
        Private columnAGUANT_IDENTIFICACION1 As Global.System.Data.DataColumn
        
        Private columnAGUANT_IDENTIFICACION2 As Global.System.Data.DataColumn
        
        Private columnAGUANT_FECHAING As Global.System.Data.DataColumn
        
        Private columnAGUANT_HORA_INGRESO As Global.System.Data.DataColumn
        
        Private columnAGUANT_OBSERVACIONES As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_AGUA_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_FECHAMUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_FECHAMU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_HORA_MUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_HORA_MUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_ORIGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_ORIGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_ORIGEN_DESCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_ORIGEN_DESCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_TIPO_MUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_TIPO_MU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_TIPO_MDESCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_TIPO_MDESCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_TIPO_RECIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_TIPO_RECIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_VOLUMEN_MUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_VOLUMEN_MU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_PRESERVANTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_PRESERVANTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_IDENTIFICACION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_IDENTIFICACION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_IDENTIFICACION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_IDENTIFICACION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_FECHAINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_FECHAING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_HORA_INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_HORA_INGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGUANT_OBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGUANT_OBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_AGUA_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_AGUA_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_AGUA_ANTECEDENTESRowChanging As OT_AGUA_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_AGUA_ANTECEDENTESRowChanged As OT_AGUA_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_AGUA_ANTECEDENTESRowDeleting As OT_AGUA_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_AGUA_ANTECEDENTESRowDeleted As OT_AGUA_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_AGUA_ANTECEDENTESRow(ByVal row As OT_AGUA_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_AGUA_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal AGUANT_MUESTREADOR As String,  _
                    ByVal AGUANT_FECHAMU As Date,  _
                    ByVal AGUANT_HORA_MUESTREO As String,  _
                    ByVal AGUANT_PREDIO As String,  _
                    ByVal AGUANT_LOCALIDAD As String,  _
                    ByVal AGUANT_ORIGEN As String,  _
                    ByVal AGUANT_ORIGEN_DESCR As String,  _
                    ByVal AGUANT_TIPO_MU As String,  _
                    ByVal AGUANT_TIPO_MDESCR As String,  _
                    ByVal AGUANT_TIPO_RECIP As String,  _
                    ByVal AGUANT_DETALLE As String,  _
                    ByVal AGUANT_VOLUMEN_MU As String,  _
                    ByVal AGUANT_ESTADO As String,  _
                    ByVal AGUANT_PRESERVANTES As String,  _
                    ByVal AGUANT_IDENTIFICACION1 As String,  _
                    ByVal AGUANT_IDENTIFICACION2 As String,  _
                    ByVal AGUANT_FECHAING As Date,  _
                    ByVal AGUANT_HORA_INGRESO As String,  _
                    ByVal AGUANT_OBSERVACIONES As String) As OT_AGUA_ANTECEDENTESRow
            Dim rowOT_AGUA_ANTECEDENTESRow As OT_AGUA_ANTECEDENTESRow = CType(Me.NewRow,OT_AGUA_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, AGUANT_MUESTREADOR, AGUANT_FECHAMU, AGUANT_HORA_MUESTREO, AGUANT_PREDIO, AGUANT_LOCALIDAD, AGUANT_ORIGEN, AGUANT_ORIGEN_DESCR, AGUANT_TIPO_MU, AGUANT_TIPO_MDESCR, AGUANT_TIPO_RECIP, AGUANT_DETALLE, AGUANT_VOLUMEN_MU, AGUANT_ESTADO, AGUANT_PRESERVANTES, AGUANT_IDENTIFICACION1, AGUANT_IDENTIFICACION2, AGUANT_FECHAING, AGUANT_HORA_INGRESO, AGUANT_OBSERVACIONES}
            rowOT_AGUA_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_AGUA_ANTECEDENTESRow)
            Return rowOT_AGUA_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_AGUA_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_AGUA_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_AGUA_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_AGUA_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_AGUA_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnAGUANT_MUESTREADOR = MyBase.Columns("AGUANT_MUESTREADOR")
            Me.columnAGUANT_FECHAMU = MyBase.Columns("AGUANT_FECHAMU")
            Me.columnAGUANT_HORA_MUESTREO = MyBase.Columns("AGUANT_HORA_MUESTREO")
            Me.columnAGUANT_PREDIO = MyBase.Columns("AGUANT_PREDIO")
            Me.columnAGUANT_LOCALIDAD = MyBase.Columns("AGUANT_LOCALIDAD")
            Me.columnAGUANT_ORIGEN = MyBase.Columns("AGUANT_ORIGEN")
            Me.columnAGUANT_ORIGEN_DESCR = MyBase.Columns("AGUANT_ORIGEN_DESCR")
            Me.columnAGUANT_TIPO_MU = MyBase.Columns("AGUANT_TIPO_MU")
            Me.columnAGUANT_TIPO_MDESCR = MyBase.Columns("AGUANT_TIPO_MDESCR")
            Me.columnAGUANT_TIPO_RECIP = MyBase.Columns("AGUANT_TIPO_RECIP")
            Me.columnAGUANT_DETALLE = MyBase.Columns("AGUANT_DETALLE")
            Me.columnAGUANT_VOLUMEN_MU = MyBase.Columns("AGUANT_VOLUMEN_MU")
            Me.columnAGUANT_ESTADO = MyBase.Columns("AGUANT_ESTADO")
            Me.columnAGUANT_PRESERVANTES = MyBase.Columns("AGUANT_PRESERVANTES")
            Me.columnAGUANT_IDENTIFICACION1 = MyBase.Columns("AGUANT_IDENTIFICACION1")
            Me.columnAGUANT_IDENTIFICACION2 = MyBase.Columns("AGUANT_IDENTIFICACION2")
            Me.columnAGUANT_FECHAING = MyBase.Columns("AGUANT_FECHAING")
            Me.columnAGUANT_HORA_INGRESO = MyBase.Columns("AGUANT_HORA_INGRESO")
            Me.columnAGUANT_OBSERVACIONES = MyBase.Columns("AGUANT_OBSERVACIONES")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnAGUANT_MUESTREADOR = New Global.System.Data.DataColumn("AGUANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_MUESTREADOR)
            Me.columnAGUANT_FECHAMU = New Global.System.Data.DataColumn("AGUANT_FECHAMU", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_FECHAMU)
            Me.columnAGUANT_HORA_MUESTREO = New Global.System.Data.DataColumn("AGUANT_HORA_MUESTREO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_HORA_MUESTREO)
            Me.columnAGUANT_PREDIO = New Global.System.Data.DataColumn("AGUANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_PREDIO)
            Me.columnAGUANT_LOCALIDAD = New Global.System.Data.DataColumn("AGUANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_LOCALIDAD)
            Me.columnAGUANT_ORIGEN = New Global.System.Data.DataColumn("AGUANT_ORIGEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_ORIGEN)
            Me.columnAGUANT_ORIGEN_DESCR = New Global.System.Data.DataColumn("AGUANT_ORIGEN_DESCR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_ORIGEN_DESCR)
            Me.columnAGUANT_TIPO_MU = New Global.System.Data.DataColumn("AGUANT_TIPO_MU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_TIPO_MU)
            Me.columnAGUANT_TIPO_MDESCR = New Global.System.Data.DataColumn("AGUANT_TIPO_MDESCR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_TIPO_MDESCR)
            Me.columnAGUANT_TIPO_RECIP = New Global.System.Data.DataColumn("AGUANT_TIPO_RECIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_TIPO_RECIP)
            Me.columnAGUANT_DETALLE = New Global.System.Data.DataColumn("AGUANT_DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_DETALLE)
            Me.columnAGUANT_VOLUMEN_MU = New Global.System.Data.DataColumn("AGUANT_VOLUMEN_MU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_VOLUMEN_MU)
            Me.columnAGUANT_ESTADO = New Global.System.Data.DataColumn("AGUANT_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_ESTADO)
            Me.columnAGUANT_PRESERVANTES = New Global.System.Data.DataColumn("AGUANT_PRESERVANTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_PRESERVANTES)
            Me.columnAGUANT_IDENTIFICACION1 = New Global.System.Data.DataColumn("AGUANT_IDENTIFICACION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_IDENTIFICACION1)
            Me.columnAGUANT_IDENTIFICACION2 = New Global.System.Data.DataColumn("AGUANT_IDENTIFICACION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_IDENTIFICACION2)
            Me.columnAGUANT_FECHAING = New Global.System.Data.DataColumn("AGUANT_FECHAING", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_FECHAING)
            Me.columnAGUANT_HORA_INGRESO = New Global.System.Data.DataColumn("AGUANT_HORA_INGRESO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_HORA_INGRESO)
            Me.columnAGUANT_OBSERVACIONES = New Global.System.Data.DataColumn("AGUANT_OBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGUANT_OBSERVACIONES)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey8", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_AGUA_ANTECEDENTESRow() As OT_AGUA_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_AGUA_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_AGUA_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_AGUA_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_AGUA_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_AGUA_ANTECEDENTESRowChanged(Me, New OT_AGUA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_AGUA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_AGUA_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_AGUA_ANTECEDENTESRowChanging(Me, New OT_AGUA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_AGUA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_AGUA_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_AGUA_ANTECEDENTESRowDeleted(Me, New OT_AGUA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_AGUA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_AGUA_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_AGUA_ANTECEDENTESRowDeleting(Me, New OT_AGUA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_AGUA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_AGUA_ANTECEDENTESRow(ByVal row As OT_AGUA_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_AGUA_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_CODIFICACION_RECIBODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnMUESTRA As Global.System.Data.DataColumn
        
        Private columnOTC_NLAB_DESDE As Global.System.Data.DataColumn
        
        Private columnANA_CODIGO As Global.System.Data.DataColumn
        
        Private columnANA_ANALISIS As Global.System.Data.DataColumn
        
        Private columnOTC_CANT_MUESTRAS As Global.System.Data.DataColumn
        
        Private columnOTC_NLAB_HASTA As Global.System.Data.DataColumn
        
        Private columnOTC_PRECIOUN As Global.System.Data.DataColumn
        
        Private columnOTC_PRECIONET As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_CODIFICACION_RECIBO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUESTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUESTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_NLAB_DESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_NLAB_DESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANA_ANALISISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANA_ANALISIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_CANT_MUESTRASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_CANT_MUESTRAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_NLAB_HASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_NLAB_HASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_PRECIOUNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_PRECIOUN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTC_PRECIONETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTC_PRECIONET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_CODIFICACION_RECIBORow
            Get
                Return CType(Me.Rows(index),OT_CODIFICACION_RECIBORow)
            End Get
        End Property
        
        Public Event OT_CODIFICACION_RECIBORowChanging As OT_CODIFICACION_RECIBORowChangeEventHandler
        
        Public Event OT_CODIFICACION_RECIBORowChanged As OT_CODIFICACION_RECIBORowChangeEventHandler
        
        Public Event OT_CODIFICACION_RECIBORowDeleting As OT_CODIFICACION_RECIBORowChangeEventHandler
        
        Public Event OT_CODIFICACION_RECIBORowDeleted As OT_CODIFICACION_RECIBORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_CODIFICACION_RECIBORow(ByVal row As OT_CODIFICACION_RECIBORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_CODIFICACION_RECIBORow(ByVal OT_NUMERO As Integer, ByVal MUESTRA As String, ByVal OTC_NLAB_DESDE As Integer, ByVal ANA_CODIGO As Double, ByVal ANA_ANALISIS As String, ByVal OTC_CANT_MUESTRAS As Integer, ByVal OTC_NLAB_HASTA As Integer, ByVal OTC_PRECIOUN As Integer, ByVal OTC_PRECIONET As Integer) As OT_CODIFICACION_RECIBORow
            Dim rowOT_CODIFICACION_RECIBORow As OT_CODIFICACION_RECIBORow = CType(Me.NewRow,OT_CODIFICACION_RECIBORow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, MUESTRA, OTC_NLAB_DESDE, ANA_CODIGO, ANA_ANALISIS, OTC_CANT_MUESTRAS, OTC_NLAB_HASTA, OTC_PRECIOUN, OTC_PRECIONET}
            rowOT_CODIFICACION_RECIBORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_CODIFICACION_RECIBORow)
            Return rowOT_CODIFICACION_RECIBORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROMUESTRAOTC_NLAB_DESDEANA_CODIGO(ByVal OT_NUMERO As Integer, ByVal MUESTRA As String, ByVal OTC_NLAB_DESDE As Integer, ByVal ANA_CODIGO As Double) As OT_CODIFICACION_RECIBORow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, MUESTRA, OTC_NLAB_DESDE, ANA_CODIGO}),OT_CODIFICACION_RECIBORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_CODIFICACION_RECIBODataTable = CType(MyBase.Clone,OT_CODIFICACION_RECIBODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_CODIFICACION_RECIBODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnMUESTRA = MyBase.Columns("MUESTRA")
            Me.columnOTC_NLAB_DESDE = MyBase.Columns("OTC_NLAB_DESDE")
            Me.columnANA_CODIGO = MyBase.Columns("ANA_CODIGO")
            Me.columnANA_ANALISIS = MyBase.Columns("ANA_ANALISIS")
            Me.columnOTC_CANT_MUESTRAS = MyBase.Columns("OTC_CANT_MUESTRAS")
            Me.columnOTC_NLAB_HASTA = MyBase.Columns("OTC_NLAB_HASTA")
            Me.columnOTC_PRECIOUN = MyBase.Columns("OTC_PRECIOUN")
            Me.columnOTC_PRECIONET = MyBase.Columns("OTC_PRECIONET")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnMUESTRA = New Global.System.Data.DataColumn("MUESTRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUESTRA)
            Me.columnOTC_NLAB_DESDE = New Global.System.Data.DataColumn("OTC_NLAB_DESDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_NLAB_DESDE)
            Me.columnANA_CODIGO = New Global.System.Data.DataColumn("ANA_CODIGO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_CODIGO)
            Me.columnANA_ANALISIS = New Global.System.Data.DataColumn("ANA_ANALISIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANA_ANALISIS)
            Me.columnOTC_CANT_MUESTRAS = New Global.System.Data.DataColumn("OTC_CANT_MUESTRAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_CANT_MUESTRAS)
            Me.columnOTC_NLAB_HASTA = New Global.System.Data.DataColumn("OTC_NLAB_HASTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_NLAB_HASTA)
            Me.columnOTC_PRECIOUN = New Global.System.Data.DataColumn("OTC_PRECIOUN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_PRECIOUN)
            Me.columnOTC_PRECIONET = New Global.System.Data.DataColumn("OTC_PRECIONET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTC_PRECIONET)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey1", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnMUESTRA, Me.columnOTC_NLAB_DESDE, Me.columnANA_CODIGO}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnMUESTRA.AllowDBNull = false
            Me.columnOTC_NLAB_DESDE.AllowDBNull = false
            Me.columnANA_CODIGO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_CODIFICACION_RECIBORow() As OT_CODIFICACION_RECIBORow
            Return CType(Me.NewRow,OT_CODIFICACION_RECIBORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_CODIFICACION_RECIBORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_CODIFICACION_RECIBORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_CODIFICACION_RECIBORowChangedEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACION_RECIBORowChanged(Me, New OT_CODIFICACION_RECIBORowChangeEvent(CType(e.Row,OT_CODIFICACION_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_CODIFICACION_RECIBORowChangingEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACION_RECIBORowChanging(Me, New OT_CODIFICACION_RECIBORowChangeEvent(CType(e.Row,OT_CODIFICACION_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_CODIFICACION_RECIBORowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACION_RECIBORowDeleted(Me, New OT_CODIFICACION_RECIBORowChangeEvent(CType(e.Row,OT_CODIFICACION_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_CODIFICACION_RECIBORowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_CODIFICACION_RECIBORowDeleting(Me, New OT_CODIFICACION_RECIBORowChangeEvent(CType(e.Row,OT_CODIFICACION_RECIBORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_CODIFICACION_RECIBORow(ByVal row As OT_CODIFICACION_RECIBORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_CODIFICACION_RECIBODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MODIFICA_NLABDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnIDENTIFICACION1 As Global.System.Data.DataColumn
        
        Private columnIDENTIFICACION2 As Global.System.Data.DataColumn
        
        Private columnMODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MODIFICA_NLAB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIFICACION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIFICACION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIFICACION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIFICACION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MODIFICA_NLABRow
            Get
                Return CType(Me.Rows(index),MODIFICA_NLABRow)
            End Get
        End Property
        
        Public Event MODIFICA_NLABRowChanging As MODIFICA_NLABRowChangeEventHandler
        
        Public Event MODIFICA_NLABRowChanged As MODIFICA_NLABRowChangeEventHandler
        
        Public Event MODIFICA_NLABRowDeleting As MODIFICA_NLABRowChangeEventHandler
        
        Public Event MODIFICA_NLABRowDeleted As MODIFICA_NLABRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMODIFICA_NLABRow(ByVal row As MODIFICA_NLABRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMODIFICA_NLABRow(ByVal OT_NLAB As Integer, ByVal IDENTIFICACION1 As String, ByVal IDENTIFICACION2 As String, ByVal MODIFICACION As Boolean) As MODIFICA_NLABRow
            Dim rowMODIFICA_NLABRow As MODIFICA_NLABRow = CType(Me.NewRow,MODIFICA_NLABRow)
            Dim columnValuesArray() As Object = New Object() {OT_NLAB, IDENTIFICACION1, IDENTIFICACION2, MODIFICACION}
            rowMODIFICA_NLABRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMODIFICA_NLABRow)
            Return rowMODIFICA_NLABRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NLAB(ByVal OT_NLAB As Integer) As MODIFICA_NLABRow
            Return CType(Me.Rows.Find(New Object() {OT_NLAB}),MODIFICA_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MODIFICA_NLABDataTable = CType(MyBase.Clone,MODIFICA_NLABDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MODIFICA_NLABDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnIDENTIFICACION1 = MyBase.Columns("IDENTIFICACION1")
            Me.columnIDENTIFICACION2 = MyBase.Columns("IDENTIFICACION2")
            Me.columnMODIFICACION = MyBase.Columns("MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnIDENTIFICACION1 = New Global.System.Data.DataColumn("IDENTIFICACION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIFICACION1)
            Me.columnIDENTIFICACION2 = New Global.System.Data.DataColumn("IDENTIFICACION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIFICACION2)
            Me.columnMODIFICACION = New Global.System.Data.DataColumn("MODIFICACION", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey34", New Global.System.Data.DataColumn() {Me.columnOT_NLAB}, true))
            Me.columnOT_NLAB.AllowDBNull = false
            Me.columnOT_NLAB.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMODIFICA_NLABRow() As MODIFICA_NLABRow
            Return CType(Me.NewRow,MODIFICA_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MODIFICA_NLABRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MODIFICA_NLABRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MODIFICA_NLABRowChangedEvent) Is Nothing) Then
                RaiseEvent MODIFICA_NLABRowChanged(Me, New MODIFICA_NLABRowChangeEvent(CType(e.Row,MODIFICA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MODIFICA_NLABRowChangingEvent) Is Nothing) Then
                RaiseEvent MODIFICA_NLABRowChanging(Me, New MODIFICA_NLABRowChangeEvent(CType(e.Row,MODIFICA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MODIFICA_NLABRowDeletedEvent) Is Nothing) Then
                RaiseEvent MODIFICA_NLABRowDeleted(Me, New MODIFICA_NLABRowChangeEvent(CType(e.Row,MODIFICA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MODIFICA_NLABRowDeletingEvent) Is Nothing) Then
                RaiseEvent MODIFICA_NLABRowDeleting(Me, New MODIFICA_NLABRowChangeEvent(CType(e.Row,MODIFICA_NLABRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMODIFICA_NLABRow(ByVal row As MODIFICA_NLABRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MODIFICA_NLABDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MYEMADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIORD As Global.System.Data.DataColumn
        
        Private columnINLA As Global.System.Data.DataColumn
        
        Private columnILIN As Global.System.Data.DataColumn
        
        Private columnIFEI As Global.System.Data.DataColumn
        
        Private columnIPRO As Global.System.Data.DataColumn
        
        Private columnIEMP As Global.System.Data.DataColumn
        
        Private columnIREM As Global.System.Data.DataColumn
        
        Private columnIPRE As Global.System.Data.DataColumn
        
        Private columnIESP As Global.System.Data.DataColumn
        
        Private columnIVAR As Global.System.Data.DataColumn
        
        Private columnIFEM As Global.System.Data.DataColumn
        
        Private columnILOC As Global.System.Data.DataColumn
        
        Private columnICUA As Global.System.Data.DataColumn
        
        Private columnIEDA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MYEMA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IREMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIREM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIPRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IESPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIESP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IFEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIFEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ILOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnILOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICUAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICUA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MYEMARow
            Get
                Return CType(Me.Rows(index),MYEMARow)
            End Get
        End Property
        
        Public Event MYEMARowChanging As MYEMARowChangeEventHandler
        
        Public Event MYEMARowChanged As MYEMARowChangeEventHandler
        
        Public Event MYEMARowDeleting As MYEMARowChangeEventHandler
        
        Public Event MYEMARowDeleted As MYEMARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMYEMARow(ByVal row As MYEMARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMYEMARow(ByVal IORD As String, ByVal INLA As String, ByVal ILIN As Double, ByVal IFEI As Date, ByVal IPRO As String, ByVal IEMP As String, ByVal IREM As String, ByVal IPRE As String, ByVal IESP As String, ByVal IVAR As String, ByVal IFEM As Date, ByVal ILOC As String, ByVal ICUA As String, ByVal IEDA As Double) As MYEMARow
            Dim rowMYEMARow As MYEMARow = CType(Me.NewRow,MYEMARow)
            Dim columnValuesArray() As Object = New Object() {IORD, INLA, ILIN, IFEI, IPRO, IEMP, IREM, IPRE, IESP, IVAR, IFEM, ILOC, ICUA, IEDA}
            rowMYEMARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMYEMARow)
            Return rowMYEMARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIORDINLAILIN(ByVal IORD As String, ByVal INLA As String, ByVal ILIN As Double) As MYEMARow
            Return CType(Me.Rows.Find(New Object() {IORD, INLA, ILIN}),MYEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MYEMADataTable = CType(MyBase.Clone,MYEMADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MYEMADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIORD = MyBase.Columns("IORD")
            Me.columnINLA = MyBase.Columns("INLA")
            Me.columnILIN = MyBase.Columns("ILIN")
            Me.columnIFEI = MyBase.Columns("IFEI")
            Me.columnIPRO = MyBase.Columns("IPRO")
            Me.columnIEMP = MyBase.Columns("IEMP")
            Me.columnIREM = MyBase.Columns("IREM")
            Me.columnIPRE = MyBase.Columns("IPRE")
            Me.columnIESP = MyBase.Columns("IESP")
            Me.columnIVAR = MyBase.Columns("IVAR")
            Me.columnIFEM = MyBase.Columns("IFEM")
            Me.columnILOC = MyBase.Columns("ILOC")
            Me.columnICUA = MyBase.Columns("ICUA")
            Me.columnIEDA = MyBase.Columns("IEDA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIORD = New Global.System.Data.DataColumn("IORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIORD)
            Me.columnINLA = New Global.System.Data.DataColumn("INLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINLA)
            Me.columnILIN = New Global.System.Data.DataColumn("ILIN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILIN)
            Me.columnIFEI = New Global.System.Data.DataColumn("IFEI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEI)
            Me.columnIPRO = New Global.System.Data.DataColumn("IPRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRO)
            Me.columnIEMP = New Global.System.Data.DataColumn("IEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEMP)
            Me.columnIREM = New Global.System.Data.DataColumn("IREM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIREM)
            Me.columnIPRE = New Global.System.Data.DataColumn("IPRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIPRE)
            Me.columnIESP = New Global.System.Data.DataColumn("IESP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIESP)
            Me.columnIVAR = New Global.System.Data.DataColumn("IVAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVAR)
            Me.columnIFEM = New Global.System.Data.DataColumn("IFEM", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIFEM)
            Me.columnILOC = New Global.System.Data.DataColumn("ILOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnILOC)
            Me.columnICUA = New Global.System.Data.DataColumn("ICUA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICUA)
            Me.columnIEDA = New Global.System.Data.DataColumn("IEDA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIEDA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey35", New Global.System.Data.DataColumn() {Me.columnIORD, Me.columnINLA, Me.columnILIN}, true))
            Me.columnIORD.AllowDBNull = false
            Me.columnINLA.AllowDBNull = false
            Me.columnILIN.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMYEMARow() As MYEMARow
            Return CType(Me.NewRow,MYEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MYEMARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MYEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MYEMARowChangedEvent) Is Nothing) Then
                RaiseEvent MYEMARowChanged(Me, New MYEMARowChangeEvent(CType(e.Row,MYEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MYEMARowChangingEvent) Is Nothing) Then
                RaiseEvent MYEMARowChanging(Me, New MYEMARowChangeEvent(CType(e.Row,MYEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MYEMARowDeletedEvent) Is Nothing) Then
                RaiseEvent MYEMARowDeleted(Me, New MYEMARowChangeEvent(CType(e.Row,MYEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MYEMARowDeletingEvent) Is Nothing) Then
                RaiseEvent MYEMARowDeleting(Me, New MYEMARowChangeEvent(CType(e.Row,MYEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMYEMARow(ByVal row As MYEMARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MYEMADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_NEMATODOS_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnNEMANT_TNEMA As Global.System.Data.DataColumn
        
        Private columnNEMANT_CUARTEL1 As Global.System.Data.DataColumn
        
        Private columnNEMANT_CUARTEL2 As Global.System.Data.DataColumn
        
        Private columnNEMANT_ESPECIE As Global.System.Data.DataColumn
        
        Private columnNEMANT_VARIEDAD As Global.System.Data.DataColumn
        
        Private columnNEMANT_EDAD As Global.System.Data.DataColumn
        
        Private columnNEMANT_PREDIO As Global.System.Data.DataColumn
        
        Private columnNEMANT_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnNEMANT_REGION As Global.System.Data.DataColumn
        
        Private columnNEMANT_FMUESTREO As Global.System.Data.DataColumn
        
        Private columnNEMANT_VIGOR As Global.System.Data.DataColumn
        
        Private columnNEMANT_PRODANT As Global.System.Data.DataColumn
        
        Private columnNEMANT_PRODACT As Global.System.Data.DataColumn
        
        Private columnNEMANT_OBSERVACION As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        Private columnNEMANT_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnNEMANT_CULTIVO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_NEMATODOS_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_TNEMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_TNEMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_CUARTEL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_CUARTEL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_CUARTEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_CUARTEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_VARIEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_VARIEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_EDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_EDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_REGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_REGION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_VIGORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_VIGOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_PRODANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_PRODANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_PRODACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_PRODACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_OBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_OBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEMANT_CULTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEMANT_CULTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_NEMATODOS_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_NEMATODOS_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_NEMATODOS_ANTECEDENTESRowChanging As OT_NEMATODOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_NEMATODOS_ANTECEDENTESRowChanged As OT_NEMATODOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_NEMATODOS_ANTECEDENTESRowDeleting As OT_NEMATODOS_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_NEMATODOS_ANTECEDENTESRowDeleted As OT_NEMATODOS_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_NEMATODOS_ANTECEDENTESRow(ByVal row As OT_NEMATODOS_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_NEMATODOS_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal NEMANT_TNEMA As String,  _
                    ByVal NEMANT_CUARTEL1 As String,  _
                    ByVal NEMANT_CUARTEL2 As String,  _
                    ByVal NEMANT_ESPECIE As String,  _
                    ByVal NEMANT_VARIEDAD As String,  _
                    ByVal NEMANT_EDAD As String,  _
                    ByVal NEMANT_PREDIO As String,  _
                    ByVal NEMANT_LOCALIDAD As String,  _
                    ByVal NEMANT_REGION As String,  _
                    ByVal NEMANT_FMUESTREO As Date,  _
                    ByVal NEMANT_VIGOR As String,  _
                    ByVal NEMANT_PRODANT As String,  _
                    ByVal NEMANT_PRODACT As String,  _
                    ByVal NEMANT_OBSERVACION As String,  _
                    ByVal NLAB_ESTADO As String,  _
                    ByVal NEMANT_MUESTREADOR As String,  _
                    ByVal NEMANT_CULTIVO As String) As OT_NEMATODOS_ANTECEDENTESRow
            Dim rowOT_NEMATODOS_ANTECEDENTESRow As OT_NEMATODOS_ANTECEDENTESRow = CType(Me.NewRow,OT_NEMATODOS_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, NEMANT_TNEMA, NEMANT_CUARTEL1, NEMANT_CUARTEL2, NEMANT_ESPECIE, NEMANT_VARIEDAD, NEMANT_EDAD, NEMANT_PREDIO, NEMANT_LOCALIDAD, NEMANT_REGION, NEMANT_FMUESTREO, NEMANT_VIGOR, NEMANT_PRODANT, NEMANT_PRODACT, NEMANT_OBSERVACION, NLAB_ESTADO, NEMANT_MUESTREADOR, NEMANT_CULTIVO}
            rowOT_NEMATODOS_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_NEMATODOS_ANTECEDENTESRow)
            Return rowOT_NEMATODOS_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_NEMATODOS_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_NEMATODOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_NEMATODOS_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_NEMATODOS_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_NEMATODOS_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnNEMANT_TNEMA = MyBase.Columns("NEMANT_TNEMA")
            Me.columnNEMANT_CUARTEL1 = MyBase.Columns("NEMANT_CUARTEL1")
            Me.columnNEMANT_CUARTEL2 = MyBase.Columns("NEMANT_CUARTEL2")
            Me.columnNEMANT_ESPECIE = MyBase.Columns("NEMANT_ESPECIE")
            Me.columnNEMANT_VARIEDAD = MyBase.Columns("NEMANT_VARIEDAD")
            Me.columnNEMANT_EDAD = MyBase.Columns("NEMANT_EDAD")
            Me.columnNEMANT_PREDIO = MyBase.Columns("NEMANT_PREDIO")
            Me.columnNEMANT_LOCALIDAD = MyBase.Columns("NEMANT_LOCALIDAD")
            Me.columnNEMANT_REGION = MyBase.Columns("NEMANT_REGION")
            Me.columnNEMANT_FMUESTREO = MyBase.Columns("NEMANT_FMUESTREO")
            Me.columnNEMANT_VIGOR = MyBase.Columns("NEMANT_VIGOR")
            Me.columnNEMANT_PRODANT = MyBase.Columns("NEMANT_PRODANT")
            Me.columnNEMANT_PRODACT = MyBase.Columns("NEMANT_PRODACT")
            Me.columnNEMANT_OBSERVACION = MyBase.Columns("NEMANT_OBSERVACION")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
            Me.columnNEMANT_MUESTREADOR = MyBase.Columns("NEMANT_MUESTREADOR")
            Me.columnNEMANT_CULTIVO = MyBase.Columns("NEMANT_CULTIVO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnNEMANT_TNEMA = New Global.System.Data.DataColumn("NEMANT_TNEMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_TNEMA)
            Me.columnNEMANT_CUARTEL1 = New Global.System.Data.DataColumn("NEMANT_CUARTEL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_CUARTEL1)
            Me.columnNEMANT_CUARTEL2 = New Global.System.Data.DataColumn("NEMANT_CUARTEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_CUARTEL2)
            Me.columnNEMANT_ESPECIE = New Global.System.Data.DataColumn("NEMANT_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_ESPECIE)
            Me.columnNEMANT_VARIEDAD = New Global.System.Data.DataColumn("NEMANT_VARIEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_VARIEDAD)
            Me.columnNEMANT_EDAD = New Global.System.Data.DataColumn("NEMANT_EDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_EDAD)
            Me.columnNEMANT_PREDIO = New Global.System.Data.DataColumn("NEMANT_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_PREDIO)
            Me.columnNEMANT_LOCALIDAD = New Global.System.Data.DataColumn("NEMANT_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_LOCALIDAD)
            Me.columnNEMANT_REGION = New Global.System.Data.DataColumn("NEMANT_REGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_REGION)
            Me.columnNEMANT_FMUESTREO = New Global.System.Data.DataColumn("NEMANT_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_FMUESTREO)
            Me.columnNEMANT_VIGOR = New Global.System.Data.DataColumn("NEMANT_VIGOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_VIGOR)
            Me.columnNEMANT_PRODANT = New Global.System.Data.DataColumn("NEMANT_PRODANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_PRODANT)
            Me.columnNEMANT_PRODACT = New Global.System.Data.DataColumn("NEMANT_PRODACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_PRODACT)
            Me.columnNEMANT_OBSERVACION = New Global.System.Data.DataColumn("NEMANT_OBSERVACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_OBSERVACION)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.columnNEMANT_MUESTREADOR = New Global.System.Data.DataColumn("NEMANT_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_MUESTREADOR)
            Me.columnNEMANT_CULTIVO = New Global.System.Data.DataColumn("NEMANT_CULTIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEMANT_CULTIVO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey36", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_NEMATODOS_ANTECEDENTESRow() As OT_NEMATODOS_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_NEMATODOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_NEMATODOS_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_NEMATODOS_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_NEMATODOS_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_NEMATODOS_ANTECEDENTESRowChanged(Me, New OT_NEMATODOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_NEMATODOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_NEMATODOS_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_NEMATODOS_ANTECEDENTESRowChanging(Me, New OT_NEMATODOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_NEMATODOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_NEMATODOS_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_NEMATODOS_ANTECEDENTESRowDeleted(Me, New OT_NEMATODOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_NEMATODOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_NEMATODOS_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_NEMATODOS_ANTECEDENTESRowDeleting(Me, New OT_NEMATODOS_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_NEMATODOS_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_NEMATODOS_ANTECEDENTESRow(ByVal row As OT_NEMATODOS_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_NEMATODOS_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FITOEVALUACION_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnFITEVA_PREDIO As Global.System.Data.DataColumn
        
        Private columnFITEVA_ESPECIE As Global.System.Data.DataColumn
        
        Private columnFITEVA_VARIEDAD As Global.System.Data.DataColumn
        
        Private columnFITEVA_DISTPLANTA As Global.System.Data.DataColumn
        
        Private columnFITEVA_CUARTEL1 As Global.System.Data.DataColumn
        
        Private columnFITEVA_CUARTEL2 As Global.System.Data.DataColumn
        
        Private columnFITEVA_ANOPLANTA As Global.System.Data.DataColumn
        
        Private columnFITEVA_NUMTRATA As Global.System.Data.DataColumn
        
        Private columnFITEVA_APLICACION As Global.System.Data.DataColumn
        
        Private columnFITEVA_DURACIONDESDE As Global.System.Data.DataColumn
        
        Private columnFITEVA_DURACIONHASTA As Global.System.Data.DataColumn
        
        Private columnFITEVA_COSECHA As Global.System.Data.DataColumn
        
        Private columnFITEVA_FECHA_GUARDA As Global.System.Data.DataColumn
        
        Private columnFITEVA_LOCALIDAD As Global.System.Data.DataColumn
        
        Private columnFITEVA_NOMBRE_ENSAYO As Global.System.Data.DataColumn
        
        Private columnFITEVA_OBSERVACION_ As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        Private columnFITEVA_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnFITEVA_FMUESTREO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FITOEVALUACION_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_PREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_PREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_ESPECIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_ESPECIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_VARIEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_VARIEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_DISTPLANTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_DISTPLANTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_CUARTEL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_CUARTEL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_CUARTEL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_CUARTEL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_ANOPLANTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_ANOPLANTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_NUMTRATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_NUMTRATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_APLICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_APLICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_DURACIONDESDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_DURACIONDESDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_DURACIONHASTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_DURACIONHASTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_COSECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_COSECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_FECHA_GUARDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_FECHA_GUARDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_NOMBRE_ENSAYOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_NOMBRE_ENSAYO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_OBSERVACION_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_OBSERVACION_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITEVA_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITEVA_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FITOEVALUACION_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_FITOEVALUACION_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_FITOEVALUACION_ANTECEDENTESRowChanging As OT_FITOEVALUACION_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOEVALUACION_ANTECEDENTESRowChanged As OT_FITOEVALUACION_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOEVALUACION_ANTECEDENTESRowDeleting As OT_FITOEVALUACION_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOEVALUACION_ANTECEDENTESRowDeleted As OT_FITOEVALUACION_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FITOEVALUACION_ANTECEDENTESRow(ByVal row As OT_FITOEVALUACION_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FITOEVALUACION_ANTECEDENTESRow( _
                    ByVal OT_NUMERO As Integer,  _
                    ByVal OT_NLAB As Integer,  _
                    ByVal FITEVA_PREDIO As String,  _
                    ByVal FITEVA_ESPECIE As String,  _
                    ByVal FITEVA_VARIEDAD As String,  _
                    ByVal FITEVA_DISTPLANTA As String,  _
                    ByVal FITEVA_CUARTEL1 As String,  _
                    ByVal FITEVA_CUARTEL2 As String,  _
                    ByVal FITEVA_ANOPLANTA As Integer,  _
                    ByVal FITEVA_NUMTRATA As Integer,  _
                    ByVal FITEVA_APLICACION As Integer,  _
                    ByVal FITEVA_DURACIONDESDE As String,  _
                    ByVal FITEVA_DURACIONHASTA As String,  _
                    ByVal FITEVA_COSECHA As String,  _
                    ByVal FITEVA_FECHA_GUARDA As String,  _
                    ByVal FITEVA_LOCALIDAD As String,  _
                    ByVal FITEVA_NOMBRE_ENSAYO As String,  _
                    ByVal FITEVA_OBSERVACION_ As String,  _
                    ByVal NLAB_ESTADO As String,  _
                    ByVal FITEVA_MUESTREADOR As String,  _
                    ByVal FITEVA_FMUESTREO As Date) As OT_FITOEVALUACION_ANTECEDENTESRow
            Dim rowOT_FITOEVALUACION_ANTECEDENTESRow As OT_FITOEVALUACION_ANTECEDENTESRow = CType(Me.NewRow,OT_FITOEVALUACION_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, FITEVA_PREDIO, FITEVA_ESPECIE, FITEVA_VARIEDAD, FITEVA_DISTPLANTA, FITEVA_CUARTEL1, FITEVA_CUARTEL2, FITEVA_ANOPLANTA, FITEVA_NUMTRATA, FITEVA_APLICACION, FITEVA_DURACIONDESDE, FITEVA_DURACIONHASTA, FITEVA_COSECHA, FITEVA_FECHA_GUARDA, FITEVA_LOCALIDAD, FITEVA_NOMBRE_ENSAYO, FITEVA_OBSERVACION_, NLAB_ESTADO, FITEVA_MUESTREADOR, FITEVA_FMUESTREO}
            rowOT_FITOEVALUACION_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FITOEVALUACION_ANTECEDENTESRow)
            Return rowOT_FITOEVALUACION_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FITOEVALUACION_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FITOEVALUACION_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FITOEVALUACION_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_FITOEVALUACION_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FITOEVALUACION_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnFITEVA_PREDIO = MyBase.Columns("FITEVA_PREDIO")
            Me.columnFITEVA_ESPECIE = MyBase.Columns("FITEVA_ESPECIE")
            Me.columnFITEVA_VARIEDAD = MyBase.Columns("FITEVA_VARIEDAD")
            Me.columnFITEVA_DISTPLANTA = MyBase.Columns("FITEVA_DISTPLANTA")
            Me.columnFITEVA_CUARTEL1 = MyBase.Columns("FITEVA_CUARTEL1")
            Me.columnFITEVA_CUARTEL2 = MyBase.Columns("FITEVA_CUARTEL2")
            Me.columnFITEVA_ANOPLANTA = MyBase.Columns("FITEVA_ANOPLANTA")
            Me.columnFITEVA_NUMTRATA = MyBase.Columns("FITEVA_NUMTRATA")
            Me.columnFITEVA_APLICACION = MyBase.Columns("FITEVA_APLICACION")
            Me.columnFITEVA_DURACIONDESDE = MyBase.Columns("FITEVA_DURACIONDESDE")
            Me.columnFITEVA_DURACIONHASTA = MyBase.Columns("FITEVA_DURACIONHASTA")
            Me.columnFITEVA_COSECHA = MyBase.Columns("FITEVA_COSECHA")
            Me.columnFITEVA_FECHA_GUARDA = MyBase.Columns("FITEVA_FECHA_GUARDA")
            Me.columnFITEVA_LOCALIDAD = MyBase.Columns("FITEVA_LOCALIDAD")
            Me.columnFITEVA_NOMBRE_ENSAYO = MyBase.Columns("FITEVA_NOMBRE_ENSAYO")
            Me.columnFITEVA_OBSERVACION_ = MyBase.Columns("FITEVA_OBSERVACION ")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
            Me.columnFITEVA_MUESTREADOR = MyBase.Columns("FITEVA_MUESTREADOR")
            Me.columnFITEVA_FMUESTREO = MyBase.Columns("FITEVA_FMUESTREO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnFITEVA_PREDIO = New Global.System.Data.DataColumn("FITEVA_PREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_PREDIO)
            Me.columnFITEVA_ESPECIE = New Global.System.Data.DataColumn("FITEVA_ESPECIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_ESPECIE)
            Me.columnFITEVA_VARIEDAD = New Global.System.Data.DataColumn("FITEVA_VARIEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_VARIEDAD)
            Me.columnFITEVA_DISTPLANTA = New Global.System.Data.DataColumn("FITEVA_DISTPLANTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_DISTPLANTA)
            Me.columnFITEVA_CUARTEL1 = New Global.System.Data.DataColumn("FITEVA_CUARTEL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_CUARTEL1)
            Me.columnFITEVA_CUARTEL2 = New Global.System.Data.DataColumn("FITEVA_CUARTEL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_CUARTEL2)
            Me.columnFITEVA_ANOPLANTA = New Global.System.Data.DataColumn("FITEVA_ANOPLANTA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_ANOPLANTA)
            Me.columnFITEVA_NUMTRATA = New Global.System.Data.DataColumn("FITEVA_NUMTRATA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_NUMTRATA)
            Me.columnFITEVA_APLICACION = New Global.System.Data.DataColumn("FITEVA_APLICACION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_APLICACION)
            Me.columnFITEVA_DURACIONDESDE = New Global.System.Data.DataColumn("FITEVA_DURACIONDESDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_DURACIONDESDE)
            Me.columnFITEVA_DURACIONHASTA = New Global.System.Data.DataColumn("FITEVA_DURACIONHASTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_DURACIONHASTA)
            Me.columnFITEVA_COSECHA = New Global.System.Data.DataColumn("FITEVA_COSECHA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_COSECHA)
            Me.columnFITEVA_FECHA_GUARDA = New Global.System.Data.DataColumn("FITEVA_FECHA_GUARDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_FECHA_GUARDA)
            Me.columnFITEVA_LOCALIDAD = New Global.System.Data.DataColumn("FITEVA_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_LOCALIDAD)
            Me.columnFITEVA_NOMBRE_ENSAYO = New Global.System.Data.DataColumn("FITEVA_NOMBRE_ENSAYO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_NOMBRE_ENSAYO)
            Me.columnFITEVA_OBSERVACION_ = New Global.System.Data.DataColumn("FITEVA_OBSERVACION ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_OBSERVACION_)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.columnFITEVA_MUESTREADOR = New Global.System.Data.DataColumn("FITEVA_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_MUESTREADOR)
            Me.columnFITEVA_FMUESTREO = New Global.System.Data.DataColumn("FITEVA_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITEVA_FMUESTREO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey37", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FITOEVALUACION_ANTECEDENTESRow() As OT_FITOEVALUACION_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_FITOEVALUACION_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FITOEVALUACION_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FITOEVALUACION_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FITOEVALUACION_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FITOEVALUACION_ANTECEDENTESRowChanged(Me, New OT_FITOEVALUACION_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOEVALUACION_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FITOEVALUACION_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FITOEVALUACION_ANTECEDENTESRowChanging(Me, New OT_FITOEVALUACION_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOEVALUACION_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FITOEVALUACION_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FITOEVALUACION_ANTECEDENTESRowDeleted(Me, New OT_FITOEVALUACION_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOEVALUACION_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FITOEVALUACION_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FITOEVALUACION_ANTECEDENTESRowDeleting(Me, New OT_FITOEVALUACION_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOEVALUACION_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FITOEVALUACION_ANTECEDENTESRow(ByVal row As OT_FITOEVALUACION_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FITOEVALUACION_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FITORESISTENCIA_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnFITRES_NUMPRODUCTO As Global.System.Data.DataColumn
        
        Private columnFITRES_NUMCONCENTRACIONES As Global.System.Data.DataColumn
        
        Private columnFITRES_MICROORGANISMOS As Global.System.Data.DataColumn
        
        Private columnFITRES_OBSERVACION As Global.System.Data.DataColumn
        
        Private columnFITRES_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnFITRES_FMUESTREO As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FITORESISTENCIA_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITRES_NUMPRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITRES_NUMPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITRES_NUMCONCENTRACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITRES_NUMCONCENTRACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITRES_MICROORGANISMOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITRES_MICROORGANISMOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITRES_OBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITRES_OBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITRES_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITRES_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITRES_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITRES_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FITORESISTENCIA_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_FITORESISTENCIA_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_FITORESISTENCIA_ANTECEDENTESRowChanging As OT_FITORESISTENCIA_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITORESISTENCIA_ANTECEDENTESRowChanged As OT_FITORESISTENCIA_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITORESISTENCIA_ANTECEDENTESRowDeleting As OT_FITORESISTENCIA_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITORESISTENCIA_ANTECEDENTESRowDeleted As OT_FITORESISTENCIA_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FITORESISTENCIA_ANTECEDENTESRow(ByVal row As OT_FITORESISTENCIA_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FITORESISTENCIA_ANTECEDENTESRow(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer, ByVal FITRES_NUMPRODUCTO As Integer, ByVal FITRES_NUMCONCENTRACIONES As Integer, ByVal FITRES_MICROORGANISMOS As Integer, ByVal FITRES_OBSERVACION As String, ByVal FITRES_MUESTREADOR As String, ByVal FITRES_FMUESTREO As Date, ByVal NLAB_ESTADO As String) As OT_FITORESISTENCIA_ANTECEDENTESRow
            Dim rowOT_FITORESISTENCIA_ANTECEDENTESRow As OT_FITORESISTENCIA_ANTECEDENTESRow = CType(Me.NewRow,OT_FITORESISTENCIA_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, FITRES_NUMPRODUCTO, FITRES_NUMCONCENTRACIONES, FITRES_MICROORGANISMOS, FITRES_OBSERVACION, FITRES_MUESTREADOR, FITRES_FMUESTREO, NLAB_ESTADO}
            rowOT_FITORESISTENCIA_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FITORESISTENCIA_ANTECEDENTESRow)
            Return rowOT_FITORESISTENCIA_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FITORESISTENCIA_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FITORESISTENCIA_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FITORESISTENCIA_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_FITORESISTENCIA_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FITORESISTENCIA_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnFITRES_NUMPRODUCTO = MyBase.Columns("FITRES_NUMPRODUCTO")
            Me.columnFITRES_NUMCONCENTRACIONES = MyBase.Columns("FITRES_NUMCONCENTRACIONES")
            Me.columnFITRES_MICROORGANISMOS = MyBase.Columns("FITRES_MICROORGANISMOS")
            Me.columnFITRES_OBSERVACION = MyBase.Columns("FITRES_OBSERVACION")
            Me.columnFITRES_MUESTREADOR = MyBase.Columns("FITRES_MUESTREADOR")
            Me.columnFITRES_FMUESTREO = MyBase.Columns("FITRES_FMUESTREO")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnFITRES_NUMPRODUCTO = New Global.System.Data.DataColumn("FITRES_NUMPRODUCTO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITRES_NUMPRODUCTO)
            Me.columnFITRES_NUMCONCENTRACIONES = New Global.System.Data.DataColumn("FITRES_NUMCONCENTRACIONES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITRES_NUMCONCENTRACIONES)
            Me.columnFITRES_MICROORGANISMOS = New Global.System.Data.DataColumn("FITRES_MICROORGANISMOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITRES_MICROORGANISMOS)
            Me.columnFITRES_OBSERVACION = New Global.System.Data.DataColumn("FITRES_OBSERVACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITRES_OBSERVACION)
            Me.columnFITRES_MUESTREADOR = New Global.System.Data.DataColumn("FITRES_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITRES_MUESTREADOR)
            Me.columnFITRES_FMUESTREO = New Global.System.Data.DataColumn("FITRES_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITRES_FMUESTREO)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey38", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FITORESISTENCIA_ANTECEDENTESRow() As OT_FITORESISTENCIA_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_FITORESISTENCIA_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FITORESISTENCIA_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FITORESISTENCIA_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FITORESISTENCIA_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FITORESISTENCIA_ANTECEDENTESRowChanged(Me, New OT_FITORESISTENCIA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITORESISTENCIA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FITORESISTENCIA_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FITORESISTENCIA_ANTECEDENTESRowChanging(Me, New OT_FITORESISTENCIA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITORESISTENCIA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FITORESISTENCIA_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FITORESISTENCIA_ANTECEDENTESRowDeleted(Me, New OT_FITORESISTENCIA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITORESISTENCIA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FITORESISTENCIA_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FITORESISTENCIA_ANTECEDENTESRowDeleting(Me, New OT_FITORESISTENCIA_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITORESISTENCIA_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FITORESISTENCIA_ANTECEDENTESRow(ByVal row As OT_FITORESISTENCIA_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FITORESISTENCIA_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OT_FITOMONITOREO_ANTECEDENTESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOT_NUMERO As Global.System.Data.DataColumn
        
        Private columnOT_NLAB As Global.System.Data.DataColumn
        
        Private columnFITMON_NUMLINEAS As Global.System.Data.DataColumn
        
        Private columnFITMON_NUMCAMARAS As Global.System.Data.DataColumn
        
        Private columnFITMON_IDENTIFICACION1 As Global.System.Data.DataColumn
        
        Private columnFITMON_IDENTIFICACION2 As Global.System.Data.DataColumn
        
        Private columnFITMON_OBSERVACION As Global.System.Data.DataColumn
        
        Private columnNLAB_ESTADO As Global.System.Data.DataColumn
        
        Private columnFITMON_MUESTREADOR As Global.System.Data.DataColumn
        
        Private columnFITMON_FMUESTREO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OT_FITOMONITOREO_ANTECEDENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NUMEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NUMERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OT_NLABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT_NLAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITMON_NUMLINEASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITMON_NUMLINEAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITMON_NUMCAMARASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITMON_NUMCAMARAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITMON_IDENTIFICACION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITMON_IDENTIFICACION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITMON_IDENTIFICACION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITMON_IDENTIFICACION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITMON_OBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITMON_OBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NLAB_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLAB_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITMON_MUESTREADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITMON_MUESTREADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITMON_FMUESTREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITMON_FMUESTREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OT_FITOMONITOREO_ANTECEDENTESRow
            Get
                Return CType(Me.Rows(index),OT_FITOMONITOREO_ANTECEDENTESRow)
            End Get
        End Property
        
        Public Event OT_FITOMONITOREO_ANTECEDENTESRowChanging As OT_FITOMONITOREO_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOMONITOREO_ANTECEDENTESRowChanged As OT_FITOMONITOREO_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOMONITOREO_ANTECEDENTESRowDeleting As OT_FITOMONITOREO_ANTECEDENTESRowChangeEventHandler
        
        Public Event OT_FITOMONITOREO_ANTECEDENTESRowDeleted As OT_FITOMONITOREO_ANTECEDENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOT_FITOMONITOREO_ANTECEDENTESRow(ByVal row As OT_FITOMONITOREO_ANTECEDENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOT_FITOMONITOREO_ANTECEDENTESRow(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer, ByVal FITMON_NUMLINEAS As Integer, ByVal FITMON_NUMCAMARAS As Integer, ByVal FITMON_IDENTIFICACION1 As String, ByVal FITMON_IDENTIFICACION2 As String, ByVal FITMON_OBSERVACION As String, ByVal NLAB_ESTADO As String, ByVal FITMON_MUESTREADOR As String, ByVal FITMON_FMUESTREO As Date) As OT_FITOMONITOREO_ANTECEDENTESRow
            Dim rowOT_FITOMONITOREO_ANTECEDENTESRow As OT_FITOMONITOREO_ANTECEDENTESRow = CType(Me.NewRow,OT_FITOMONITOREO_ANTECEDENTESRow)
            Dim columnValuesArray() As Object = New Object() {OT_NUMERO, OT_NLAB, FITMON_NUMLINEAS, FITMON_NUMCAMARAS, FITMON_IDENTIFICACION1, FITMON_IDENTIFICACION2, FITMON_OBSERVACION, NLAB_ESTADO, FITMON_MUESTREADOR, FITMON_FMUESTREO}
            rowOT_FITOMONITOREO_ANTECEDENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOT_FITOMONITOREO_ANTECEDENTESRow)
            Return rowOT_FITOMONITOREO_ANTECEDENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOT_NUMEROOT_NLAB(ByVal OT_NUMERO As Integer, ByVal OT_NLAB As Integer) As OT_FITOMONITOREO_ANTECEDENTESRow
            Return CType(Me.Rows.Find(New Object() {OT_NUMERO, OT_NLAB}),OT_FITOMONITOREO_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OT_FITOMONITOREO_ANTECEDENTESDataTable = CType(MyBase.Clone,OT_FITOMONITOREO_ANTECEDENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OT_FITOMONITOREO_ANTECEDENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOT_NUMERO = MyBase.Columns("OT_NUMERO")
            Me.columnOT_NLAB = MyBase.Columns("OT_NLAB")
            Me.columnFITMON_NUMLINEAS = MyBase.Columns("FITMON_NUMLINEAS")
            Me.columnFITMON_NUMCAMARAS = MyBase.Columns("FITMON_NUMCAMARAS")
            Me.columnFITMON_IDENTIFICACION1 = MyBase.Columns("FITMON_IDENTIFICACION1")
            Me.columnFITMON_IDENTIFICACION2 = MyBase.Columns("FITMON_IDENTIFICACION2")
            Me.columnFITMON_OBSERVACION = MyBase.Columns("FITMON_OBSERVACION")
            Me.columnNLAB_ESTADO = MyBase.Columns("NLAB_ESTADO")
            Me.columnFITMON_MUESTREADOR = MyBase.Columns("FITMON_MUESTREADOR")
            Me.columnFITMON_FMUESTREO = MyBase.Columns("FITMON_FMUESTREO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOT_NUMERO = New Global.System.Data.DataColumn("OT_NUMERO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NUMERO)
            Me.columnOT_NLAB = New Global.System.Data.DataColumn("OT_NLAB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT_NLAB)
            Me.columnFITMON_NUMLINEAS = New Global.System.Data.DataColumn("FITMON_NUMLINEAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITMON_NUMLINEAS)
            Me.columnFITMON_NUMCAMARAS = New Global.System.Data.DataColumn("FITMON_NUMCAMARAS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITMON_NUMCAMARAS)
            Me.columnFITMON_IDENTIFICACION1 = New Global.System.Data.DataColumn("FITMON_IDENTIFICACION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITMON_IDENTIFICACION1)
            Me.columnFITMON_IDENTIFICACION2 = New Global.System.Data.DataColumn("FITMON_IDENTIFICACION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITMON_IDENTIFICACION2)
            Me.columnFITMON_OBSERVACION = New Global.System.Data.DataColumn("FITMON_OBSERVACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITMON_OBSERVACION)
            Me.columnNLAB_ESTADO = New Global.System.Data.DataColumn("NLAB_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLAB_ESTADO)
            Me.columnFITMON_MUESTREADOR = New Global.System.Data.DataColumn("FITMON_MUESTREADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITMON_MUESTREADOR)
            Me.columnFITMON_FMUESTREO = New Global.System.Data.DataColumn("FITMON_FMUESTREO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITMON_FMUESTREO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Cjto_OrdenKey39", New Global.System.Data.DataColumn() {Me.columnOT_NUMERO, Me.columnOT_NLAB}, true))
            Me.columnOT_NUMERO.AllowDBNull = false
            Me.columnOT_NLAB.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOT_FITOMONITOREO_ANTECEDENTESRow() As OT_FITOMONITOREO_ANTECEDENTESRow
            Return CType(Me.NewRow,OT_FITOMONITOREO_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OT_FITOMONITOREO_ANTECEDENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OT_FITOMONITOREO_ANTECEDENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OT_FITOMONITOREO_ANTECEDENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent OT_FITOMONITOREO_ANTECEDENTESRowChanged(Me, New OT_FITOMONITOREO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOMONITOREO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OT_FITOMONITOREO_ANTECEDENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent OT_FITOMONITOREO_ANTECEDENTESRowChanging(Me, New OT_FITOMONITOREO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOMONITOREO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OT_FITOMONITOREO_ANTECEDENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OT_FITOMONITOREO_ANTECEDENTESRowDeleted(Me, New OT_FITOMONITOREO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOMONITOREO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OT_FITOMONITOREO_ANTECEDENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OT_FITOMONITOREO_ANTECEDENTESRowDeleting(Me, New OT_FITOMONITOREO_ANTECEDENTESRowChangeEvent(CType(e.Row,OT_FITOMONITOREO_ANTECEDENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOT_FITOMONITOREO_ANTECEDENTESRow(ByVal row As OT_FITOMONITOREO_ANTECEDENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Cjto_Orden = New Cjto_Orden
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OT_FITOMONITOREO_ANTECEDENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FERT_APLICADARow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FERT_APLICADA As OT_FERT_APLICADADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FERT_APLICADA = CType(Me.Table,OT_FERT_APLICADADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FERT_APLICADA.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FERT_APLICADA.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_N() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_N' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_P2O5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_P2O5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_P2O5' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_P2O5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_K2O() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_K2OColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_K2O' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_K2OColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CAO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CAOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CAO' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CAOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_MGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_MGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_MGO' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_MGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_S() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_SColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_S' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_B() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_BColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_B' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTROS() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTROS' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTRO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTRO' de la tabla 'OT_FERT_APLICADA' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_UREA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_UREAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_UREA' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_UREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_NITAMOCA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOCAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_NITAMOCA' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_NITAMO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_NITAMO' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_NITPOT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITPOTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_NITPOT' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITPOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_NITNAK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_NITNAK' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_NITNA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_NITNA' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_SULAMO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_SULAMOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_SULAMO' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_SULAMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTROSN() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTROSN' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTRON() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTRON' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_FOSDIA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSDIAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_FOSDIA' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSDIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_FOSMON() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSMONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_FOSMON' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSMONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_SUPFOST() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_SUPFOST' de la tabla 'OT_FERT_APLICADA' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_SUPFOSN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSNColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_SUPFOSN' de la tabla 'OT_FERT_APLICADA' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_SUPFOSM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_SUPFOSM' de la tabla 'OT_FERT_APLICADA' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTROSP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTROSP' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTROP() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROPColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTROP' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CLK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CLKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CLK' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CLKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_NIK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NIKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_NIK' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NIKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_SUKMG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUKMGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_SUKMG' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUKMGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_SUK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_SUK' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_NITK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_NITK' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTROSK() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTROSK' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTROK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTROK' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_FOS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_FOS' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_FERTI() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_FERTIColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_FERTI' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_FERTIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_AZU() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_AZUColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_AZU' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_AZUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_AGRO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_AGROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_AGRO' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_AGROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTROA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTROA' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTROA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTROA' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_COMP() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_COMPColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_COMP' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_GUA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_GUAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_GUA' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_GUAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTROO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTROO' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTROO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTROO' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CAL' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_BOR() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_BORColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_BOR' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_BORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTRO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTRO1' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTRO1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTRO1' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTRO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTRO2' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTRO2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTRO2' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTRO3() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTRO3' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTRO3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTRO3' de la tabla 'OT_FERT_APLICADA' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_OTROO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_OTROO2' de la tabla 'OT_FERT_APLICADA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTFAPL_CANOTROO2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROO2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTFAPL_CANOTROO2' de la tabla 'OT_FERT_APLICADA' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_P2O5Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_P2O5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_P2O5Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_P2O5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_K2ONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_K2OColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_K2ONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_K2OColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CAONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CAOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CAONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CAOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_MGONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_MGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_MGONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_MGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_SNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_SNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_BNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_BNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTROSNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTROSNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTRONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTRONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_UREANull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_UREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_UREANull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_UREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NITAMOCANull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOCAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NITAMOCANull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOCAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NITAMONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NITAMONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITAMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NITPOTNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NITPOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NITPOTNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITPOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NITNAKNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NITNAKNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NITNANull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NITNANull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_SULAMONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_SULAMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_SULAMONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_SULAMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTROSNNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTROSNNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTRONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTRONNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_FOSDIANull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_FOSDIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_FOSDIANull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSDIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_FOSMONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_FOSMONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_FOSMONNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSMONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_SUPFOSTNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_SUPFOSTNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_SUPFOSNNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_SUPFOSNNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_SUPFOSMNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_SUPFOSMNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUPFOSMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTROSPNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTROSPNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTROPNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTROPNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CLKNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CLKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CLKNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CLKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NIKNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NIKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NIKNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NIKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_SUKMGNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_SUKMGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_SUKMGNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUKMGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_SUKNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_SUKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_SUKNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_SUKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_NITKNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_NITKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_NITKNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_NITKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTROSKNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTROSKNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROSKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTROKNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTROKNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_FOSNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_FOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_FOSNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_FOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_FERTINull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_FERTIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_FERTINull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_FERTIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_AZUNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_AZUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_AZUNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_AZUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_AGRONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_AGROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_AGRONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_AGROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTROANull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTROAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTROANull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTROANull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTROANull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_COMPNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_COMPNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_GUANull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_GUAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_GUANull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_GUAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTROONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTROOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTROONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTROONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTROONull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CALNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CALNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_BORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_BORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_BORNull()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_BORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTRO1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTRO1Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTRO1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTRO1Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTRO2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTRO2Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTRO2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTRO2Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTRO3Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTRO3Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTRO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTRO3Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTRO3Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTRO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_OTROO2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_OTROO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_OTROO2Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_OTROO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTFAPL_CANOTROO2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTFAPL_CANOTROO2Null()
            Me(Me.tableOT_FERT_APLICADA.OTFAPL_CANOTROO2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_RECOMENDACIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_RECOMENDACION As OT_RECOMENDACIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_RECOMENDACION = CType(Me.Table,OT_RECOMENDACIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_RECOMENDACION.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_RECOMENDACION.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_RTO_ANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_RTO_ANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_RTO_ANT' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_RTO_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_RTTON() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_RTTONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_RTTON' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_RTTONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_CARGA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_CARGAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_CARGA' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_CARGAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_CATON() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_CATONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_CATON' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_CATONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_VIGOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_VIGORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_VIGOR' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_VIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_DENSIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_DENSIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_DENSIDAD' de la tabla 'OT_RECOMENDACION' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_DENSIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_DISTANCIA1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_DISTANCIA1' de la tabla 'OT_RECOMENDACION' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_DISTANCIA2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_DISTANCIA2' de la tabla 'OT_RECOMENDACION' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_PLANTASH() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_PLANTASHColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_PLANTASH' de la tabla 'OT_RECOMENDACION' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_PLANTASHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_CALIBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_CALIBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_CALIBRE' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_CALIBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_FAL_FIR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_FAL_FIRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_FAL_FIR' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_FAL_FIRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_GRA_BRIX() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_GRA_BRIXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_GRA_BRIX' de la tabla 'OT_RECOMENDACION' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_GRA_BRIXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_FAL_COL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_FAL_COLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_FAL_COL' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_FAL_COLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_NEG_VID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_NEG_VIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_NEG_VID' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_NEG_VIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_BAY_VID() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_BAY_VIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_BAY_VID' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_BAY_VIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_PAR_FRU() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_PAR_FRUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_PAR_FRU' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_PAR_FRUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_DESHIDRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_DESHIDRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_DESHIDRA' de la tabla 'OT_RECOMENDACION' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_DESHIDRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_PRO_POST() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_PRO_POSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_PRO_POST' de la tabla 'OT_RECOMENDACION' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_PRO_POSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_OTRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_OTROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_OTRO' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_OTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_TEXTURA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_TEXTURAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_TEXTURA' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_TEXTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_PROFUNDIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_PROFUNDIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_PROFUNDIDAD' de la tabla 'OT_RECOMENDACION' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_PROFUNDIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_SIS_RIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_SIS_RIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_SIS_RIE' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_SIS_RIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_DRENAJE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_DRENAJEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_DRENAJE' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_DRENAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_COMENTARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_COMENTARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_COMENTARIO' de la tabla 'OT_RECOMENDACION' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_COMENTARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_RTO_UNI() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_RTO_UNIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_RTO_UNI' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_RTO_UNIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTREC_CAR_UNI() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_RECOMENDACION.OTREC_CAR_UNIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTREC_CAR_UNI' de la tabla 'OT_RECOMENDACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_RECOMENDACION.OTREC_CAR_UNIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_RTO_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_RTO_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_RTO_ANTNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_RTO_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_RTTONNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_RTTONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_RTTONNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_RTTONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_CARGANull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_CARGAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_CARGANull()
            Me(Me.tableOT_RECOMENDACION.OTREC_CARGAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_CATONNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_CATONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_CATONNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_CATONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_VIGORNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_VIGORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_VIGORNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_VIGORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_DENSIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_DENSIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_DENSIDADNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_DENSIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_DISTANCIA1Null() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_DISTANCIA1Null()
            Me(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_DISTANCIA2Null() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_DISTANCIA2Null()
            Me(Me.tableOT_RECOMENDACION.OTREC_DISTANCIA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_PLANTASHNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_PLANTASHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_PLANTASHNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_PLANTASHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_CALIBRENull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_CALIBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_CALIBRENull()
            Me(Me.tableOT_RECOMENDACION.OTREC_CALIBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_FAL_FIRNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_FAL_FIRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_FAL_FIRNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_FAL_FIRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_GRA_BRIXNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_GRA_BRIXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_GRA_BRIXNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_GRA_BRIXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_FAL_COLNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_FAL_COLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_FAL_COLNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_FAL_COLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_NEG_VIDNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_NEG_VIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_NEG_VIDNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_NEG_VIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_BAY_VIDNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_BAY_VIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_BAY_VIDNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_BAY_VIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_PAR_FRUNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_PAR_FRUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_PAR_FRUNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_PAR_FRUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_DESHIDRANull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_DESHIDRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_DESHIDRANull()
            Me(Me.tableOT_RECOMENDACION.OTREC_DESHIDRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_PRO_POSTNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_PRO_POSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_PRO_POSTNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_PRO_POSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_OTRONull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_OTROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_OTRONull()
            Me(Me.tableOT_RECOMENDACION.OTREC_OTROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_TEXTURANull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_TEXTURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_TEXTURANull()
            Me(Me.tableOT_RECOMENDACION.OTREC_TEXTURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_PROFUNDIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_PROFUNDIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_PROFUNDIDADNull()
            Me(Me.tableOT_RECOMENDACION.OTREC_PROFUNDIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_SIS_RIENull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_SIS_RIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_SIS_RIENull()
            Me(Me.tableOT_RECOMENDACION.OTREC_SIS_RIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_DRENAJENull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_DRENAJEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_DRENAJENull()
            Me(Me.tableOT_RECOMENDACION.OTREC_DRENAJEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_COMENTARIONull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_COMENTARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_COMENTARIONull()
            Me(Me.tableOT_RECOMENDACION.OTREC_COMENTARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_RTO_UNINull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_RTO_UNIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_RTO_UNINull()
            Me(Me.tableOT_RECOMENDACION.OTREC_RTO_UNIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTREC_CAR_UNINull() As Boolean
            Return Me.IsNull(Me.tableOT_RECOMENDACION.OTREC_CAR_UNIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTREC_CAR_UNINull()
            Me(Me.tableOT_RECOMENDACION.OTREC_CAR_UNIColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FERTORG_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FERTORG_ANTECEDENTES As OT_FERTORG_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FERTORG_ANTECEDENTES = CType(Me.Table,OT_FERTORG_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_MUESTREADOR' de la tabla 'OT_FERTORG_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_FECHAMU() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_FECHAMUColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_FECHAMU' de la tabla 'OT_FERTORG_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_FECHAMUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_PREDIO' de la tabla 'OT_FERTORG_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_LOCALIDAD' de la tabla 'OT_FERTORG_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_IDENTIFICACION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_IDENTIFICACION1' de la tabla 'OT_FERTORG_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_IDENTIFICACION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_IDENTIFICACION2' de la tabla 'OT_FERTORG_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_TIPOFERTI() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_TIPOFERTIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_TIPOFERTI' de la tabla 'OT_FERTORG_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_TIPOFERTIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEOANT_OBSERVACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_OBSERVACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEOANT_OBSERVACION' de la tabla 'OT_FERTORG_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_OBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_MUESTREADORNull()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_FECHAMUNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_FECHAMUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_FECHAMUNull()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_FECHAMUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_PREDIONull()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_LOCALIDADNull()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_IDENTIFICACION1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_IDENTIFICACION1Null()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_IDENTIFICACION2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_IDENTIFICACION2Null()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_IDENTIFICACION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_TIPOFERTINull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_TIPOFERTIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_TIPOFERTINull()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_TIPOFERTIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEOANT_OBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_OBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEOANT_OBSERVACIONNull()
            Me(Me.tableOT_FERTORG_ANTECEDENTES.FEOANT_OBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FERTQUI_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FERTQUI_ANTECEDENTES As OT_FERTQUI_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FERTQUI_ANTECEDENTES = CType(Me.Table,OT_FERTQUI_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_MUESTREADOR' de la tabla 'OT_FERTQUI_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_FECHAMU() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_FECHAMUColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_FECHAMU' de la tabla 'OT_FERTQUI_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_FECHAMUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_PREDIO' de la tabla 'OT_FERTQUI_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_LOCALIDAD' de la tabla 'OT_FERTQUI_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_IDENTIFICACION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_IDENTIFICACION1' de la tabla 'OT_FERTQUI_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_IDENTIFICACION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_IDENTIFICACION2' de la tabla 'OT_FERTQUI_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_TIPOFERTI() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_TIPOFERTIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_TIPOFERTI' de la tabla 'OT_FERTQUI_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_TIPOFERTIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEQANT_OBSERVACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_OBSERVACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEQANT_OBSERVACION' de la tabla 'OT_FERTQUI_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_OBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_MUESTREADORNull()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_FECHAMUNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_FECHAMUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_FECHAMUNull()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_FECHAMUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_PREDIONull()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_LOCALIDADNull()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_IDENTIFICACION1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_IDENTIFICACION1Null()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_IDENTIFICACION2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_IDENTIFICACION2Null()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_IDENTIFICACION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_TIPOFERTINull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_TIPOFERTIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_TIPOFERTINull()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_TIPOFERTIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEQANT_OBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_OBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEQANT_OBSERVACIONNull()
            Me(Me.tableOT_FERTQUI_ANTECEDENTES.FEQANT_OBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_YEMAS_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_YEMAS_ANTECEDENTES As OT_YEMAS_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_YEMAS_ANTECEDENTES = CType(Me.Table,OT_YEMAS_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_PREDIO' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_LOCALIDAD' de la tabla 'OT_YEMAS_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESPECIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.ESPECIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESPECIE' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VARIEDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.VARIEDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VARIEDAD' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.VARIEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.TEJIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJIDO' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.TEJIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_EDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_EDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_EDAD' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_EDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_CUARTEL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_CUARTEL1' de la tabla 'OT_YEMAS_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_CUARTEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_CUARTEL2' de la tabla 'OT_YEMAS_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_RTO_ANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_RTO_ANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_RTO_ANT' de la tabla 'OT_YEMAS_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_RTO_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_CARGA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_CARGA' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_VIGOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_VIGORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_VIGOR' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_VIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_DENSIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_DENSIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_DENSIDAD' de la tabla 'OT_YEMAS_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_DENSIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_APARIENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_APARIENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_APARIENCIA' de la tabla 'OT_YEMAS_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_APARIENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_CARGADORES() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGADORESColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_CARGADORES' de la tabla 'OT_YEMAS_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGADORESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_YEMAS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_YEMASColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_YEMAS' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_YEMASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_OBSERVACIONES' de la tabla 'OT_YEMAS_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_MUESTREADOR' de la tabla 'OT_YEMAS_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMANT_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMANT_FMUESTREO' de la tabla 'OT_YEMAS_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_YEMAS_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_YEMAS_ANTECEDENTES' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_YEMAS_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_PREDIONull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_LOCALIDADNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESPECIENull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.ESPECIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESPECIENull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.ESPECIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVARIEDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.VARIEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVARIEDADNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.VARIEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJIDONull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.TEJIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJIDONull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.TEJIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_EDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_EDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_EDADNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_EDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_CUARTEL1Null() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_CUARTEL1Null()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_CUARTEL2Null() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_CUARTEL2Null()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CUARTEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_RTO_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_RTO_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_RTO_ANTNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_RTO_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_CARGANull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_CARGANull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_VIGORNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_VIGORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_VIGORNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_VIGORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_DENSIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_DENSIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_DENSIDADNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_DENSIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_APARIENCIANull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_APARIENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_APARIENCIANull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_APARIENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_CARGADORESNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGADORESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_CARGADORESNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_CARGADORESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_YEMASNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_YEMASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_YEMASNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_YEMASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_OBSERVACIONESNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_MUESTREADORNull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMANT_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMANT_FMUESTREONull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.YEMANT_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_YEMAS_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_YEMAS_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FITOPATOLOGICOS_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FITOPATOLOGICOS_ANTECEDENTES As OT_FITOPATOLOGICOS_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES = CType(Me.Table,OT_FITOPATOLOGICOS_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_PREDIO' de la tabla 'OT_FITOPATOLOGICOS_ANTECEDENT"& _ 
                            "ES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_LOCALIDAD' de la tabla 'OT_FITOPATOLOGICOS_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_TMUESTRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TMUESTRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_TMUESTRA' de la tabla 'OT_FITOPATOLOGICOS_ANTECEDE"& _ 
                            "NTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TMUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_TEJIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TEJIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_TEJIDO' de la tabla 'OT_FITOPATOLOGICOS_ANTECEDENT"& _ 
                            "ES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TEJIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_ESPECIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_ESPECIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_ESPECIE' de la tabla 'OT_FITOPATOLOGICOS_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_VARIEDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_VARIEDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_VARIEDAD' de la tabla 'OT_FITOPATOLOGICOS_ANTECEDE"& _ 
                            "NTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_VARIEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_EDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_EDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_EDAD' de la tabla 'OT_FITOPATOLOGICOS_ANTECEDENTES"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_EDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_IDENTIFICACION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_IDENTIFICACION1' de la tabla 'OT_FITOPATOLOGICOS_A"& _ 
                            "NTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_IDENTIFICACION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_IDENTIFICACION2' de la tabla 'OT_FITOPATOLOGICOS_A"& _ 
                            "NTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_OBSERVACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_OBSERVACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_OBSERVACION' de la tabla 'OT_FITOPATOLOGICOS_ANTEC"& _ 
                            "EDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_OBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_MUESTREADOR' de la tabla 'OT_FITOPATOLOGICOS_ANTEC"& _ 
                            "EDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_FMUESTREO' de la tabla 'OT_FITOPATOLOGICOS_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_HMUESTREO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_HMUESTREOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_HMUESTREO' de la tabla 'OT_FITOPATOLOGICOS_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_HMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITANT_SISTOMATOLOGIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_SISTOMATOLOGIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITANT_SISTOMATOLOGIA' de la tabla 'OT_FITOPATOLOGICOS_AN"& _ 
                            "TECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_SISTOMATOLOGIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_FITOPATOLOGICOS_ANTECEDENTES"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_PREDIONull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_LOCALIDADNull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_TMUESTRANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TMUESTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_TMUESTRANull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TMUESTRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_TEJIDONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TEJIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_TEJIDONull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_TEJIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_ESPECIENull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_ESPECIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_ESPECIENull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_ESPECIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_VARIEDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_VARIEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_VARIEDADNull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_VARIEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_EDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_EDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_EDADNull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_EDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_IDENTIFICACION1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_IDENTIFICACION1Null()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_IDENTIFICACION2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_IDENTIFICACION2Null()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_IDENTIFICACION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_OBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_OBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_OBSERVACIONNull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_OBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_MUESTREADORNull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_FMUESTREONull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_HMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_HMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_HMUESTREONull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_HMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITANT_SISTOMATOLOGIANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_SISTOMATOLOGIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITANT_SISTOMATOLOGIANull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.FITANT_SISTOMATOLOGIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_FITOPATOLOGICOS_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMP_RECIBORow
        Inherits Global.System.Data.DataRow
        
        Private tableIMP_RECIBO As IMP_RECIBODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMP_RECIBO = CType(Me.Table,IMP_RECIBODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMLINEA() As Integer
            Get
                Return CType(Me(Me.tableIMP_RECIBO.NUMLINEAColumn),Integer)
            End Get
            Set
                Me(Me.tableIMP_RECIBO.NUMLINEAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMP_RECIBO.CANTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD' de la tabla 'IMP_RECIBO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMP_RECIBO.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMP_RECIBO.CODIGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO' de la tabla 'IMP_RECIBO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMP_RECIBO.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMP_RECIBO.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION' de la tabla 'IMP_RECIBO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMP_RECIBO.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNITARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMP_RECIBO.UNITARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNITARIO' de la tabla 'IMP_RECIBO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMP_RECIBO.UNITARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUBTOTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMP_RECIBO.SUBTOTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUBTOTAL' de la tabla 'IMP_RECIBO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMP_RECIBO.SUBTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MARCA() As String
            Get
                Try 
                    Return CType(Me(Me.tableIMP_RECIBO.MARCAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MARCA' de la tabla 'IMP_RECIBO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMP_RECIBO.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableIMP_RECIBO.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tableIMP_RECIBO.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGONull() As Boolean
            Return Me.IsNull(Me.tableIMP_RECIBO.CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGONull()
            Me(Me.tableIMP_RECIBO.CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableIMP_RECIBO.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableIMP_RECIBO.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNITARIONull() As Boolean
            Return Me.IsNull(Me.tableIMP_RECIBO.UNITARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNITARIONull()
            Me(Me.tableIMP_RECIBO.UNITARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUBTOTALNull() As Boolean
            Return Me.IsNull(Me.tableIMP_RECIBO.SUBTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUBTOTALNull()
            Me(Me.tableIMP_RECIBO.SUBTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMARCANull() As Boolean
            Return Me.IsNull(Me.tableIMP_RECIBO.MARCAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMARCANull()
            Me(Me.tableIMP_RECIBO.MARCAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NOTA_YEMASRow
        Inherits Global.System.Data.DataRow
        
        Private tableNOTA_YEMAS As NOTA_YEMASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNOTA_YEMAS = CType(Me.Table,NOTA_YEMASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIV_NYEM() As Integer
            Get
                Return CType(Me(Me.tableNOTA_YEMAS.NIV_NYEMColumn),Integer)
            End Get
            Set
                Me(Me.tableNOTA_YEMAS.NIV_NYEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_NYEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_YEMAS.COD_NYEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_NYEM' de la tabla 'NOTA_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_YEMAS.COD_NYEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DES_NYEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_YEMAS.DES_NYEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DES_NYEM' de la tabla 'NOTA_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_YEMAS.DES_NYEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_NYEMNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_YEMAS.COD_NYEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_NYEMNull()
            Me(Me.tableNOTA_YEMAS.COD_NYEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDES_NYEMNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_YEMAS.DES_NYEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDES_NYEMNull()
            Me(Me.tableNOTA_YEMAS.DES_NYEMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NOTA_YEMA_NLABRow
        Inherits Global.System.Data.DataRow
        
        Private tableNOTA_YEMA_NLAB As NOTA_YEMA_NLABDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNOTA_YEMA_NLAB = CType(Me.Table,NOTA_YEMA_NLABDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableNOTA_YEMA_NLAB.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableNOTA_YEMA_NLAB.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableNOTA_YEMA_NLAB.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableNOTA_YEMA_NLAB.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DES1_NYEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_YEMA_NLAB.DES1_NYEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DES1_NYEM' de la tabla 'NOTA_YEMA_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_YEMA_NLAB.DES1_NYEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DES2_NYEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableNOTA_YEMA_NLAB.DES2_NYEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DES2_NYEM' de la tabla 'NOTA_YEMA_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNOTA_YEMA_NLAB.DES2_NYEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDES1_NYEMNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_YEMA_NLAB.DES1_NYEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDES1_NYEMNull()
            Me(Me.tableNOTA_YEMA_NLAB.DES1_NYEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDES2_NYEMNull() As Boolean
            Return Me.IsNull(Me.tableNOTA_YEMA_NLAB.DES2_NYEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDES2_NYEMNull()
            Me(Me.tableNOTA_YEMA_NLAB.DES2_NYEMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CONSULTA_ANALISISRow
        Inherits Global.System.Data.DataRow
        
        Private tableCONSULTA_ANALISIS As CONSULTA_ANALISISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCONSULTA_ANALISIS = CType(Me.Table,CONSULTA_ANALISISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableCONSULTA_ANALISIS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.TMU_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMU_CODIGO' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.SUB_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUB_CODIGO' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.SUB_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NETO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.ANA_NETOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NETO' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.ANA_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_NIVEL_PRECIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.ANA_NIVEL_PRECIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_NIVEL_PRECIO' de la tabla 'CONSULTA_ANALISIS' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.ANA_NIVEL_PRECIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.CLIENTE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE1' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.CLIENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.CLIENTE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE2' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.CLIENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.CLIENTE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTE3' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.CLIENTE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTET() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.CLIENTETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIENTET' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.CLIENTETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONSULTA_ANALISIS.TIPO_CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_COD' de la tabla 'CONSULTA_ANALISIS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONSULTA_ANALISIS.TIPO_CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableCONSULTA_ANALISIS.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMU_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.TMU_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMU_CODIGONull()
            Me(Me.tableCONSULTA_ANALISIS.TMU_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.SUB_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_CODIGONull()
            Me(Me.tableCONSULTA_ANALISIS.SUB_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NETONull() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.ANA_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NETONull()
            Me(Me.tableCONSULTA_ANALISIS.ANA_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_NIVEL_PRECIONull() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.ANA_NIVEL_PRECIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_NIVEL_PRECIONull()
            Me(Me.tableCONSULTA_ANALISIS.ANA_NIVEL_PRECIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE1Null() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.CLIENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE1Null()
            Me(Me.tableCONSULTA_ANALISIS.CLIENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE2Null() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.CLIENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE2Null()
            Me(Me.tableCONSULTA_ANALISIS.CLIENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTE3Null() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.CLIENTE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTE3Null()
            Me(Me.tableCONSULTA_ANALISIS.CLIENTE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTETNull() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.CLIENTETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTETNull()
            Me(Me.tableCONSULTA_ANALISIS.CLIENTETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CODNull() As Boolean
            Return Me.IsNull(Me.tableCONSULTA_ANALISIS.TIPO_CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CODNull()
            Me(Me.tableCONSULTA_ANALISIS.TIPO_CODColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MYEMA3Row
        Inherits Global.System.Data.DataRow
        
        Private tableMYEMA3 As MYEMA3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMYEMA3 = CType(Me.Table,MYEMA3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IORD() As String
            Get
                Return CType(Me(Me.tableMYEMA3.IORDColumn),String)
            End Get
            Set
                Me(Me.tableMYEMA3.IORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INLA() As String
            Get
                Return CType(Me(Me.tableMYEMA3.INLAColumn),String)
            End Get
            Set
                Me(Me.tableMYEMA3.INLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILIN() As Double
            Get
                Return CType(Me(Me.tableMYEMA3.ILINColumn),Double)
            End Get
            Set
                Me(Me.tableMYEMA3.ILINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IFEIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEI' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IFEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IPROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRO' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IPROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEMP' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IREMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREM' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IREMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IPREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRE' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IPREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IESP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IESPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IESP' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IESPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IVARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVAR' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IVARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEM() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IFEMColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEM' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IFEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ILOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILOC' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ILOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREG() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IREGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREG' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IREGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICUA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ICUAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICUA' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ICUAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEDA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IEDAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEDA' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IUNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IUNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IUNO' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IUNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDOS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IDOSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDOS' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IDOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ITREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITRE' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ITREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICUAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ICUATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICUAT' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ICUATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ICINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICIN' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ICINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISEI() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ISEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ISEI' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ISEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ISIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ISIE' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ISIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOCH() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IOCHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IOCH' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IOCHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.INUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INUE' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.INUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IDIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDIE' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IDIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IONC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IONCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IONC' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IONCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IDOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDOC' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IDOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITRC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ITRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ITRC' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ITRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.ICATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICAT' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.ICATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IQUI() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IQUIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IQUI' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IQUIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDI6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IDI6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDI6' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IDI6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDI7() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IDI7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDI7' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IDI7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDI8() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IDI8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDI8' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IDI8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDI9() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IDI9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDI9' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IDI9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVE0() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IVE0Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVE0' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IVE0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IVE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVE1' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IVE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IVE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVE2' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IVE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IVE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVE3' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IVE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVE4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IVE4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVE4' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IVE4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NROYEM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.NROYEMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NROYEM' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.NROYEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOBSERVA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.NOBSERVAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOBSERVA' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.NOBSERVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NFRUTA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.NFRUTAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NFRUTA' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.NFRUTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PORCFRUTA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.PORCFRUTAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PORCFRUTA' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.PORCFRUTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PORCACUM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.PORCACUMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PORCACUM' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.PORCACUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VEGETA1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.VEGETA1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VEGETA1' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.VEGETA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VEGETA2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.VEGETA2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VEGETA2' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.VEGETA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRUSEC1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.FRUSEC1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FRUSEC1' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.FRUSEC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRUSEC2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.FRUSEC2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FRUSEC2' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.FRUSEC2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VEGSEC1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.VEGSEC1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VEGSEC1' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.VEGSEC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VEGSEC2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.VEGSEC2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VEGSEC2' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.VEGSEC2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUERTA1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.MUERTA1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUERTA1' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.MUERTA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUERTA2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.MUERTA2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUERTA2' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.MUERTA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUSENTE1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.AUSENTE1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AUSENTE1' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.AUSENTE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUSENTE2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.AUSENTE2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AUSENTE2' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.AUSENTE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOB1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IOB1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IOB1' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IOB1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOB2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA3.IOB2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IOB2' de la tabla 'MYEMA3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA3.IOB2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEINull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IFEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEINull()
            Me(Me.tableMYEMA3.IFEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRONull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IPROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRONull()
            Me(Me.tableMYEMA3.IPROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEMPNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEMPNull()
            Me(Me.tableMYEMA3.IEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREMNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IREMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREMNull()
            Me(Me.tableMYEMA3.IREMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRENull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IPREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRENull()
            Me(Me.tableMYEMA3.IPREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIESPNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IESPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIESPNull()
            Me(Me.tableMYEMA3.IESPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVARNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IVARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVARNull()
            Me(Me.tableMYEMA3.IVARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEMNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IFEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEMNull()
            Me(Me.tableMYEMA3.IFEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILOCNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ILOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILOCNull()
            Me(Me.tableMYEMA3.ILOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREGNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IREGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREGNull()
            Me(Me.tableMYEMA3.IREGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICUANull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ICUAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICUANull()
            Me(Me.tableMYEMA3.ICUAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEDANull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEDANull()
            Me(Me.tableMYEMA3.IEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIUNONull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IUNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIUNONull()
            Me(Me.tableMYEMA3.IUNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDOSNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IDOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDOSNull()
            Me(Me.tableMYEMA3.IDOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITRENull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ITREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITRENull()
            Me(Me.tableMYEMA3.ITREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICUATNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ICUATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICUATNull()
            Me(Me.tableMYEMA3.ICUATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICINNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ICINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICINNull()
            Me(Me.tableMYEMA3.ICINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsISEINull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ISEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetISEINull()
            Me(Me.tableMYEMA3.ISEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsISIENull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ISIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetISIENull()
            Me(Me.tableMYEMA3.ISIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOCHNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IOCHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOCHNull()
            Me(Me.tableMYEMA3.IOCHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINUENull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.INUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINUENull()
            Me(Me.tableMYEMA3.INUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDIENull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IDIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDIENull()
            Me(Me.tableMYEMA3.IDIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIONCNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IONCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIONCNull()
            Me(Me.tableMYEMA3.IONCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDOCNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IDOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDOCNull()
            Me(Me.tableMYEMA3.IDOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITRCNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ITRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITRCNull()
            Me(Me.tableMYEMA3.ITRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICATNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.ICATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICATNull()
            Me(Me.tableMYEMA3.ICATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIQUINull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IQUIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIQUINull()
            Me(Me.tableMYEMA3.IQUIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDI6Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IDI6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDI6Null()
            Me(Me.tableMYEMA3.IDI6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDI7Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IDI7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDI7Null()
            Me(Me.tableMYEMA3.IDI7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDI8Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IDI8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDI8Null()
            Me(Me.tableMYEMA3.IDI8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDI9Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IDI9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDI9Null()
            Me(Me.tableMYEMA3.IDI9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVE0Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IVE0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVE0Null()
            Me(Me.tableMYEMA3.IVE0Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVE1Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IVE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVE1Null()
            Me(Me.tableMYEMA3.IVE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVE2Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IVE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVE2Null()
            Me(Me.tableMYEMA3.IVE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVE3Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IVE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVE3Null()
            Me(Me.tableMYEMA3.IVE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVE4Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IVE4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVE4Null()
            Me(Me.tableMYEMA3.IVE4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNROYEMNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.NROYEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNROYEMNull()
            Me(Me.tableMYEMA3.NROYEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOBSERVANull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.NOBSERVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOBSERVANull()
            Me(Me.tableMYEMA3.NOBSERVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNFRUTANull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.NFRUTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNFRUTANull()
            Me(Me.tableMYEMA3.NFRUTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORCFRUTANull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.PORCFRUTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORCFRUTANull()
            Me(Me.tableMYEMA3.PORCFRUTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORCACUMNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.PORCACUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORCACUMNull()
            Me(Me.tableMYEMA3.PORCACUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVEGETA1Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.VEGETA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVEGETA1Null()
            Me(Me.tableMYEMA3.VEGETA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVEGETA2Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.VEGETA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVEGETA2Null()
            Me(Me.tableMYEMA3.VEGETA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRUSEC1Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.FRUSEC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRUSEC1Null()
            Me(Me.tableMYEMA3.FRUSEC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRUSEC2Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.FRUSEC2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRUSEC2Null()
            Me(Me.tableMYEMA3.FRUSEC2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVEGSEC1Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.VEGSEC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVEGSEC1Null()
            Me(Me.tableMYEMA3.VEGSEC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVEGSEC2Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.VEGSEC2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVEGSEC2Null()
            Me(Me.tableMYEMA3.VEGSEC2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUERTA1Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.MUERTA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUERTA1Null()
            Me(Me.tableMYEMA3.MUERTA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUERTA2Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.MUERTA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUERTA2Null()
            Me(Me.tableMYEMA3.MUERTA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUSENTE1Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.AUSENTE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUSENTE1Null()
            Me(Me.tableMYEMA3.AUSENTE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUSENTE2Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.AUSENTE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUSENTE2Null()
            Me(Me.tableMYEMA3.AUSENTE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOB1Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IOB1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOB1Null()
            Me(Me.tableMYEMA3.IOB1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOB2Null() As Boolean
            Return Me.IsNull(Me.tableMYEMA3.IOB2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOB2Null()
            Me(Me.tableMYEMA3.IOB2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DIG_YEMASRow
        Inherits Global.System.Data.DataRow
        
        Private tableDIG_YEMAS As DIG_YEMASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDIG_YEMAS = CType(Me.Table,DIG_YEMASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableDIG_YEMAS.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableDIG_YEMAS.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableDIG_YEMAS.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableDIG_YEMAS.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_YEMA() As Integer
            Get
                Return CType(Me(Me.tableDIG_YEMAS.YEM_YEMAColumn),Integer)
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_YEMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR1' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR2' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR3() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR3' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR4() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR4' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR5() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR5' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR6() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR6' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR7() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR7' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR8() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR8' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR9() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR9' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR10() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR10' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR11() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR11' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR12() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR12' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR13() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR13' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR14() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR14Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR14' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR15() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR15' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR16() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR16Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR16' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR16Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR17() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR17Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR17' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR17Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR18() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR18Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR18' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR18Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR19() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR19Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR19' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR19Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR20() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR20Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR20' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR21() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR21Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR21' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR21Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR22() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR22' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR23() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR23Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR23' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR23Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR24() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR24Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR24' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR24Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR25() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR25Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR25' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR25Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR26() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR26Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR26' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR26Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR27() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR27Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR27' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR27Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR28() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR28Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR28' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR28Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR29() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR29Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR29' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR29Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR30() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR30Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR30' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR30Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR31() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR31Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR31' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR31Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR32() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR32Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR32' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR32Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR33() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR33Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR33' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR33Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR34() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR34Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR34' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR34Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR35() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR35Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR35' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR35Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR36() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR36Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR36' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR36Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR37() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR37Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR37' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR37Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR38() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR38Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR38' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR38Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR39() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR39Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR39' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR39Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_CARGADOR40() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_CARGADOR40Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_CARGADOR40' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_CARGADOR40Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_OBSERVADAS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_OBSERVADASColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_OBSERVADAS' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_OBSERVADASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_FRUTALES() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_FRUTALESColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_FRUTALES' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_FRUTALESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_POROBSERVADAS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_POROBSERVADASColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_POROBSERVADAS' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_POROBSERVADASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEM_PORACUMULADA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDIG_YEMAS.YEM_PORACUMULADAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEM_PORACUMULADA' de la tabla 'DIG_YEMAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIG_YEMAS.YEM_PORACUMULADAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR1Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR1Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR2Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR2Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR3Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR3Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR4Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR4Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR5Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR5Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR6Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR6Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR7Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR7Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR8Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR8Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR9Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR9Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR10Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR10Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR11Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR11Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR12Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR12Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR13Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR13Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR14Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR14Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR15Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR15Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR16Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR16Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR16Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR16Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR17Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR17Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR17Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR17Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR18Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR18Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR18Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR18Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR19Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR19Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR19Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR19Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR20Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR20Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR21Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR21Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR21Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR21Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR22Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR22Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR23Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR23Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR23Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR23Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR24Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR24Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR24Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR24Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR25Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR25Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR25Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR25Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR26Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR26Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR26Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR26Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR27Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR27Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR27Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR27Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR28Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR28Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR28Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR28Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR29Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR29Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR29Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR29Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR30Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR30Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR30Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR30Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR31Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR31Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR31Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR31Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR32Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR32Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR32Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR32Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR33Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR33Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR33Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR33Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR34Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR34Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR34Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR34Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR35Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR35Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR35Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR35Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR36Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR36Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR36Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR36Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR37Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR37Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR37Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR37Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR38Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR38Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR38Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR38Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR39Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR39Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR39Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR39Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_CARGADOR40Null() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_CARGADOR40Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_CARGADOR40Null()
            Me(Me.tableDIG_YEMAS.YEM_CARGADOR40Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_OBSERVADASNull() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_OBSERVADASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_OBSERVADASNull()
            Me(Me.tableDIG_YEMAS.YEM_OBSERVADASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_FRUTALESNull() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_FRUTALESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_FRUTALESNull()
            Me(Me.tableDIG_YEMAS.YEM_FRUTALESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_POROBSERVADASNull() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_POROBSERVADASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_POROBSERVADASNull()
            Me(Me.tableDIG_YEMAS.YEM_POROBSERVADASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEM_PORACUMULADANull() As Boolean
            Return Me.IsNull(Me.tableDIG_YEMAS.YEM_PORACUMULADAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEM_PORACUMULADANull()
            Me(Me.tableDIG_YEMAS.YEM_PORACUMULADAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class YEMAS_NLABRow
        Inherits Global.System.Data.DataRow
        
        Private tableYEMAS_NLAB As YEMAS_NLABDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableYEMAS_NLAB = CType(Me.Table,YEMAS_NLABDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableYEMAS_NLAB.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableYEMAS_NLAB.OT_NLABColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ESTIMADOBRORow
        Inherits Global.System.Data.DataRow
        
        Private tableESTIMADOBRO As ESTIMADOBRODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableESTIMADOBRO = CType(Me.Table,ESTIMADOBRODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableESTIMADOBRO.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableESTIMADOBRO.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARGADOR_DESDE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableESTIMADOBRO.CARGADOR_DESDEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARGADOR_DESDE' de la tabla 'ESTIMADOBRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESTIMADOBRO.CARGADOR_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARGADOR_HASTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableESTIMADOBRO.CARGADOR_HASTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARGADOR_HASTA' de la tabla 'ESTIMADOBRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESTIMADOBRO.CARGADOR_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMA_DESDE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableESTIMADOBRO.YEMA_DESDEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMA_DESDE' de la tabla 'ESTIMADOBRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESTIMADOBRO.YEMA_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMA_HASTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableESTIMADOBRO.YEMA_HASTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMA_HASTA' de la tabla 'ESTIMADOBRO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESTIMADOBRO.YEMA_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCARGADOR_DESDENull() As Boolean
            Return Me.IsNull(Me.tableESTIMADOBRO.CARGADOR_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCARGADOR_DESDENull()
            Me(Me.tableESTIMADOBRO.CARGADOR_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCARGADOR_HASTANull() As Boolean
            Return Me.IsNull(Me.tableESTIMADOBRO.CARGADOR_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCARGADOR_HASTANull()
            Me(Me.tableESTIMADOBRO.CARGADOR_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMA_DESDENull() As Boolean
            Return Me.IsNull(Me.tableESTIMADOBRO.YEMA_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMA_DESDENull()
            Me(Me.tableESTIMADOBRO.YEMA_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMA_HASTANull() As Boolean
            Return Me.IsNull(Me.tableESTIMADOBRO.YEMA_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMA_HASTANull()
            Me(Me.tableESTIMADOBRO.YEMA_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LARGO_CARGADORRow
        Inherits Global.System.Data.DataRow
        
        Private tableLARGO_CARGADOR As LARGO_CARGADORDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLARGO_CARGADOR = CType(Me.Table,LARGO_CARGADORDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableLARGO_CARGADOR.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableLARGO_CARGADOR.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMA_DESDE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLARGO_CARGADOR.YEMA_DESDEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMA_DESDE' de la tabla 'LARGO_CARGADOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLARGO_CARGADOR.YEMA_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEMA_HASTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLARGO_CARGADOR.YEMA_HASTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YEMA_HASTA' de la tabla 'LARGO_CARGADOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLARGO_CARGADOR.YEMA_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMA_DESDENull() As Boolean
            Return Me.IsNull(Me.tableLARGO_CARGADOR.YEMA_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMA_DESDENull()
            Me(Me.tableLARGO_CARGADOR.YEMA_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEMA_HASTANull() As Boolean
            Return Me.IsNull(Me.tableLARGO_CARGADOR.YEMA_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEMA_HASTANull()
            Me(Me.tableLARGO_CARGADOR.YEMA_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS_ELEMENTOS_PASORow
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS_ELEMENTOS_PASO As ANALISIS_ELEMENTOS_PASODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS_ELEMENTOS_PASO = CType(Me.Table,ANALISIS_ELEMENTOS_PASODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS_PASO.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS_PASO.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS_PASO.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS_PASO.ELE_CODIGOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OTEST_NLABRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTEST_NLAB As OTEST_NLABDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTEST_NLAB = CType(Me.Table,OTEST_NLABDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOTEST_NLAB.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOTEST_NLAB.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableOTEST_NLAB.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableOTEST_NLAB.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOTEST_NLAB.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOTEST_NLAB.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_NLAB_DESDE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTEST_NLAB.OTC_NLAB_DESDEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_NLAB_DESDE' de la tabla 'OTEST_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTEST_NLAB.OTC_NLAB_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_NLAB_HASTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTEST_NLAB.OTC_NLAB_HASTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_NLAB_HASTA' de la tabla 'OTEST_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTEST_NLAB.OTC_NLAB_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTEST_NLAB.OT_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ESTADO' de la tabla 'OTEST_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTEST_NLAB.OT_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_NLAB_DESDENull() As Boolean
            Return Me.IsNull(Me.tableOTEST_NLAB.OTC_NLAB_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_NLAB_DESDENull()
            Me(Me.tableOTEST_NLAB.OTC_NLAB_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_NLAB_HASTANull() As Boolean
            Return Me.IsNull(Me.tableOTEST_NLAB.OTC_NLAB_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_NLAB_HASTANull()
            Me(Me.tableOTEST_NLAB.OTC_NLAB_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOTEST_NLAB.OT_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ESTADONull()
            Me(Me.tableOTEST_NLAB.OT_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_CODIFICACIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_CODIFICACION As OT_CODIFICACIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_CODIFICACION = CType(Me.Table,OT_CODIFICACIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_CODIFICACION.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUESTRA() As String
            Get
                Return CType(Me(Me.tableOT_CODIFICACION.MUESTRAColumn),String)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.MUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_NLAB_DESDE() As Integer
            Get
                Return CType(Me(Me.tableOT_CODIFICACION.OTC_NLAB_DESDEColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.OTC_NLAB_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableOT_CODIFICACION.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'OT_CODIFICACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_CANT_MUESTRAS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION.OTC_CANT_MUESTRASColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_CANT_MUESTRAS' de la tabla 'OT_CODIFICACION' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.OTC_CANT_MUESTRASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_NLAB_HASTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION.OTC_NLAB_HASTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_NLAB_HASTA' de la tabla 'OT_CODIFICACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.OTC_NLAB_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_PRECIOUN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION.OTC_PRECIOUNColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_PRECIOUN' de la tabla 'OT_CODIFICACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.OTC_PRECIOUNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_PRECIONET() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION.OTC_PRECIONETColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_PRECIONET' de la tabla 'OT_CODIFICACION' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION.OTC_PRECIONETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableOT_CODIFICACION.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_CANT_MUESTRASNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION.OTC_CANT_MUESTRASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_CANT_MUESTRASNull()
            Me(Me.tableOT_CODIFICACION.OTC_CANT_MUESTRASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_NLAB_HASTANull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION.OTC_NLAB_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_NLAB_HASTANull()
            Me(Me.tableOT_CODIFICACION.OTC_NLAB_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_PRECIOUNNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION.OTC_PRECIOUNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_PRECIOUNNull()
            Me(Me.tableOT_CODIFICACION.OTC_PRECIOUNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_PRECIONETNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION.OTC_PRECIONETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_PRECIONETNull()
            Me(Me.tableOT_CODIFICACION.OTC_PRECIONETColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DIGITA_RESULTADOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDIGITA_RESULTADOS As DIGITA_RESULTADOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDIGITA_RESULTADOS = CType(Me.Table,DIGITA_RESULTADOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableDIGITA_RESULTADOS.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableDIGITA_RESULTADOS.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableDIGITA_RESULTADOS.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableDIGITA_RESULTADOS.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableDIGITA_RESULTADOS.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.DIGRES_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_FECHA' de la tabla 'DIGITA_RESULTADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.DIGRES_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_ANALIZADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.DIGRES_ANALIZADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_ANALIZADO_POR' de la tabla 'DIGITA_RESULTADOS' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.DIGRES_ANALIZADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_DIGITADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.DIGRES_DIGITADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_DIGITADO_POR' de la tabla 'DIGITA_RESULTADOS' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.DIGRES_DIGITADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_BLANCO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.DIGRES_BLANCOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_BLANCO' de la tabla 'DIGITA_RESULTADOS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.DIGRES_BLANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_FACTOR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.DIGRES_FACTORColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_FACTOR' de la tabla 'DIGITA_RESULTADOS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.DIGRES_FACTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_LECTURA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.DIGRES_LECTURAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_LECTURA' de la tabla 'DIGITA_RESULTADOS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.DIGRES_LECTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_RESULTADO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.DIGRES_RESULTADOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_RESULTADO' de la tabla 'DIGITA_RESULTADOS' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.DIGRES_RESULTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDIGITA_RESULTADOS.ELE_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ELE_ESTADO' de la tabla 'DIGITA_RESULTADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDIGITA_RESULTADOS.ELE_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_FECHANull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.DIGRES_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_FECHANull()
            Me(Me.tableDIGITA_RESULTADOS.DIGRES_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_ANALIZADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.DIGRES_ANALIZADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_ANALIZADO_PORNull()
            Me(Me.tableDIGITA_RESULTADOS.DIGRES_ANALIZADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_DIGITADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.DIGRES_DIGITADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_DIGITADO_PORNull()
            Me(Me.tableDIGITA_RESULTADOS.DIGRES_DIGITADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_BLANCONull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.DIGRES_BLANCOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_BLANCONull()
            Me(Me.tableDIGITA_RESULTADOS.DIGRES_BLANCOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_FACTORNull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.DIGRES_FACTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_FACTORNull()
            Me(Me.tableDIGITA_RESULTADOS.DIGRES_FACTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_LECTURANull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.DIGRES_LECTURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_LECTURANull()
            Me(Me.tableDIGITA_RESULTADOS.DIGRES_LECTURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_RESULTADONull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.DIGRES_RESULTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_RESULTADONull()
            Me(Me.tableDIGITA_RESULTADOS.DIGRES_RESULTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsELE_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableDIGITA_RESULTADOS.ELE_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetELE_ESTADONull()
            Me(Me.tableDIGITA_RESULTADOS.ELE_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DUPLICA_RESULTADORow
        Inherits Global.System.Data.DataRow
        
        Private tableDUPLICA_RESULTADO As DUPLICA_RESULTADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDUPLICA_RESULTADO = CType(Me.Table,DUPLICA_RESULTADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableDUPLICA_RESULTADO.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableDUPLICA_RESULTADO.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableDUPLICA_RESULTADO.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableDUPLICA_RESULTADO.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableDUPLICA_RESULTADO.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.ELE_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERO_DIGITACION() As Integer
            Get
                Return CType(Me(Me.tableDUPLICA_RESULTADO.NUMERO_DIGITACIONColumn),Integer)
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.NUMERO_DIGITACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_FECHA' de la tabla 'DUPLICA_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_NLAB_DESDE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_DESDEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_NLAB_DESDE' de la tabla 'DUPLICA_RESULTADO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_NLAB_HASTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_HASTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_NLAB_HASTA' de la tabla 'DUPLICA_RESULTADO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_ANALIZADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_ANALIZADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_ANALIZADO_POR' de la tabla 'DUPLICA_RESULTADO' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_ANALIZADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_DIGITADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_DIGITADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_DIGITADO_POR' de la tabla 'DUPLICA_RESULTADO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_DIGITADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_BLANCO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_BLANCOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_BLANCO' de la tabla 'DUPLICA_RESULTADO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_BLANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_FACTOR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_FACTORColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_FACTOR' de la tabla 'DUPLICA_RESULTADO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_FACTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_LECTURA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_LECTURAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_LECTURA' de la tabla 'DUPLICA_RESULTADO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_LECTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIGRES_RESULTADO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.DIGRES_RESULTADOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIGRES_RESULTADO' de la tabla 'DUPLICA_RESULTADO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.DIGRES_RESULTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDUPLICA_RESULTADO.ELE_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ELE_ESTADO' de la tabla 'DUPLICA_RESULTADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDUPLICA_RESULTADO.ELE_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_FECHANull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_FECHANull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_NLAB_DESDENull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_DESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_NLAB_DESDENull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_DESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_NLAB_HASTANull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_NLAB_HASTANull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_NLAB_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_ANALIZADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_ANALIZADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_ANALIZADO_PORNull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_ANALIZADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_DIGITADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_DIGITADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_DIGITADO_PORNull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_DIGITADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_BLANCONull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_BLANCOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_BLANCONull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_BLANCOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_FACTORNull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_FACTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_FACTORNull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_FACTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_LECTURANull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_LECTURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_LECTURANull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_LECTURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIGRES_RESULTADONull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.DIGRES_RESULTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIGRES_RESULTADONull()
            Me(Me.tableDUPLICA_RESULTADO.DIGRES_RESULTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsELE_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableDUPLICA_RESULTADO.ELE_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetELE_ESTADONull()
            Me(Me.tableDUPLICA_RESULTADO.ELE_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS_ELEMENTOS_PASO2Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS_ELEMENTOS_PASO2 As ANALISIS_ELEMENTOS_PASO2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS_ELEMENTOS_PASO2 = CType(Me.Table,ANALISIS_ELEMENTOS_PASO2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_NLAB_DESDE() As Integer
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS_PASO2.OTC_NLAB_DESDEColumn),Integer)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS_PASO2.OTC_NLAB_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS_PASO2.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS_PASO2.ELE_CODIGOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FOLIAR_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FOLIAR_ANTECEDENTES As OT_FOLIAR_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FOLIAR_ANTECEDENTES = CType(Me.Table,OT_FOLIAR_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_PREDIO' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_LOCALIDAD' de la tabla 'OT_FOLIAR_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESPECIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.ESPECIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESPECIE' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VARIEDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.VARIEDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VARIEDAD' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.VARIEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.TEJIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJIDO' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.TEJIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_EDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_EDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_EDAD' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_EDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_CUARTEL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_CUARTEL1' de la tabla 'OT_FOLIAR_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_CUARTEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_CUARTEL2' de la tabla 'OT_FOLIAR_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_RTO_ANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RTO_ANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_RTO_ANT' de la tabla 'OT_FOLIAR_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RTO_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_CARGA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CARGAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_CARGA' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CARGAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_VIGOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_VIGORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_VIGOR' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_VIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_DENSIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_DENSIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_DENSIDAD' de la tabla 'OT_FOLIAR_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_DENSIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_APARIENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_APARIENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_APARIENCIA' de la tabla 'OT_FOLIAR_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_APARIENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_OBSERVACIONES' de la tabla 'OT_FOLIAR_ANTECEDENTES"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_FOTO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_FOTO1' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_FOTO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_FOTO2' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_RECOMENDACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RECOMENDACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_RECOMENDACION' de la tabla 'OT_FOLIAR_ANTECEDENTES"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RECOMENDACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_MUESTREADOR' de la tabla 'OT_FOLIAR_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOLANT_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOLANT_FMUESTREO' de la tabla 'OT_FOLIAR_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FOLIAR_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_FOLIAR_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FOLIAR_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_PREDIONull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_LOCALIDADNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESPECIENull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.ESPECIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESPECIENull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.ESPECIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVARIEDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.VARIEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVARIEDADNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.VARIEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJIDONull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.TEJIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJIDONull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.TEJIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_EDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_EDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_EDADNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_EDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_CUARTEL1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_CUARTEL1Null()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_CUARTEL2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_CUARTEL2Null()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CUARTEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_RTO_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RTO_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_RTO_ANTNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RTO_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_CARGANull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CARGAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_CARGANull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_CARGAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_VIGORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_VIGORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_VIGORNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_VIGORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_DENSIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_DENSIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_DENSIDADNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_DENSIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_APARIENCIANull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_APARIENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_APARIENCIANull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_APARIENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_OBSERVACIONESNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_FOTO1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_FOTO1Null()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_FOTO2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_FOTO2Null()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FOTO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_RECOMENDACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RECOMENDACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_RECOMENDACIONNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_RECOMENDACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_MUESTREADORNull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOLANT_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOLANT_FMUESTREONull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.FOLANT_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_FOLIAR_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_FOLIAR_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDEN_TRABAJORow
        Inherits Global.System.Data.DataRow
        
        Private tableORDEN_TRABAJO As ORDEN_TRABAJODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDEN_TRABAJO = CType(Me.Table,ORDEN_TRABAJODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableORDEN_TRABAJO.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COT_NUMERO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.COT_NUMEROColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COT_NUMERO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.COT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FECHA_ORDEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FECHA_ORDENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FECHA_ORDEN' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FECHA_ORDENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_RUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_RUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_RUT' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_PRODUCTOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.PRO_PRODUCTORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_PRODUCTOR' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.PRO_PRODUCTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_EMPRESA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_EMPRESAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_EMPRESA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_EMPRESAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_PREDIO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DIRECCION' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_LOCALIDAD' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_COMUNA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_CIUDAD' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_PROVINCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_PROVINCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_PROVINCIA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_PROVINCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REGION() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REGIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REGION' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REGIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FONO1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FONO2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_CELULAR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_CELULAR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_CELULAR1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_CELULAR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_CELULAR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_CELULAR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_CELULAR2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_CELULAR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAX1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAX1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAX1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAX2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAX2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAX2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAX2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_EMAIL1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_EMAIL2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRO_RUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.PRO_RUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRO_RUT' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.PRO_RUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REMITE() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REMITEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REMITE' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REMITEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_FONO1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_FONO2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_CELULAR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_CELULAR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_CELULAR1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_CELULAR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_CELULAR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_CELULAR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_CELULAR2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_CELULAR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_FAX1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_FAX1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_FAX1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_FAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_FAX2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_FAX2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_FAX2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_FAX2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_EMAIL1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_REM_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_REM_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_REM_EMAIL2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_REM_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_NOMBRE' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FONO1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FONO2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_CELULAR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_CELULAR1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_CELULAR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_CELULAR2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FAX1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_FAX1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FAX1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_FAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_FAX2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_FAX2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_FAX2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_FAX2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_EMAIL1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SOL_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SOL_EMAIL2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_RSOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_RSOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_RSOCIAL' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_RSOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_FONO1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_FONO2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_GIRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_GIROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_GIRO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_GIROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_DIRECCION' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_COMUNA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_CIUDAD' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_ENCPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_ENCPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_ENCPAGO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_ENCPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_F1PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_F1PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_F1PAGO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_F1PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_F2PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_F2PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_F2PAGO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_F2PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_OBSPAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_OBSPAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_OBSPAGO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_OBSPAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FAC_CONDICION_PAGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FAC_CONDICION_PAGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FAC_CONDICION_PAGO' de la tabla 'ORDEN_TRABAJO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FAC_CONDICION_PAGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_RETIRALAB() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_RETIRALABColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_RETIRALAB' de la tabla 'ORDEN_TRABAJO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_RETIRALABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_FONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_FONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_FONO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_FONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_FAX() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_FAXColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_FAX' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_EMAIL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_EMAILColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_EMAIL' de la tabla 'ORDEN_TRABAJO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_CORREO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_CORREOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_CORREO' de la tabla 'ORDEN_TRABAJO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_CORREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_BUS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_BUSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_BUS' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_BUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_OTRO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_OTRO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_POR_OTRO_GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTRO_GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_POR_OTRO_GLOSA' de la tabla 'ORDEN_TRABAJO' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTRO_GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_SENORES() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_SENORESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_SENORES' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_SENORESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_ATENCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_ATENCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_ATENCION' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_ATENCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_DIRECCION' de la tabla 'ORDEN_TRABAJO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_CASILLA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_CASILLAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_CASILLA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_CASILLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_COMUNA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_COMUNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_COMUNA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_COMUNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_CIUDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_CIUDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_CIUDAD' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_CIUDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_FECHA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_FONO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_FONO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_FONO1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_FONO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_FONO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_FONO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_FONO2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_FONO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_CELULAR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_CELULAR1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_CELULAR2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_CELULAR2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_FAX1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_FAX1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_FAX1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_FAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_FAX2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_FAX2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_FAX2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_FAX2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_EMAIL1' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_EMAIL2' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_OBSERVACIONES' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ENTREGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_ENTREGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ENTREGO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_ENTREGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DIGITADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DIGITADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DIGITADO_POR' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DIGITADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_HORA_OT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_HORA_OTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_HORA_OT' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_HORA_OTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_FACTURA_PEND() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_FACTURA_PENDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_FACTURA_PEND' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_FACTURA_PENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_SUBTOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_SUBTOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_SUBTOTAL' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_SUBTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NETO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_NETOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_NETO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_NETOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_IVA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_IVAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_IVA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESCUENTOPOR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESCUENTOPORColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESCUENTOPOR' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESCUENTOPORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESCUENTOPESOS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESCUENTOPESOSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESCUENTOPESOS' de la tabla 'ORDEN_TRABAJO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESCUENTOPESOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_MUESTREO_CANT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_MUESTREO_CANTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_MUESTREO_CANT' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_MUESTREO_CANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_MUESTREO_PRECIOUN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_MUESTREO_PRECIOUNColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_MUESTREO_PRECIOUN' de la tabla 'ORDEN_TRABAJO' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_MUESTREO_PRECIOUNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_MUESTREO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_MUESTREOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_MUESTREO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_MUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ABONO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_ABONOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ABONO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_ABONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ABONOCON() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_ABONOCONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ABONOCON' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_ABONOCONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_TOTAL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_TOTALColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_TOTAL' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_NUMERO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.FAC_NUMEROColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_NUMERO' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.FAC_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAC_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.FAC_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAC_FECHA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.FAC_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ESTADO_ANA() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_ESTADO_ANAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ESTADO_ANA' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_ESTADO_ANAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ESTADO_PAG() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_ESTADO_PAGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ESTADO_PAG' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_ESTADO_PAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_ESTADO_FAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_ESTADO_FACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_ESTADO_FAC' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_ESTADO_FACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_DESP_URGENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDEN_TRABAJO.OT_DESP_URGENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OT_DESP_URGENTE' de la tabla 'ORDEN_TRABAJO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDEN_TRABAJO.OT_DESP_URGENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOT_NUMERONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.COT_NUMEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOT_NUMERONull()
            Me(Me.tableORDEN_TRABAJO.COT_NUMEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FECHA_ORDENNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FECHA_ORDENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FECHA_ORDENNull()
            Me(Me.tableORDEN_TRABAJO.OT_FECHA_ORDENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_RUTNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_RUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_RUTNull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_RUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_PRODUCTORNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.PRO_PRODUCTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_PRODUCTORNull()
            Me(Me.tableORDEN_TRABAJO.PRO_PRODUCTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_EMPRESANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_EMPRESAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_EMPRESANull()
            Me(Me.tableORDEN_TRABAJO.OT_EMPRESAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_PREDIONull()
            Me(Me.tableORDEN_TRABAJO.OT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DIRECCIONNull()
            Me(Me.tableORDEN_TRABAJO.OT_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_LOCALIDADNull()
            Me(Me.tableORDEN_TRABAJO.OT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_COMUNANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_COMUNANull()
            Me(Me.tableORDEN_TRABAJO.OT_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_CIUDADNull()
            Me(Me.tableORDEN_TRABAJO.OT_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_PROVINCIANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_PROVINCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_PROVINCIANull()
            Me(Me.tableORDEN_TRABAJO.OT_PROVINCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REGIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REGIONNull()
            Me(Me.tableORDEN_TRABAJO.OT_REGIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FONO1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FONO1Null()
            Me(Me.tableORDEN_TRABAJO.OT_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FONO2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FONO2Null()
            Me(Me.tableORDEN_TRABAJO.OT_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_CELULAR1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_CELULAR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_CELULAR1Null()
            Me(Me.tableORDEN_TRABAJO.OT_CELULAR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_CELULAR2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_CELULAR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_CELULAR2Null()
            Me(Me.tableORDEN_TRABAJO.OT_CELULAR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAX1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAX1Null()
            Me(Me.tableORDEN_TRABAJO.OT_FAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAX2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAX2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAX2Null()
            Me(Me.tableORDEN_TRABAJO.OT_FAX2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_EMAIL1Null()
            Me(Me.tableORDEN_TRABAJO.OT_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_EMAIL2Null()
            Me(Me.tableORDEN_TRABAJO.OT_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRO_RUTNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.PRO_RUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRO_RUTNull()
            Me(Me.tableORDEN_TRABAJO.PRO_RUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REMITENull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REMITEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REMITENull()
            Me(Me.tableORDEN_TRABAJO.OT_REMITEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_FONO1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_FONO1Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_FONO2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_FONO2Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_CELULAR1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_CELULAR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_CELULAR1Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_CELULAR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_CELULAR2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_CELULAR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_CELULAR2Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_CELULAR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_FAX1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_FAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_FAX1Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_FAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_FAX2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_FAX2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_FAX2Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_FAX2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_EMAIL1Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_REM_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_REM_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_REM_EMAIL2Null()
            Me(Me.tableORDEN_TRABAJO.OT_REM_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_NOMBRENull()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FONO1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FONO1Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FONO2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FONO2Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_CELULAR1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_CELULAR1Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_CELULAR2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_CELULAR2Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_CELULAR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FAX1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_FAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FAX1Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_FAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_FAX2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_FAX2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_FAX2Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_FAX2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_EMAIL1Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SOL_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SOL_EMAIL2Null()
            Me(Me.tableORDEN_TRABAJO.OT_SOL_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_RSOCIALNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_RSOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_RSOCIALNull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_RSOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_FONO1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_FONO1Null()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_FONO2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_FONO2Null()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_GIRONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_GIROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_GIRONull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_GIROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_DIRECCIONNull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_COMUNANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_COMUNANull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_CIUDADNull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_ENCPAGONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_ENCPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_ENCPAGONull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_ENCPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_F1PAGONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_F1PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_F1PAGONull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_F1PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_F2PAGONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_F2PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_F2PAGONull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_F2PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_OBSPAGONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_OBSPAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_OBSPAGONull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_OBSPAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FAC_CONDICION_PAGONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FAC_CONDICION_PAGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FAC_CONDICION_PAGONull()
            Me(Me.tableORDEN_TRABAJO.OT_FAC_CONDICION_PAGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_RETIRALABNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_RETIRALABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_RETIRALABNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_RETIRALABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_FONONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_FONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_FONONull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_FONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_FAXNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_FAXNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_EMAILNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_CORREONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_CORREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_CORREONull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_CORREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_BUSNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_BUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_BUSNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_BUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_OTRONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_OTRONull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_POR_OTRO_GLOSANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTRO_GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_POR_OTRO_GLOSANull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_POR_OTRO_GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_SENORESNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_SENORESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_SENORESNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_SENORESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_ATENCIONNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_ATENCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_ATENCIONNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_ATENCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_DIRECCIONNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_CASILLANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_CASILLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_CASILLANull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_CASILLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_COMUNANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_COMUNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_COMUNANull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_COMUNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_CIUDADNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_CIUDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_CIUDADNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_CIUDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_FECHANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_FECHANull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_FONO1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_FONO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_FONO1Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_FONO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_FONO2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_FONO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_FONO2Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_FONO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_CELULAR1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_CELULAR1Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_CELULAR2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_CELULAR2Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_CELULAR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_FAX1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_FAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_FAX1Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_FAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_FAX2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_FAX2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_FAX2Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_FAX2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_EMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_EMAIL1Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_EMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_EMAIL2Null()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_OBSERVACIONESNull()
            Me(Me.tableORDEN_TRABAJO.OT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ENTREGONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_ENTREGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ENTREGONull()
            Me(Me.tableORDEN_TRABAJO.OT_ENTREGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DIGITADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DIGITADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DIGITADO_PORNull()
            Me(Me.tableORDEN_TRABAJO.OT_DIGITADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_HORA_OTNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_HORA_OTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_HORA_OTNull()
            Me(Me.tableORDEN_TRABAJO.OT_HORA_OTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_FACTURA_PENDNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_FACTURA_PENDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_FACTURA_PENDNull()
            Me(Me.tableORDEN_TRABAJO.OT_FACTURA_PENDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_SUBTOTALNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_SUBTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_SUBTOTALNull()
            Me(Me.tableORDEN_TRABAJO.OT_SUBTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_NETONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_NETOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_NETONull()
            Me(Me.tableORDEN_TRABAJO.OT_NETOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_IVANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_IVANull()
            Me(Me.tableORDEN_TRABAJO.OT_IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESCUENTOPORNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESCUENTOPORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESCUENTOPORNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESCUENTOPORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESCUENTOPESOSNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESCUENTOPESOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESCUENTOPESOSNull()
            Me(Me.tableORDEN_TRABAJO.OT_DESCUENTOPESOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_MUESTREO_CANTNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_MUESTREO_CANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_MUESTREO_CANTNull()
            Me(Me.tableORDEN_TRABAJO.OT_MUESTREO_CANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_MUESTREO_PRECIOUNNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_MUESTREO_PRECIOUNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_MUESTREO_PRECIOUNNull()
            Me(Me.tableORDEN_TRABAJO.OT_MUESTREO_PRECIOUNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_MUESTREONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_MUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_MUESTREONull()
            Me(Me.tableORDEN_TRABAJO.OT_MUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ABONONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_ABONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ABONONull()
            Me(Me.tableORDEN_TRABAJO.OT_ABONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ABONOCONNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_ABONOCONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ABONOCONNull()
            Me(Me.tableORDEN_TRABAJO.OT_ABONOCONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_TOTALNull()
            Me(Me.tableORDEN_TRABAJO.OT_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_NUMERONull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.FAC_NUMEROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_NUMERONull()
            Me(Me.tableORDEN_TRABAJO.FAC_NUMEROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAC_FECHANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.FAC_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAC_FECHANull()
            Me(Me.tableORDEN_TRABAJO.FAC_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ESTADO_ANANull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_ESTADO_ANAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ESTADO_ANANull()
            Me(Me.tableORDEN_TRABAJO.OT_ESTADO_ANAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ESTADO_PAGNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_ESTADO_PAGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ESTADO_PAGNull()
            Me(Me.tableORDEN_TRABAJO.OT_ESTADO_PAGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_ESTADO_FACNull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_ESTADO_FACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_ESTADO_FACNull()
            Me(Me.tableORDEN_TRABAJO.OT_ESTADO_FACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOT_DESP_URGENTENull() As Boolean
            Return Me.IsNull(Me.tableORDEN_TRABAJO.OT_DESP_URGENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOT_DESP_URGENTENull()
            Me(Me.tableORDEN_TRABAJO.OT_DESP_URGENTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ANALISIS_ELEMENTOS_PASO3Row
        Inherits Global.System.Data.DataRow
        
        Private tableANALISIS_ELEMENTOS_PASO3 As ANALISIS_ELEMENTOS_PASO3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableANALISIS_ELEMENTOS_PASO3 = CType(Me.Table,ANALISIS_ELEMENTOS_PASO3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMU_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS_PASO3.TMU_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS_PASO3.TMU_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS_PASO3.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS_PASO3.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELE_CODIGO() As String
            Get
                Return CType(Me(Me.tableANALISIS_ELEMENTOS_PASO3.ELE_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableANALISIS_ELEMENTOS_PASO3.ELE_CODIGOColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_SUELO_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_SUELO_ANTECEDENTES As OT_SUELO_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_SUELO_ANTECEDENTES = CType(Me.Table,OT_SUELO_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_MUESTREADOR' de la tabla 'OT_SUELO_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_FECHAMU() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_FECHAMUColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_FECHAMU' de la tabla 'OT_SUELO_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_FECHAMUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_PREDIO' de la tabla 'OT_SUELO_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_LOCALIDAD' de la tabla 'OT_SUELO_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_IDENTIFICACION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_IDENTIFICACION1' de la tabla 'OT_SUELO_ANTECEDENTE"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_IDENTIFICACION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_IDENTIFICACION2' de la tabla 'OT_SUELO_ANTECEDENTE"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_CULTIVO_ANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_ANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_CULTIVO_ANT' de la tabla 'OT_SUELO_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_RTO_ANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_RTO_ANT' de la tabla 'OT_SUELO_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_CANTIDAD_ANT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ANTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_CANTIDAD_ANT' de la tabla 'OT_SUELO_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_UNIDAD_ANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_UNIDAD_ANT' de la tabla 'OT_SUELO_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_CULTIVO_PRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_PROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_CULTIVO_PRO' de la tabla 'OT_SUELO_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_PROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_RTO_ACT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ACTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_RTO_ACT' de la tabla 'OT_SUELO_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_CANTIDAD_ACT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ACTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_CANTIDAD_ACT' de la tabla 'OT_SUELO_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_UNIDAD_ACT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ACTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_UNIDAD_ACT' de la tabla 'OT_SUELO_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_TEXTURA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_TEXTURAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_TEXTURA' de la tabla 'OT_SUELO_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_TEXTURAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_PROFUNDIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_PROFUNDIDAD' de la tabla 'OT_SUELO_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_DRENAJE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_DRENAJEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_DRENAJE' de la tabla 'OT_SUELO_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_DRENAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_RIEGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RIEGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_RIEGO' de la tabla 'OT_SUELO_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RIEGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_OBSERVACIONES' de la tabla 'OT_SUELO_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_RECOMENDACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RECOMENDACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_RECOMENDACION' de la tabla 'OT_SUELO_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RECOMENDACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_SUELO_ANTECEDENTES' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUEANT_PROFUNDIDADMUESTRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADMUESTRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUEANT_PROFUNDIDADMUESTRA' de la tabla 'OT_SUELO_ANTECEDE"& _ 
                            "NTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADMUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_MUESTREADORNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_FECHAMUNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_FECHAMUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_FECHAMUNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_FECHAMUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_PREDIONull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_LOCALIDADNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_IDENTIFICACION1Null() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_IDENTIFICACION1Null()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_IDENTIFICACION2Null() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_IDENTIFICACION2Null()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_IDENTIFICACION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_CULTIVO_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_CULTIVO_ANTNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_RTO_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_RTO_ANTNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_CANTIDAD_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_CANTIDAD_ANTNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_UNIDAD_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_UNIDAD_ANTNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_CULTIVO_PRONull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_PROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_CULTIVO_PRONull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CULTIVO_PROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_RTO_ACTNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_RTO_ACTNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RTO_ACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_CANTIDAD_ACTNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_CANTIDAD_ACTNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_CANTIDAD_ACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_UNIDAD_ACTNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_UNIDAD_ACTNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_UNIDAD_ACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_TEXTURANull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_TEXTURAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_TEXTURANull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_TEXTURAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_PROFUNDIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_PROFUNDIDADNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_DRENAJENull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_DRENAJEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_DRENAJENull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_DRENAJEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_RIEGONull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RIEGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_RIEGONull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RIEGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_OBSERVACIONESNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_RECOMENDACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RECOMENDACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_RECOMENDACIONNull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_RECOMENDACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUEANT_PROFUNDIDADMUESTRANull() As Boolean
            Return Me.IsNull(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADMUESTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUEANT_PROFUNDIDADMUESTRANull()
            Me(Me.tableOT_SUELO_ANTECEDENTES.SUEANT_PROFUNDIDADMUESTRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_TEJIDOS_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_TEJIDOS_ANTECEDENTES As OT_TEJIDOS_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_TEJIDOS_ANTECEDENTES = CType(Me.Table,OT_TEJIDOS_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_PREDIO' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_LOCALIDAD' de la tabla 'OT_TEJIDOS_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESPECIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.ESPECIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESPECIE' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VARIEDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.VARIEDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VARIEDAD' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.VARIEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJIDO' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_EDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_EDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_EDAD' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_EDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_CUARTEL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_CUARTEL1' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_CUARTEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_CUARTEL2' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_RTO_ANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RTO_ANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_RTO_ANT' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RTO_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_CARGA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CARGAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_CARGA' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CARGAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_VIGOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_VIGORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_VIGOR' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_VIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_DENSIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_DENSIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_DENSIDAD' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_DENSIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_APARIENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_APARIENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_APARIENCIA' de la tabla 'OT_TEJIDOS_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_APARIENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_OBSERVACIONES' de la tabla 'OT_TEJIDOS_ANTECEDENTE"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_FOTO1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_FOTO1' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_FOTO2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_FOTO2' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_RECOMENDACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RECOMENDACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_RECOMENDACION' de la tabla 'OT_TEJIDOS_ANTECEDENTE"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RECOMENDACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_MUESTREADOR' de la tabla 'OT_TEJIDOS_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEJANT_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEJANT_FMUESTREO' de la tabla 'OT_TEJIDOS_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_TEJIDOS_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_TEJIDOS_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_TEJIDOS_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_PREDIONull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_LOCALIDADNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESPECIENull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.ESPECIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESPECIENull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.ESPECIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVARIEDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.VARIEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVARIEDADNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.VARIEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJIDONull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJIDONull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_EDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_EDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_EDADNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_EDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_CUARTEL1Null() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_CUARTEL1Null()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_CUARTEL2Null() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_CUARTEL2Null()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CUARTEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_RTO_ANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RTO_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_RTO_ANTNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RTO_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_CARGANull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CARGAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_CARGANull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_CARGAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_VIGORNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_VIGORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_VIGORNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_VIGORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_DENSIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_DENSIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_DENSIDADNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_DENSIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_APARIENCIANull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_APARIENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_APARIENCIANull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_APARIENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_OBSERVACIONESNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_FOTO1Null() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_FOTO1Null()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_FOTO2Null() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_FOTO2Null()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FOTO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_RECOMENDACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RECOMENDACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_RECOMENDACIONNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_RECOMENDACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_MUESTREADORNull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEJANT_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEJANT_FMUESTREONull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.TEJANT_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_TEJIDOS_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_TEJIDOS_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_AGUA_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_AGUA_ANTECEDENTES As OT_AGUA_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_AGUA_ANTECEDENTES = CType(Me.Table,OT_AGUA_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_MUESTREADOR' de la tabla 'OT_AGUA_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_FECHAMU() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAMUColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_FECHAMU' de la tabla 'OT_AGUA_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAMUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_HORA_MUESTREO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_MUESTREOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_HORA_MUESTREO' de la tabla 'OT_AGUA_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_MUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_PREDIO' de la tabla 'OT_AGUA_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_LOCALIDAD' de la tabla 'OT_AGUA_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_ORIGEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_ORIGEN' de la tabla 'OT_AGUA_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_ORIGEN_DESCR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGEN_DESCRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_ORIGEN_DESCR' de la tabla 'OT_AGUA_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGEN_DESCRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_TIPO_MU() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_TIPO_MU' de la tabla 'OT_AGUA_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_TIPO_MDESCR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MDESCRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_TIPO_MDESCR' de la tabla 'OT_AGUA_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MDESCRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_TIPO_RECIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_RECIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_TIPO_RECIP' de la tabla 'OT_AGUA_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_RECIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_DETALLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_DETALLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_DETALLE' de la tabla 'OT_AGUA_ANTECEDENTES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_VOLUMEN_MU() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_VOLUMEN_MUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_VOLUMEN_MU' de la tabla 'OT_AGUA_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_VOLUMEN_MUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_ESTADO' de la tabla 'OT_AGUA_ANTECEDENTES' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_PRESERVANTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PRESERVANTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_PRESERVANTES' de la tabla 'OT_AGUA_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PRESERVANTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_IDENTIFICACION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_IDENTIFICACION1' de la tabla 'OT_AGUA_ANTECEDENTES"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_IDENTIFICACION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_IDENTIFICACION2' de la tabla 'OT_AGUA_ANTECEDENTES"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_FECHAING() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAINGColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_FECHAING' de la tabla 'OT_AGUA_ANTECEDENTES' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_HORA_INGRESO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_INGRESOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_HORA_INGRESO' de la tabla 'OT_AGUA_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGUANT_OBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_OBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AGUANT_OBSERVACIONES' de la tabla 'OT_AGUA_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_OBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_MUESTREADORNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_FECHAMUNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAMUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_FECHAMUNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAMUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_HORA_MUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_MUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_HORA_MUESTREONull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_MUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_PREDIONull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_LOCALIDADNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_ORIGENNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_ORIGENNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_ORIGEN_DESCRNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGEN_DESCRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_ORIGEN_DESCRNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ORIGEN_DESCRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_TIPO_MUNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_TIPO_MUNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_TIPO_MDESCRNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MDESCRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_TIPO_MDESCRNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_MDESCRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_TIPO_RECIPNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_RECIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_TIPO_RECIPNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_TIPO_RECIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_DETALLENull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_DETALLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_DETALLENull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_DETALLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_VOLUMEN_MUNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_VOLUMEN_MUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_VOLUMEN_MUNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_VOLUMEN_MUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_ESTADONull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_PRESERVANTESNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PRESERVANTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_PRESERVANTESNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_PRESERVANTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_IDENTIFICACION1Null() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_IDENTIFICACION1Null()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_IDENTIFICACION2Null() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_IDENTIFICACION2Null()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_IDENTIFICACION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_FECHAINGNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_FECHAINGNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_FECHAINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_HORA_INGRESONull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_INGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_HORA_INGRESONull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_HORA_INGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAGUANT_OBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_OBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAGUANT_OBSERVACIONESNull()
            Me(Me.tableOT_AGUA_ANTECEDENTES.AGUANT_OBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_CODIFICACION_RECIBORow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_CODIFICACION_RECIBO As OT_CODIFICACION_RECIBODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_CODIFICACION_RECIBO = CType(Me.Table,OT_CODIFICACION_RECIBODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUESTRA() As String
            Get
                Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.MUESTRAColumn),String)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.MUESTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_NLAB_DESDE() As Integer
            Get
                Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.OTC_NLAB_DESDEColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.OTC_NLAB_DESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_CODIGO() As Double
            Get
                Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.ANA_CODIGOColumn),Double)
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.ANA_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANA_ANALISIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.ANA_ANALISISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANA_ANALISIS' de la tabla 'OT_CODIFICACION_RECIBO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.ANA_ANALISISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_CANT_MUESTRAS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.OTC_CANT_MUESTRASColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_CANT_MUESTRAS' de la tabla 'OT_CODIFICACION_RECIBO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.OTC_CANT_MUESTRASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_NLAB_HASTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.OTC_NLAB_HASTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_NLAB_HASTA' de la tabla 'OT_CODIFICACION_RECIBO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.OTC_NLAB_HASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_PRECIOUN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIOUNColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_PRECIOUN' de la tabla 'OT_CODIFICACION_RECIBO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIOUNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTC_PRECIONET() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIONETColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OTC_PRECIONET' de la tabla 'OT_CODIFICACION_RECIBO' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIONETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANA_ANALISISNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION_RECIBO.ANA_ANALISISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANA_ANALISISNull()
            Me(Me.tableOT_CODIFICACION_RECIBO.ANA_ANALISISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_CANT_MUESTRASNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION_RECIBO.OTC_CANT_MUESTRASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_CANT_MUESTRASNull()
            Me(Me.tableOT_CODIFICACION_RECIBO.OTC_CANT_MUESTRASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_NLAB_HASTANull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION_RECIBO.OTC_NLAB_HASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_NLAB_HASTANull()
            Me(Me.tableOT_CODIFICACION_RECIBO.OTC_NLAB_HASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_PRECIOUNNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIOUNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_PRECIOUNNull()
            Me(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIOUNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTC_PRECIONETNull() As Boolean
            Return Me.IsNull(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIONETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTC_PRECIONETNull()
            Me(Me.tableOT_CODIFICACION_RECIBO.OTC_PRECIONETColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MODIFICA_NLABRow
        Inherits Global.System.Data.DataRow
        
        Private tableMODIFICA_NLAB As MODIFICA_NLABDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMODIFICA_NLAB = CType(Me.Table,MODIFICA_NLABDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableMODIFICA_NLAB.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableMODIFICA_NLAB.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIFICACION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMODIFICA_NLAB.IDENTIFICACION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDENTIFICACION1' de la tabla 'MODIFICA_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMODIFICA_NLAB.IDENTIFICACION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIFICACION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMODIFICA_NLAB.IDENTIFICACION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDENTIFICACION2' de la tabla 'MODIFICA_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMODIFICA_NLAB.IDENTIFICACION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICACION() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMODIFICA_NLAB.MODIFICACIONColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MODIFICACION' de la tabla 'MODIFICA_NLAB' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMODIFICA_NLAB.MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDENTIFICACION1Null() As Boolean
            Return Me.IsNull(Me.tableMODIFICA_NLAB.IDENTIFICACION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDENTIFICACION1Null()
            Me(Me.tableMODIFICA_NLAB.IDENTIFICACION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDENTIFICACION2Null() As Boolean
            Return Me.IsNull(Me.tableMODIFICA_NLAB.IDENTIFICACION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDENTIFICACION2Null()
            Me(Me.tableMODIFICA_NLAB.IDENTIFICACION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableMODIFICA_NLAB.MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICACIONNull()
            Me(Me.tableMODIFICA_NLAB.MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MYEMARow
        Inherits Global.System.Data.DataRow
        
        Private tableMYEMA As MYEMADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMYEMA = CType(Me.Table,MYEMADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IORD() As String
            Get
                Return CType(Me(Me.tableMYEMA.IORDColumn),String)
            End Get
            Set
                Me(Me.tableMYEMA.IORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INLA() As String
            Get
                Return CType(Me(Me.tableMYEMA.INLAColumn),String)
            End Get
            Set
                Me(Me.tableMYEMA.INLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILIN() As Double
            Get
                Return CType(Me(Me.tableMYEMA.ILINColumn),Double)
            End Get
            Set
                Me(Me.tableMYEMA.ILINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IFEIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEI' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IFEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IPROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRO' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IPROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEMP' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IREM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IREMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IREM' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IREMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IPRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IPREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IPRE' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IPREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IESP() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IESPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IESP' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IESPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IVARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVAR' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IVARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IFEM() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IFEMColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IFEM' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IFEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ILOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.ILOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ILOC' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.ILOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICUA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.ICUAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ICUA' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.ICUAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IEDA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMYEMA.IEDAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IEDA' de la tabla 'MYEMA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMYEMA.IEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEINull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IFEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEINull()
            Me(Me.tableMYEMA.IFEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRONull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IPROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRONull()
            Me(Me.tableMYEMA.IPROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEMPNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEMPNull()
            Me(Me.tableMYEMA.IEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIREMNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IREMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIREMNull()
            Me(Me.tableMYEMA.IREMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPRENull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IPREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPRENull()
            Me(Me.tableMYEMA.IPREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIESPNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IESPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIESPNull()
            Me(Me.tableMYEMA.IESPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVARNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IVARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVARNull()
            Me(Me.tableMYEMA.IVARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIFEMNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IFEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIFEMNull()
            Me(Me.tableMYEMA.IFEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsILOCNull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.ILOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetILOCNull()
            Me(Me.tableMYEMA.ILOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICUANull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.ICUAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICUANull()
            Me(Me.tableMYEMA.ICUAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIEDANull() As Boolean
            Return Me.IsNull(Me.tableMYEMA.IEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIEDANull()
            Me(Me.tableMYEMA.IEDAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_NEMATODOS_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_NEMATODOS_ANTECEDENTES As OT_NEMATODOS_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_NEMATODOS_ANTECEDENTES = CType(Me.Table,OT_NEMATODOS_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_TNEMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_TNEMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_TNEMA' de la tabla 'OT_NEMATODOS_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_TNEMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_CUARTEL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_CUARTEL1' de la tabla 'OT_NEMATODOS_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_CUARTEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_CUARTEL2' de la tabla 'OT_NEMATODOS_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_ESPECIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_ESPECIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_ESPECIE' de la tabla 'OT_NEMATODOS_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_VARIEDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VARIEDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_VARIEDAD' de la tabla 'OT_NEMATODOS_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VARIEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_EDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_EDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_EDAD' de la tabla 'OT_NEMATODOS_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_EDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_PREDIO' de la tabla 'OT_NEMATODOS_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_LOCALIDAD' de la tabla 'OT_NEMATODOS_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_REGION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_REGIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_REGION' de la tabla 'OT_NEMATODOS_ANTECEDENTES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_REGIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_FMUESTREO' de la tabla 'OT_NEMATODOS_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_VIGOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VIGORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_VIGOR' de la tabla 'OT_NEMATODOS_ANTECEDENTES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VIGORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_PRODANT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODANTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_PRODANT' de la tabla 'OT_NEMATODOS_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_PRODACT() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODACTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_PRODACT' de la tabla 'OT_NEMATODOS_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_OBSERVACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_OBSERVACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_OBSERVACION' de la tabla 'OT_NEMATODOS_ANTECEDENTE"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_OBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_NEMATODOS_ANTECEDENTES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_MUESTREADOR' de la tabla 'OT_NEMATODOS_ANTECEDENTE"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEMANT_CULTIVO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CULTIVOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEMANT_CULTIVO' de la tabla 'OT_NEMATODOS_ANTECEDENTES' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CULTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_TNEMANull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_TNEMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_TNEMANull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_TNEMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_CUARTEL1Null() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_CUARTEL1Null()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_CUARTEL2Null() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_CUARTEL2Null()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CUARTEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_ESPECIENull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_ESPECIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_ESPECIENull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_ESPECIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_VARIEDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VARIEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_VARIEDADNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VARIEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_EDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_EDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_EDADNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_EDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_PREDIONull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_LOCALIDADNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_REGIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_REGIONNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_REGIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_FMUESTREONull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_VIGORNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VIGORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_VIGORNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_VIGORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_PRODANTNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_PRODANTNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_PRODACTNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_PRODACTNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_PRODACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_OBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_OBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_OBSERVACIONNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_OBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_MUESTREADORNull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEMANT_CULTIVONull() As Boolean
            Return Me.IsNull(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CULTIVOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEMANT_CULTIVONull()
            Me(Me.tableOT_NEMATODOS_ANTECEDENTES.NEMANT_CULTIVOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FITOEVALUACION_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FITOEVALUACION_ANTECEDENTES As OT_FITOEVALUACION_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FITOEVALUACION_ANTECEDENTES = CType(Me.Table,OT_FITOEVALUACION_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_PREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_PREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_PREDIO' de la tabla 'OT_FITOEVALUACION_ANTECEDENTE"& _ 
                            "S' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_PREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_ESPECIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ESPECIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_ESPECIE' de la tabla 'OT_FITOEVALUACION_ANTECEDENT"& _ 
                            "ES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ESPECIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_VARIEDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_VARIEDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_VARIEDAD' de la tabla 'OT_FITOEVALUACION_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_VARIEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_DISTPLANTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DISTPLANTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_DISTPLANTA' de la tabla 'OT_FITOEVALUACION_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DISTPLANTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_CUARTEL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_CUARTEL1' de la tabla 'OT_FITOEVALUACION_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_CUARTEL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_CUARTEL2' de la tabla 'OT_FITOEVALUACION_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_ANOPLANTA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ANOPLANTAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_ANOPLANTA' de la tabla 'OT_FITOEVALUACION_ANTECEDE"& _ 
                            "NTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ANOPLANTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_NUMTRATA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NUMTRATAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_NUMTRATA' de la tabla 'OT_FITOEVALUACION_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NUMTRATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_APLICACION() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_APLICACIONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_APLICACION' de la tabla 'OT_FITOEVALUACION_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_APLICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_DURACIONDESDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONDESDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_DURACIONDESDE' de la tabla 'OT_FITOEVALUACION_ANTE"& _ 
                            "CEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONDESDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_DURACIONHASTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONHASTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_DURACIONHASTA' de la tabla 'OT_FITOEVALUACION_ANTE"& _ 
                            "CEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONHASTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_COSECHA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_COSECHAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_COSECHA' de la tabla 'OT_FITOEVALUACION_ANTECEDENT"& _ 
                            "ES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_COSECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_FECHA_GUARDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FECHA_GUARDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_FECHA_GUARDA' de la tabla 'OT_FITOEVALUACION_ANTEC"& _ 
                            "EDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FECHA_GUARDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_LOCALIDAD' de la tabla 'OT_FITOEVALUACION_ANTECEDE"& _ 
                            "NTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_NOMBRE_ENSAYO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NOMBRE_ENSAYOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_NOMBRE_ENSAYO' de la tabla 'OT_FITOEVALUACION_ANTE"& _ 
                            "CEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NOMBRE_ENSAYOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_OBSERVACION_() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_OBSERVACION_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_OBSERVACION ' de la tabla 'OT_FITOEVALUACION_ANTEC"& _ 
                            "EDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_OBSERVACION_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_FITOEVALUACION_ANTECEDENTES'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_MUESTREADOR' de la tabla 'OT_FITOEVALUACION_ANTECE"& _ 
                            "DENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITEVA_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITEVA_FMUESTREO' de la tabla 'OT_FITOEVALUACION_ANTECEDE"& _ 
                            "NTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_PREDIONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_PREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_PREDIONull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_PREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_ESPECIENull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ESPECIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_ESPECIENull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ESPECIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_VARIEDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_VARIEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_VARIEDADNull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_VARIEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_DISTPLANTANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DISTPLANTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_DISTPLANTANull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DISTPLANTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_CUARTEL1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_CUARTEL1Null()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_CUARTEL2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_CUARTEL2Null()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_CUARTEL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_ANOPLANTANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ANOPLANTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_ANOPLANTANull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_ANOPLANTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_NUMTRATANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NUMTRATAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_NUMTRATANull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NUMTRATAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_APLICACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_APLICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_APLICACIONNull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_APLICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_DURACIONDESDENull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONDESDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_DURACIONDESDENull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONDESDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_DURACIONHASTANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONHASTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_DURACIONHASTANull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_DURACIONHASTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_COSECHANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_COSECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_COSECHANull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_COSECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_FECHA_GUARDANull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FECHA_GUARDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_FECHA_GUARDANull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FECHA_GUARDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_LOCALIDADNull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_NOMBRE_ENSAYONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NOMBRE_ENSAYOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_NOMBRE_ENSAYONull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_NOMBRE_ENSAYOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_OBSERVACION_Null() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_OBSERVACION_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_OBSERVACION_Null()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_OBSERVACION_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_MUESTREADORNull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITEVA_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITEVA_FMUESTREONull()
            Me(Me.tableOT_FITOEVALUACION_ANTECEDENTES.FITEVA_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FITORESISTENCIA_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FITORESISTENCIA_ANTECEDENTES As OT_FITORESISTENCIA_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FITORESISTENCIA_ANTECEDENTES = CType(Me.Table,OT_FITORESISTENCIA_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITRES_NUMPRODUCTO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMPRODUCTOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITRES_NUMPRODUCTO' de la tabla 'OT_FITORESISTENCIA_ANTEC"& _ 
                            "EDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMPRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITRES_NUMCONCENTRACIONES() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMCONCENTRACIONESColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITRES_NUMCONCENTRACIONES' de la tabla 'OT_FITORESISTENCI"& _ 
                            "A_ANTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMCONCENTRACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITRES_MICROORGANISMOS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MICROORGANISMOSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITRES_MICROORGANISMOS' de la tabla 'OT_FITORESISTENCIA_A"& _ 
                            "NTECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MICROORGANISMOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITRES_OBSERVACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_OBSERVACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITRES_OBSERVACION' de la tabla 'OT_FITORESISTENCIA_ANTEC"& _ 
                            "EDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_OBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITRES_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITRES_MUESTREADOR' de la tabla 'OT_FITORESISTENCIA_ANTEC"& _ 
                            "EDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITRES_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITRES_FMUESTREO' de la tabla 'OT_FITORESISTENCIA_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_FITORESISTENCIA_ANTECEDENTES"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITRES_NUMPRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMPRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITRES_NUMPRODUCTONull()
            Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMPRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITRES_NUMCONCENTRACIONESNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMCONCENTRACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITRES_NUMCONCENTRACIONESNull()
            Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_NUMCONCENTRACIONESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITRES_MICROORGANISMOSNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MICROORGANISMOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITRES_MICROORGANISMOSNull()
            Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MICROORGANISMOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITRES_OBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_OBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITRES_OBSERVACIONNull()
            Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_OBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITRES_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITRES_MUESTREADORNull()
            Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITRES_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITRES_FMUESTREONull()
            Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.FITRES_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_FITORESISTENCIA_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OT_FITOMONITOREO_ANTECEDENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOT_FITOMONITOREO_ANTECEDENTES As OT_FITOMONITOREO_ANTECEDENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOT_FITOMONITOREO_ANTECEDENTES = CType(Me.Table,OT_FITOMONITOREO_ANTECEDENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NUMERO() As Integer
            Get
                Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.OT_NUMEROColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.OT_NUMEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT_NLAB() As Integer
            Get
                Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.OT_NLABColumn),Integer)
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.OT_NLABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITMON_NUMLINEAS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMLINEASColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITMON_NUMLINEAS' de la tabla 'OT_FITOMONITOREO_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMLINEASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITMON_NUMCAMARAS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMCAMARASColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITMON_NUMCAMARAS' de la tabla 'OT_FITOMONITOREO_ANTECEDE"& _ 
                            "NTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMCAMARASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITMON_IDENTIFICACION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITMON_IDENTIFICACION1' de la tabla 'OT_FITOMONITOREO_ANT"& _ 
                            "ECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITMON_IDENTIFICACION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITMON_IDENTIFICACION2' de la tabla 'OT_FITOMONITOREO_ANT"& _ 
                            "ECEDENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITMON_OBSERVACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_OBSERVACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITMON_OBSERVACION' de la tabla 'OT_FITOMONITOREO_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_OBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLAB_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.NLAB_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLAB_ESTADO' de la tabla 'OT_FITOMONITOREO_ANTECEDENTES' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.NLAB_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITMON_MUESTREADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_MUESTREADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITMON_MUESTREADOR' de la tabla 'OT_FITOMONITOREO_ANTECED"& _ 
                            "ENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_MUESTREADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITMON_FMUESTREO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_FMUESTREOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FITMON_FMUESTREO' de la tabla 'OT_FITOMONITOREO_ANTECEDEN"& _ 
                            "TES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_FMUESTREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITMON_NUMLINEASNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMLINEASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITMON_NUMLINEASNull()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMLINEASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITMON_NUMCAMARASNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMCAMARASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITMON_NUMCAMARASNull()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_NUMCAMARASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITMON_IDENTIFICACION1Null() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITMON_IDENTIFICACION1Null()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITMON_IDENTIFICACION2Null() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITMON_IDENTIFICACION2Null()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_IDENTIFICACION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITMON_OBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_OBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITMON_OBSERVACIONNull()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_OBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNLAB_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.NLAB_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNLAB_ESTADONull()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.NLAB_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITMON_MUESTREADORNull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_MUESTREADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITMON_MUESTREADORNull()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_MUESTREADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITMON_FMUESTREONull() As Boolean
            Return Me.IsNull(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_FMUESTREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITMON_FMUESTREONull()
            Me(Me.tableOT_FITOMONITOREO_ANTECEDENTES.FITMON_FMUESTREOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FERT_APLICADARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FERT_APLICADARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FERT_APLICADARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FERT_APLICADARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_RECOMENDACIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_RECOMENDACIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_RECOMENDACIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_RECOMENDACIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FERTORG_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FERTORG_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FERTORG_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FERTORG_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FERTQUI_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FERTQUI_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FERTQUI_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FERTQUI_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_YEMAS_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_YEMAS_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_YEMAS_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_YEMAS_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FITOPATOLOGICOS_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FITOPATOLOGICOS_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FITOPATOLOGICOS_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FITOPATOLOGICOS_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMP_RECIBORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMP_RECIBORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMP_RECIBORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMP_RECIBORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NOTA_YEMASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NOTA_YEMASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NOTA_YEMASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NOTA_YEMASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NOTA_YEMA_NLABRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NOTA_YEMA_NLABRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NOTA_YEMA_NLABRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NOTA_YEMA_NLABRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CONSULTA_ANALISISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CONSULTA_ANALISISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CONSULTA_ANALISISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CONSULTA_ANALISISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MYEMA3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MYEMA3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MYEMA3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MYEMA3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DIG_YEMASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DIG_YEMASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DIG_YEMASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DIG_YEMASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class YEMAS_NLABRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As YEMAS_NLABRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As YEMAS_NLABRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As YEMAS_NLABRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ESTIMADOBRORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ESTIMADOBRORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ESTIMADOBRORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ESTIMADOBRORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LARGO_CARGADORRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LARGO_CARGADORRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LARGO_CARGADORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LARGO_CARGADORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS_ELEMENTOS_PASORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS_ELEMENTOS_PASORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS_ELEMENTOS_PASORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS_ELEMENTOS_PASORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OTEST_NLABRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTEST_NLABRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OTEST_NLABRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OTEST_NLABRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_CODIFICACIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_CODIFICACIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_CODIFICACIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_CODIFICACIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DIGITA_RESULTADOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DIGITA_RESULTADOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DIGITA_RESULTADOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DIGITA_RESULTADOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DUPLICA_RESULTADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DUPLICA_RESULTADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DUPLICA_RESULTADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DUPLICA_RESULTADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS_ELEMENTOS_PASO2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS_ELEMENTOS_PASO2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS_ELEMENTOS_PASO2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS_ELEMENTOS_PASO2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FOLIAR_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FOLIAR_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FOLIAR_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FOLIAR_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDEN_TRABAJORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDEN_TRABAJORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDEN_TRABAJORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDEN_TRABAJORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ANALISIS_ELEMENTOS_PASO3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ANALISIS_ELEMENTOS_PASO3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ANALISIS_ELEMENTOS_PASO3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ANALISIS_ELEMENTOS_PASO3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_SUELO_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_SUELO_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_SUELO_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_SUELO_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_TEJIDOS_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_TEJIDOS_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_TEJIDOS_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_TEJIDOS_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_AGUA_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_AGUA_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_AGUA_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_AGUA_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_CODIFICACION_RECIBORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_CODIFICACION_RECIBORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_CODIFICACION_RECIBORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_CODIFICACION_RECIBORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MODIFICA_NLABRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MODIFICA_NLABRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MODIFICA_NLABRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MODIFICA_NLABRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MYEMARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MYEMARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MYEMARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MYEMARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_NEMATODOS_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_NEMATODOS_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_NEMATODOS_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_NEMATODOS_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FITOEVALUACION_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FITOEVALUACION_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FITOEVALUACION_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FITOEVALUACION_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FITORESISTENCIA_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FITORESISTENCIA_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FITORESISTENCIA_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FITORESISTENCIA_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OT_FITOMONITOREO_ANTECEDENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OT_FITOMONITOREO_ANTECEDENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OT_FITOMONITOREO_ANTECEDENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OT_FITOMONITOREO_ANTECEDENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
